
ToolChanger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001a90  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08001bcc  08001bcc  00011bcc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001be8  08001be8  00011be8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001bec  08001bec  00011bec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08001bf0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000f0  2000000c  08001bfc  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200000fc  08001bfc  000200fc  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000b440  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001c4b  00000000  00000000  0002b475  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004903  00000000  00000000  0002d0c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000718  00000000  00000000  000319c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000a20  00000000  00000000  000320e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00003c0d  00000000  00000000  00032b00  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002be7  00000000  00000000  0003670d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000392f4  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001478  00000000  00000000  00039370  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000000c 	.word	0x2000000c
 8000158:	00000000 	.word	0x00000000
 800015c:	08001bb4 	.word	0x08001bb4

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000010 	.word	0x20000010
 8000178:	08001bb4 	.word	0x08001bb4

0800017c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800017c:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 800017e:	4b0f      	ldr	r3, [pc, #60]	; (80001bc <HAL_InitTick+0x40>)
{
 8000180:	4605      	mov	r5, r0
  if (uwTickFreq != 0U)
 8000182:	6818      	ldr	r0, [r3, #0]
 8000184:	b908      	cbnz	r0, 800018a <HAL_InitTick+0xe>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8000186:	2001      	movs	r0, #1
 8000188:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800018a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800018e:	fbb3 f3f0 	udiv	r3, r3, r0
 8000192:	4a0b      	ldr	r2, [pc, #44]	; (80001c0 <HAL_InitTick+0x44>)
 8000194:	6810      	ldr	r0, [r2, #0]
 8000196:	fbb0 f0f3 	udiv	r0, r0, r3
 800019a:	f000 fab3 	bl	8000704 <HAL_SYSTICK_Config>
 800019e:	4604      	mov	r4, r0
 80001a0:	2800      	cmp	r0, #0
 80001a2:	d1f0      	bne.n	8000186 <HAL_InitTick+0xa>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001a4:	2d0f      	cmp	r5, #15
 80001a6:	d8ee      	bhi.n	8000186 <HAL_InitTick+0xa>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001a8:	4602      	mov	r2, r0
 80001aa:	4629      	mov	r1, r5
 80001ac:	f04f 30ff 	mov.w	r0, #4294967295
 80001b0:	f000 fa74 	bl	800069c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80001b4:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <HAL_InitTick+0x48>)
 80001b6:	4620      	mov	r0, r4
 80001b8:	601d      	str	r5, [r3, #0]
  }

  /* Return function status */
  return status;
}
 80001ba:	bd38      	pop	{r3, r4, r5, pc}
 80001bc:	20000000 	.word	0x20000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	20000004 	.word	0x20000004

080001c8 <HAL_Init>:
{
 80001c8:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001ca:	2003      	movs	r0, #3
 80001cc:	f000 fa54 	bl	8000678 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80001d0:	2000      	movs	r0, #0
 80001d2:	f7ff ffd3 	bl	800017c <HAL_InitTick>
 80001d6:	4604      	mov	r4, r0
 80001d8:	b918      	cbnz	r0, 80001e2 <HAL_Init+0x1a>
    HAL_MspInit();
 80001da:	f001 fbb3 	bl	8001944 <HAL_MspInit>
}
 80001de:	4620      	mov	r0, r4
 80001e0:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 80001e2:	2401      	movs	r4, #1
 80001e4:	e7fb      	b.n	80001de <HAL_Init+0x16>
	...

080001e8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001e8:	4a03      	ldr	r2, [pc, #12]	; (80001f8 <HAL_IncTick+0x10>)
 80001ea:	4904      	ldr	r1, [pc, #16]	; (80001fc <HAL_IncTick+0x14>)
 80001ec:	6813      	ldr	r3, [r2, #0]
 80001ee:	6809      	ldr	r1, [r1, #0]
 80001f0:	440b      	add	r3, r1
 80001f2:	6013      	str	r3, [r2, #0]
 80001f4:	4770      	bx	lr
 80001f6:	bf00      	nop
 80001f8:	20000028 	.word	0x20000028
 80001fc:	20000000 	.word	0x20000000

08000200 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000200:	4b01      	ldr	r3, [pc, #4]	; (8000208 <HAL_GetTick+0x8>)
 8000202:	6818      	ldr	r0, [r3, #0]
}
 8000204:	4770      	bx	lr
 8000206:	bf00      	nop
 8000208:	20000028 	.word	0x20000028

0800020c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800020c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cr1 = 0;
  uint32_t tmp_cr2 = 0;
  
  /* Check ADC handle */
  if(hadc == NULL)
 800020e:	4604      	mov	r4, r0
 8000210:	b908      	cbnz	r0, 8000216 <HAL_ADC_Init+0xa>
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
      
      tmp_hal_status = HAL_ERROR;
 8000212:	2001      	movs	r0, #1
 8000214:	e095      	b.n	8000342 <HAL_ADC_Init+0x136>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000216:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8000218:	b973      	cbnz	r3, 8000238 <HAL_ADC_Init+0x2c>
    ADC_CLEAR_ERRORCODE(hadc);
 800021a:	6503      	str	r3, [r0, #80]	; 0x50
    hadc->Lock = HAL_UNLOCKED;
 800021c:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000220:	4b56      	ldr	r3, [pc, #344]	; (800037c <HAL_ADC_Init+0x170>)
 8000222:	6a1a      	ldr	r2, [r3, #32]
 8000224:	f042 0201 	orr.w	r2, r2, #1
 8000228:	621a      	str	r2, [r3, #32]
 800022a:	6a1b      	ldr	r3, [r3, #32]
 800022c:	f003 0301 	and.w	r3, r3, #1
 8000230:	9301      	str	r3, [sp, #4]
 8000232:	9b01      	ldr	r3, [sp, #4]
    HAL_ADC_MspInit(hadc);
 8000234:	f001 fba8 	bl	8001988 <HAL_ADC_MspInit>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000238:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800023a:	06db      	lsls	r3, r3, #27
 800023c:	d4e9      	bmi.n	8000212 <HAL_ADC_Init+0x6>
    ADC_STATE_CLR_SET(hadc->State,
 800023e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    MODIFY_REG(ADC->CCR                 ,
 8000240:	4a4f      	ldr	r2, [pc, #316]	; (8000380 <HAL_ADC_Init+0x174>)
    ADC_STATE_CLR_SET(hadc->State,
 8000242:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000246:	f023 0302 	bic.w	r3, r3, #2
 800024a:	f043 0302 	orr.w	r3, r3, #2
 800024e:	64e3      	str	r3, [r4, #76]	; 0x4c
    MODIFY_REG(ADC->CCR                 ,
 8000250:	6853      	ldr	r3, [r2, #4]
 8000252:	6861      	ldr	r1, [r4, #4]
 8000254:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000258:	430b      	orrs	r3, r1
 800025a:	6053      	str	r3, [r2, #4]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800025c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000260:	fa90 f0a0 	rbit	r0, r0
 8000264:	2302      	movs	r3, #2
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000266:	fab0 f080 	clz	r0, r0
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 800026a:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
 800026e:	fa93 f3a3 	rbit	r3, r3
 8000272:	fab3 f383 	clz	r3, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000276:	6965      	ldr	r5, [r4, #20]
 8000278:	68e2      	ldr	r2, [r4, #12]
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 800027a:	fa01 f303 	lsl.w	r3, r1, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800027e:	432a      	orrs	r2, r5
 8000280:	6a25      	ldr	r5, [r4, #32]
 8000282:	432a      	orrs	r2, r5
 8000284:	f894 503c 	ldrb.w	r5, [r4, #60]	; 0x3c
 8000288:	fa05 f000 	lsl.w	r0, r5, r0
 800028c:	4302      	orrs	r2, r0
                hadc->Init.ChannelsBank                                        |
 800028e:	4313      	orrs	r3, r2
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000290:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000292:	6925      	ldr	r5, [r4, #16]
 8000294:	2a10      	cmp	r2, #16
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8000296:	bf1c      	itt	ne
 8000298:	6ba0      	ldrne	r0, [r4, #56]	; 0x38
 800029a:	4302      	orrne	r2, r0
    if ((ADC_IS_ENABLE(hadc) == RESET))
 800029c:	6820      	ldr	r0, [r4, #0]
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 800029e:	bf18      	it	ne
 80002a0:	4313      	orrne	r3, r2
    if ((ADC_IS_ENABLE(hadc) == RESET))
 80002a2:	6802      	ldr	r2, [r0, #0]
 80002a4:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 80002a8:	d124      	bne.n	80002f4 <HAL_ADC_Init+0xe8>
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 80002aa:	69a6      	ldr	r6, [r4, #24]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80002ac:	69e7      	ldr	r7, [r4, #28]
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 80002ae:	4333      	orrs	r3, r6
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80002b0:	68a6      	ldr	r6, [r4, #8]
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 80002b2:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80002b6:	ea46 0607 	orr.w	r6, r6, r7
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 80002ba:	d044      	beq.n	8000346 <HAL_ADC_Init+0x13a>
 80002bc:	2d01      	cmp	r5, #1
 80002be:	bf08      	it	eq
 80002c0:	f44f 7280 	moveq.w	r2, #256	; 0x100
                  hadc->Init.LowPowerAutoPowerOff           |
 80002c4:	4332      	orrs	r2, r6
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80002c6:	f894 602c 	ldrb.w	r6, [r4, #44]	; 0x2c
 80002ca:	2e01      	cmp	r6, #1
 80002cc:	d10d      	bne.n	80002ea <HAL_ADC_Init+0xde>
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d13b      	bne.n	800034a <HAL_ADC_Init+0x13e>
 80002d2:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80002d6:	fa91 f1a1 	rbit	r1, r1
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80002da:	fab1 f681 	clz	r6, r1
 80002de:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80002e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80002e4:	3901      	subs	r1, #1
 80002e6:	40b1      	lsls	r1, r6
 80002e8:	430a      	orrs	r2, r1
        MODIFY_REG(hadc->Instance->CR1,
 80002ea:	6846      	ldr	r6, [r0, #4]
 80002ec:	4925      	ldr	r1, [pc, #148]	; (8000384 <HAL_ADC_Init+0x178>)
 80002ee:	4031      	ands	r1, r6
 80002f0:	430a      	orrs	r2, r1
 80002f2:	6042      	str	r2, [r0, #4]
    MODIFY_REG(hadc->Instance->CR2    ,
 80002f4:	6881      	ldr	r1, [r0, #8]
 80002f6:	4a24      	ldr	r2, [pc, #144]	; (8000388 <HAL_ADC_Init+0x17c>)
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80002f8:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
    MODIFY_REG(hadc->Instance->CR2    ,
 80002fc:	ea02 0201 	and.w	r2, r2, r1
 8000300:	ea42 0203 	orr.w	r2, r2, r3
 8000304:	6082      	str	r2, [r0, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000306:	d001      	beq.n	800030c <HAL_ADC_Init+0x100>
 8000308:	2d01      	cmp	r5, #1
 800030a:	d127      	bne.n	800035c <HAL_ADC_Init+0x150>
      MODIFY_REG(hadc->Instance->SQR1                         ,
 800030c:	6b05      	ldr	r5, [r0, #48]	; 0x30
 800030e:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 8000312:	fa92 f2a2 	rbit	r2, r2
 8000316:	fab2 f182 	clz	r1, r2
 800031a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800031c:	3a01      	subs	r2, #1
 800031e:	408a      	lsls	r2, r1
 8000320:	f025 71f8 	bic.w	r1, r5, #32505856	; 0x1f00000
 8000324:	430a      	orrs	r2, r1
      MODIFY_REG(hadc->Instance->SQR1,
 8000326:	6302      	str	r2, [r0, #48]	; 0x30
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 8000328:	6881      	ldr	r1, [r0, #8]
 800032a:	4a18      	ldr	r2, [pc, #96]	; (800038c <HAL_ADC_Init+0x180>)
 800032c:	400a      	ands	r2, r1
 800032e:	4293      	cmp	r3, r2
 8000330:	d118      	bne.n	8000364 <HAL_ADC_Init+0x158>
      ADC_CLEAR_ERRORCODE(hadc);
 8000332:	2000      	movs	r0, #0
 8000334:	6520      	str	r0, [r4, #80]	; 0x50
      ADC_STATE_CLR_SET(hadc->State,
 8000336:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000338:	f023 0303 	bic.w	r3, r3, #3
 800033c:	f043 0301 	orr.w	r3, r3, #1
 8000340:	64e3      	str	r3, [r4, #76]	; 0x4c
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 8000342:	b003      	add	sp, #12
 8000344:	bdf0      	pop	{r4, r5, r6, r7, pc}
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8000346:	462a      	mov	r2, r5
 8000348:	e7bc      	b.n	80002c4 <HAL_ADC_Init+0xb8>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800034a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800034c:	f041 0120 	orr.w	r1, r1, #32
 8000350:	64e1      	str	r1, [r4, #76]	; 0x4c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000352:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8000354:	f041 0101 	orr.w	r1, r1, #1
 8000358:	6521      	str	r1, [r4, #80]	; 0x50
 800035a:	e7c6      	b.n	80002ea <HAL_ADC_Init+0xde>
      MODIFY_REG(hadc->Instance->SQR1,
 800035c:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800035e:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 8000362:	e7e0      	b.n	8000326 <HAL_ADC_Init+0x11a>
      ADC_STATE_CLR_SET(hadc->State,
 8000364:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000366:	f023 0312 	bic.w	r3, r3, #18
 800036a:	f043 0310 	orr.w	r3, r3, #16
 800036e:	64e3      	str	r3, [r4, #76]	; 0x4c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000370:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000372:	f043 0301 	orr.w	r3, r3, #1
 8000376:	6523      	str	r3, [r4, #80]	; 0x50
 8000378:	e74b      	b.n	8000212 <HAL_ADC_Init+0x6>
 800037a:	bf00      	nop
 800037c:	40023800 	.word	0x40023800
 8000380:	40012700 	.word	0x40012700
 8000384:	fcfc16ff 	.word	0xfcfc16ff
 8000388:	c0fff18d 	.word	0xc0fff18d
 800038c:	bf80fffe 	.word	0xbf80fffe

08000390 <HAL_ADC_PollForConversion>:
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and and polling for end of each conversion. */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000390:	6803      	ldr	r3, [r0, #0]
{
 8000392:	b570      	push	{r4, r5, r6, lr}
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000394:	689a      	ldr	r2, [r3, #8]
{
 8000396:	4604      	mov	r4, r0
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000398:	0556      	lsls	r6, r2, #21
{
 800039a:	460d      	mov	r5, r1
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800039c:	d50b      	bpl.n	80003b6 <HAL_ADC_PollForConversion+0x26>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800039e:	689b      	ldr	r3, [r3, #8]
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80003a0:	05d8      	lsls	r0, r3, #23
 80003a2:	d508      	bpl.n	80003b6 <HAL_ADC_PollForConversion+0x26>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80003a4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
    
    return HAL_ERROR;
 80003a6:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80003a8:	f043 0320 	orr.w	r3, r3, #32
 80003ac:	64e3      	str	r3, [r4, #76]	; 0x4c
    __HAL_UNLOCK(hadc);
 80003ae:	2300      	movs	r3, #0
 80003b0:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    return HAL_ERROR;
 80003b4:	bd70      	pop	{r4, r5, r6, pc}
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80003b6:	f7ff ff23 	bl	8000200 <HAL_GetTick>
 80003ba:	4606      	mov	r6, r0
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80003bc:	6823      	ldr	r3, [r4, #0]
 80003be:	681a      	ldr	r2, [r3, #0]
 80003c0:	0792      	lsls	r2, r2, #30
 80003c2:	d50e      	bpl.n	80003e2 <HAL_ADC_PollForConversion+0x52>
  }
  
  /* Clear end of conversion flag of regular group if low power feature     */
  /* "Auto Wait" is disabled, to not interfere with this feature until data */
  /* register is read using function HAL_ADC_GetValue().                    */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80003c4:	69a2      	ldr	r2, [r4, #24]
 80003c6:	b912      	cbnz	r2, 80003ce <HAL_ADC_PollForConversion+0x3e>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80003c8:	f06f 0212 	mvn.w	r2, #18
 80003cc:	601a      	str	r2, [r3, #0]
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80003ce:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80003d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80003d4:	64e2      	str	r2, [r4, #76]	; 0x4c
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32L1, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80003d6:	689a      	ldr	r2, [r3, #8]
 80003d8:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80003dc:	d013      	beq.n	8000406 <HAL_ADC_PollForConversion+0x76>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80003de:	2000      	movs	r0, #0
 80003e0:	bd70      	pop	{r4, r5, r6, pc}
    if(Timeout != HAL_MAX_DELAY)
 80003e2:	1c69      	adds	r1, r5, #1
 80003e4:	d0eb      	beq.n	80003be <HAL_ADC_PollForConversion+0x2e>
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80003e6:	b945      	cbnz	r5, 80003fa <HAL_ADC_PollForConversion+0x6a>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80003e8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
        return HAL_TIMEOUT;
 80003ea:	2003      	movs	r0, #3
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80003ec:	f043 0304 	orr.w	r3, r3, #4
 80003f0:	64e3      	str	r3, [r4, #76]	; 0x4c
        __HAL_UNLOCK(hadc);
 80003f2:	2300      	movs	r3, #0
 80003f4:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
        return HAL_TIMEOUT;
 80003f8:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80003fa:	f7ff ff01 	bl	8000200 <HAL_GetTick>
 80003fe:	1b80      	subs	r0, r0, r6
 8000400:	4285      	cmp	r5, r0
 8000402:	d2db      	bcs.n	80003bc <HAL_ADC_PollForConversion+0x2c>
 8000404:	e7f0      	b.n	80003e8 <HAL_ADC_PollForConversion+0x58>
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000406:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 800040a:	2a00      	cmp	r2, #0
 800040c:	d1e7      	bne.n	80003de <HAL_ADC_PollForConversion+0x4e>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800040e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000410:	f012 7ff8 	tst.w	r2, #32505856	; 0x1f00000
 8000414:	d002      	beq.n	800041c <HAL_ADC_PollForConversion+0x8c>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000416:	689b      	ldr	r3, [r3, #8]
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000418:	055b      	lsls	r3, r3, #21
 800041a:	d4e0      	bmi.n	80003de <HAL_ADC_PollForConversion+0x4e>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800041c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800041e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000422:	64e3      	str	r3, [r4, #76]	; 0x4c
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000424:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8000426:	f410 5080 	ands.w	r0, r0, #4096	; 0x1000
 800042a:	d1d8      	bne.n	80003de <HAL_ADC_PollForConversion+0x4e>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800042c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800042e:	f043 0301 	orr.w	r3, r3, #1
 8000432:	64e3      	str	r3, [r4, #76]	; 0x4c
}
 8000434:	bd70      	pop	{r4, r5, r6, pc}

08000436 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000436:	6803      	ldr	r3, [r0, #0]
 8000438:	6d98      	ldr	r0, [r3, #88]	; 0x58
}
 800043a:	4770      	bx	lr

0800043c <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0;
 800043c:	2300      	movs	r3, #0
{
 800043e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0;
 8000440:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000442:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8000446:	2b01      	cmp	r3, #1
 8000448:	f000 809c 	beq.w	8000584 <HAL_ADC_ConfigChannel+0x148>
 800044c:	2301      	movs	r3, #1
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800044e:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 8000450:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
  if (sConfig->Rank < 7)
 8000454:	2d06      	cmp	r5, #6
 8000456:	6804      	ldr	r4, [r0, #0]
 8000458:	ea4f 0385 	mov.w	r3, r5, lsl #2
 800045c:	680a      	ldr	r2, [r1, #0]
 800045e:	d821      	bhi.n	80004a4 <HAL_ADC_ConfigChannel+0x68>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8000460:	442b      	add	r3, r5
 8000462:	251f      	movs	r5, #31
 8000464:	6c26      	ldr	r6, [r4, #64]	; 0x40
 8000466:	3b05      	subs	r3, #5
 8000468:	409d      	lsls	r5, r3
 800046a:	ea26 0505 	bic.w	r5, r6, r5
 800046e:	fa02 f303 	lsl.w	r3, r2, r3
 8000472:	432b      	orrs	r3, r5
 8000474:	6423      	str	r3, [r4, #64]	; 0x40
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 8000476:	2a09      	cmp	r2, #9
 8000478:	d84a      	bhi.n	8000510 <HAL_ADC_ConfigChannel+0xd4>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 800047a:	2507      	movs	r5, #7
 800047c:	6963      	ldr	r3, [r4, #20]
 800047e:	eb02 0642 	add.w	r6, r2, r2, lsl #1
 8000482:	6889      	ldr	r1, [r1, #8]
 8000484:	40b5      	lsls	r5, r6
 8000486:	ea23 0305 	bic.w	r3, r3, r5
 800048a:	40b1      	lsls	r1, r6
 800048c:	430b      	orrs	r3, r1
 800048e:	6163      	str	r3, [r4, #20]
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000490:	f1a2 0310 	sub.w	r3, r2, #16
 8000494:	2b01      	cmp	r3, #1
 8000496:	d95d      	bls.n	8000554 <HAL_ADC_ConfigChannel+0x118>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000498:	2300      	movs	r3, #0
 800049a:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 800049e:	4618      	mov	r0, r3
}
 80004a0:	b002      	add	sp, #8
 80004a2:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13)
 80004a4:	2d0c      	cmp	r5, #12
 80004a6:	d80b      	bhi.n	80004c0 <HAL_ADC_ConfigChannel+0x84>
    MODIFY_REG(hadc->Instance->SQR4,
 80004a8:	442b      	add	r3, r5
 80004aa:	251f      	movs	r5, #31
 80004ac:	6be6      	ldr	r6, [r4, #60]	; 0x3c
 80004ae:	3b23      	subs	r3, #35	; 0x23
 80004b0:	409d      	lsls	r5, r3
 80004b2:	ea26 0505 	bic.w	r5, r6, r5
 80004b6:	fa02 f303 	lsl.w	r3, r2, r3
 80004ba:	432b      	orrs	r3, r5
 80004bc:	63e3      	str	r3, [r4, #60]	; 0x3c
 80004be:	e7da      	b.n	8000476 <HAL_ADC_ConfigChannel+0x3a>
  else if (sConfig->Rank < 19)
 80004c0:	2d12      	cmp	r5, #18
 80004c2:	d80b      	bhi.n	80004dc <HAL_ADC_ConfigChannel+0xa0>
    MODIFY_REG(hadc->Instance->SQR3,
 80004c4:	442b      	add	r3, r5
 80004c6:	251f      	movs	r5, #31
 80004c8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80004ca:	3b41      	subs	r3, #65	; 0x41
 80004cc:	409d      	lsls	r5, r3
 80004ce:	ea26 0505 	bic.w	r5, r6, r5
 80004d2:	fa02 f303 	lsl.w	r3, r2, r3
 80004d6:	432b      	orrs	r3, r5
 80004d8:	63a3      	str	r3, [r4, #56]	; 0x38
 80004da:	e7cc      	b.n	8000476 <HAL_ADC_ConfigChannel+0x3a>
  else if (sConfig->Rank < 25)
 80004dc:	2d18      	cmp	r5, #24
 80004de:	d80b      	bhi.n	80004f8 <HAL_ADC_ConfigChannel+0xbc>
    MODIFY_REG(hadc->Instance->SQR2,
 80004e0:	442b      	add	r3, r5
 80004e2:	251f      	movs	r5, #31
 80004e4:	6b66      	ldr	r6, [r4, #52]	; 0x34
 80004e6:	3b5f      	subs	r3, #95	; 0x5f
 80004e8:	409d      	lsls	r5, r3
 80004ea:	ea26 0505 	bic.w	r5, r6, r5
 80004ee:	fa02 f303 	lsl.w	r3, r2, r3
 80004f2:	432b      	orrs	r3, r5
 80004f4:	6363      	str	r3, [r4, #52]	; 0x34
 80004f6:	e7be      	b.n	8000476 <HAL_ADC_ConfigChannel+0x3a>
    MODIFY_REG(hadc->Instance->SQR1,
 80004f8:	442b      	add	r3, r5
 80004fa:	251f      	movs	r5, #31
 80004fc:	6b26      	ldr	r6, [r4, #48]	; 0x30
 80004fe:	3b7d      	subs	r3, #125	; 0x7d
 8000500:	409d      	lsls	r5, r3
 8000502:	ea26 0505 	bic.w	r5, r6, r5
 8000506:	fa02 f303 	lsl.w	r3, r2, r3
 800050a:	432b      	orrs	r3, r5
 800050c:	6323      	str	r3, [r4, #48]	; 0x30
 800050e:	e7b2      	b.n	8000476 <HAL_ADC_ConfigChannel+0x3a>
  else if (sConfig->Channel < ADC_CHANNEL_20)
 8000510:	2a13      	cmp	r2, #19
 8000512:	d80d      	bhi.n	8000530 <HAL_ADC_ConfigChannel+0xf4>
    MODIFY_REG(hadc->Instance->SMPR2,
 8000514:	2607      	movs	r6, #7
 8000516:	eb02 0542 	add.w	r5, r2, r2, lsl #1
 800051a:	6923      	ldr	r3, [r4, #16]
 800051c:	3d1e      	subs	r5, #30
 800051e:	6889      	ldr	r1, [r1, #8]
 8000520:	40ae      	lsls	r6, r5
 8000522:	ea23 0306 	bic.w	r3, r3, r6
 8000526:	fa01 f505 	lsl.w	r5, r1, r5
 800052a:	432b      	orrs	r3, r5
 800052c:	6123      	str	r3, [r4, #16]
 800052e:	e7af      	b.n	8000490 <HAL_ADC_ConfigChannel+0x54>
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 8000530:	2a1a      	cmp	r2, #26
 8000532:	d80d      	bhi.n	8000550 <HAL_ADC_ConfigChannel+0x114>
    MODIFY_REG(hadc->Instance->SMPR1,
 8000534:	2607      	movs	r6, #7
 8000536:	eb02 0542 	add.w	r5, r2, r2, lsl #1
 800053a:	68e3      	ldr	r3, [r4, #12]
 800053c:	3d3c      	subs	r5, #60	; 0x3c
 800053e:	6889      	ldr	r1, [r1, #8]
 8000540:	40ae      	lsls	r6, r5
 8000542:	ea23 0306 	bic.w	r3, r3, r6
 8000546:	fa01 f505 	lsl.w	r5, r1, r5
 800054a:	432b      	orrs	r3, r5
 800054c:	60e3      	str	r3, [r4, #12]
 800054e:	e79f      	b.n	8000490 <HAL_ADC_ConfigChannel+0x54>
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 8000550:	bf00      	nop
 8000552:	e79d      	b.n	8000490 <HAL_ADC_ConfigChannel+0x54>
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8000554:	4b0c      	ldr	r3, [pc, #48]	; (8000588 <HAL_ADC_ConfigChannel+0x14c>)
 8000556:	6859      	ldr	r1, [r3, #4]
 8000558:	0209      	lsls	r1, r1, #8
 800055a:	d49d      	bmi.n	8000498 <HAL_ADC_ConfigChannel+0x5c>
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 800055c:	6859      	ldr	r1, [r3, #4]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800055e:	2a10      	cmp	r2, #16
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8000560:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000564:	6059      	str	r1, [r3, #4]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000566:	d197      	bne.n	8000498 <HAL_ADC_ConfigChannel+0x5c>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8000568:	4b08      	ldr	r3, [pc, #32]	; (800058c <HAL_ADC_ConfigChannel+0x150>)
 800056a:	4a09      	ldr	r2, [pc, #36]	; (8000590 <HAL_ADC_ConfigChannel+0x154>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	fbb3 f2f2 	udiv	r2, r3, r2
 8000572:	230a      	movs	r3, #10
 8000574:	4353      	muls	r3, r2
            wait_loop_index--;
 8000576:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0)
 8000578:	9b01      	ldr	r3, [sp, #4]
 800057a:	2b00      	cmp	r3, #0
 800057c:	d08c      	beq.n	8000498 <HAL_ADC_ConfigChannel+0x5c>
            wait_loop_index--;
 800057e:	9b01      	ldr	r3, [sp, #4]
 8000580:	3b01      	subs	r3, #1
 8000582:	e7f8      	b.n	8000576 <HAL_ADC_ConfigChannel+0x13a>
  __HAL_LOCK(hadc);
 8000584:	2002      	movs	r0, #2
 8000586:	e78b      	b.n	80004a0 <HAL_ADC_ConfigChannel+0x64>
 8000588:	40012700 	.word	0x40012700
 800058c:	20000008 	.word	0x20000008
 8000590:	000f4240 	.word	0x000f4240

08000594 <ADC_Enable>:
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0;
  __IO uint32_t wait_loop_index = 0;
 8000594:	2300      	movs	r3, #0
{
 8000596:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0;
 8000598:	9301      	str	r3, [sp, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800059a:	6803      	ldr	r3, [r0, #0]
{
 800059c:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 800059e:	681a      	ldr	r2, [r3, #0]
 80005a0:	0652      	lsls	r2, r2, #25
 80005a2:	d502      	bpl.n	80005aa <ADC_Enable+0x16>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80005a4:	2000      	movs	r0, #0
}
 80005a6:	b002      	add	sp, #8
 80005a8:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_ADC_ENABLE(hadc);
 80005aa:	689a      	ldr	r2, [r3, #8]
 80005ac:	f042 0201 	orr.w	r2, r2, #1
 80005b0:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80005b2:	4b13      	ldr	r3, [pc, #76]	; (8000600 <ADC_Enable+0x6c>)
 80005b4:	4a13      	ldr	r2, [pc, #76]	; (8000604 <ADC_Enable+0x70>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80005bc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
      wait_loop_index--;
 80005c0:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 80005c2:	9b01      	ldr	r3, [sp, #4]
 80005c4:	b9c3      	cbnz	r3, 80005f8 <ADC_Enable+0x64>
    tickstart = HAL_GetTick();    
 80005c6:	f7ff fe1b 	bl	8000200 <HAL_GetTick>
 80005ca:	4606      	mov	r6, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 80005cc:	6823      	ldr	r3, [r4, #0]
 80005ce:	681d      	ldr	r5, [r3, #0]
 80005d0:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 80005d4:	d1e6      	bne.n	80005a4 <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 80005d6:	f7ff fe13 	bl	8000200 <HAL_GetTick>
 80005da:	1b80      	subs	r0, r0, r6
 80005dc:	2802      	cmp	r0, #2
 80005de:	d9f5      	bls.n	80005cc <ADC_Enable+0x38>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80005e0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
        __HAL_UNLOCK(hadc);
 80005e2:	f884 5048 	strb.w	r5, [r4, #72]	; 0x48
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80005e6:	f043 0310 	orr.w	r3, r3, #16
 80005ea:	64e3      	str	r3, [r4, #76]	; 0x4c
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80005ec:	6d23      	ldr	r3, [r4, #80]	; 0x50
        __HAL_UNLOCK(hadc);
 80005ee:	2001      	movs	r0, #1
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80005f0:	f043 0301 	orr.w	r3, r3, #1
 80005f4:	6523      	str	r3, [r4, #80]	; 0x50
 80005f6:	e7d6      	b.n	80005a6 <ADC_Enable+0x12>
      wait_loop_index--;
 80005f8:	9b01      	ldr	r3, [sp, #4]
 80005fa:	3b01      	subs	r3, #1
 80005fc:	e7e0      	b.n	80005c0 <ADC_Enable+0x2c>
 80005fe:	bf00      	nop
 8000600:	20000008 	.word	0x20000008
 8000604:	000f4240 	.word	0x000f4240

08000608 <HAL_ADC_Start>:
  __HAL_LOCK(hadc);
 8000608:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
{
 800060c:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 800060e:	2b01      	cmp	r3, #1
{
 8000610:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8000612:	d02e      	beq.n	8000672 <HAL_ADC_Start+0x6a>
 8000614:	2301      	movs	r3, #1
 8000616:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
  tmp_hal_status = ADC_Enable(hadc);
 800061a:	f7ff ffbb 	bl	8000594 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 800061e:	bb48      	cbnz	r0, 8000674 <HAL_ADC_Start+0x6c>
    ADC_STATE_CLR_SET(hadc->State,
 8000620:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000622:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000626:	f023 0301 	bic.w	r3, r3, #1
 800062a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800062e:	64e3      	str	r3, [r4, #76]	; 0x4c
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000630:	6823      	ldr	r3, [r4, #0]
 8000632:	685a      	ldr	r2, [r3, #4]
 8000634:	0552      	lsls	r2, r2, #21
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000636:	bf41      	itttt	mi
 8000638:	6ce2      	ldrmi	r2, [r4, #76]	; 0x4c
 800063a:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 800063e:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 8000642:	64e2      	strmi	r2, [r4, #76]	; 0x4c
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000644:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8000646:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800064a:	bf1c      	itt	ne
 800064c:	6d22      	ldrne	r2, [r4, #80]	; 0x50
 800064e:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8000652:	6522      	str	r2, [r4, #80]	; 0x50
    __HAL_UNLOCK(hadc);
 8000654:	2200      	movs	r2, #0
 8000656:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800065a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800065e:	601a      	str	r2, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8000660:	689a      	ldr	r2, [r3, #8]
 8000662:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8000666:	d105      	bne.n	8000674 <HAL_ADC_Start+0x6c>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 8000668:	689a      	ldr	r2, [r3, #8]
 800066a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8000672:	2002      	movs	r0, #2
}
 8000674:	bd10      	pop	{r4, pc}
	...

08000678 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000678:	4a07      	ldr	r2, [pc, #28]	; (8000698 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800067a:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800067c:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800067e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000682:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000686:	041b      	lsls	r3, r3, #16
 8000688:	0c1b      	lsrs	r3, r3, #16
 800068a:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800068e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000692:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000694:	60d3      	str	r3, [r2, #12]
 8000696:	4770      	bx	lr
 8000698:	e000ed00 	.word	0xe000ed00

0800069c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800069c:	4b17      	ldr	r3, [pc, #92]	; (80006fc <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	68dc      	ldr	r4, [r3, #12]
 80006a2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006a6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006aa:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006ac:	2b04      	cmp	r3, #4
 80006ae:	bf28      	it	cs
 80006b0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006b2:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006b4:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006b8:	bf98      	it	ls
 80006ba:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006bc:	fa05 f303 	lsl.w	r3, r5, r3
 80006c0:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006c4:	bf88      	it	hi
 80006c6:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006c8:	4019      	ands	r1, r3
 80006ca:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006cc:	fa05 f404 	lsl.w	r4, r5, r4
 80006d0:	3c01      	subs	r4, #1
 80006d2:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 80006d4:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006d6:	ea42 0201 	orr.w	r2, r2, r1
 80006da:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006de:	bfa9      	itett	ge
 80006e0:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e4:	4b06      	ldrlt	r3, [pc, #24]	; (8000700 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e6:	b2d2      	uxtbge	r2, r2
 80006e8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ec:	bfbb      	ittet	lt
 80006ee:	f000 000f 	andlt.w	r0, r0, #15
 80006f2:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f8:	541a      	strblt	r2, [r3, r0]
 80006fa:	bd30      	pop	{r4, r5, pc}
 80006fc:	e000ed00 	.word	0xe000ed00
 8000700:	e000ed14 	.word	0xe000ed14

08000704 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000704:	3801      	subs	r0, #1
 8000706:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800070a:	d20a      	bcs.n	8000722 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800070c:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800070e:	4b06      	ldr	r3, [pc, #24]	; (8000728 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000710:	4a06      	ldr	r2, [pc, #24]	; (800072c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000712:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000714:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000718:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800071a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800071c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000722:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	e000e010 	.word	0xe000e010
 800072c:	e000ed00 	.word	0xe000ed00

08000730 <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
  uint32_t position = 0x00;
 8000730:	2300      	movs	r3, #0
{ 
 8000732:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000736:	4a62      	ldr	r2, [pc, #392]	; (80008c0 <HAL_GPIO_Init+0x190>)
  while (((GPIO_Init->Pin) >> position) != 0)
 8000738:	f8d1 8000 	ldr.w	r8, [r1]
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800073c:	f8df 9188 	ldr.w	r9, [pc, #392]	; 80008c8 <HAL_GPIO_Init+0x198>
{ 
 8000740:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0)
 8000742:	fa38 f403 	lsrs.w	r4, r8, r3
 8000746:	d102      	bne.n	800074e <HAL_GPIO_Init+0x1e>
      }
    }
    
    position++;
  } 
}
 8000748:	b005      	add	sp, #20
 800074a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800074e:	2401      	movs	r4, #1
 8000750:	409c      	lsls	r4, r3
    if(iocurrent)
 8000752:	ea18 0604 	ands.w	r6, r8, r4
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000756:	9401      	str	r4, [sp, #4]
    if(iocurrent)
 8000758:	f000 80a7 	beq.w	80008aa <HAL_GPIO_Init+0x17a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 800075c:	684c      	ldr	r4, [r1, #4]
 800075e:	f024 0a10 	bic.w	sl, r4, #16
 8000762:	f1ba 0f02 	cmp.w	sl, #2
 8000766:	d116      	bne.n	8000796 <HAL_GPIO_Init+0x66>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 8000768:	f04f 0e0f 	mov.w	lr, #15
        temp = GPIOx->AFR[position >> 3];
 800076c:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 8000770:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 8000774:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8000778:	f8dc 5020 	ldr.w	r5, [ip, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 800077c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000780:	fa0e fe0b 	lsl.w	lr, lr, fp
 8000784:	ea25 0e0e 	bic.w	lr, r5, lr
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));       
 8000788:	690d      	ldr	r5, [r1, #16]
 800078a:	fa05 f50b 	lsl.w	r5, r5, fp
 800078e:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3] = temp;
 8000792:	f8cc 5020 	str.w	r5, [ip, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8000796:	2503      	movs	r5, #3
 8000798:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800079c:	fa05 f50c 	lsl.w	r5, r5, ip
 80007a0:	43ed      	mvns	r5, r5
      temp = GPIOx->MODER;
 80007a2:	f8d0 b000 	ldr.w	fp, [r0]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80007a6:	f004 0e03 	and.w	lr, r4, #3
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 80007aa:	ea0b 0b05 	and.w	fp, fp, r5
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80007ae:	fa0e fe0c 	lsl.w	lr, lr, ip
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007b2:	f10a 3aff 	add.w	sl, sl, #4294967295
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80007b6:	ea4e 0e0b 	orr.w	lr, lr, fp
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007ba:	f1ba 0f01 	cmp.w	sl, #1
      GPIOx->MODER = temp;
 80007be:	f8c0 e000 	str.w	lr, [r0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007c2:	d816      	bhi.n	80007f2 <HAL_GPIO_Init+0xc2>
        temp = GPIOx->OSPEEDR; 
 80007c4:	f8d0 e008 	ldr.w	lr, [r0, #8]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80007c8:	68cf      	ldr	r7, [r1, #12]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80007ca:	ea05 0e0e 	and.w	lr, r5, lr
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80007ce:	fa07 fa0c 	lsl.w	sl, r7, ip
 80007d2:	ea4a 0e0e 	orr.w	lr, sl, lr
        GPIOx->OSPEEDR = temp;
 80007d6:	f8c0 e008 	str.w	lr, [r0, #8]
        temp = GPIOx->OTYPER;
 80007da:	f8d0 e004 	ldr.w	lr, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80007de:	9f01      	ldr	r7, [sp, #4]
 80007e0:	ea2e 0707 	bic.w	r7, lr, r7
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80007e4:	f3c4 1e00 	ubfx	lr, r4, #4, #1
 80007e8:	fa0e fe03 	lsl.w	lr, lr, r3
 80007ec:	ea4e 0707 	orr.w	r7, lr, r7
        GPIOx->OTYPER = temp;
 80007f0:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80007f2:	68c7      	ldr	r7, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80007f4:	403d      	ands	r5, r7
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80007f6:	688f      	ldr	r7, [r1, #8]
 80007f8:	fa07 f70c 	lsl.w	r7, r7, ip
 80007fc:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80007fe:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000800:	00e5      	lsls	r5, r4, #3
 8000802:	d552      	bpl.n	80008aa <HAL_GPIO_Init+0x17a>
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000804:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000808:	f8d9 5020 	ldr.w	r5, [r9, #32]
 800080c:	f023 0703 	bic.w	r7, r3, #3
 8000810:	f045 0501 	orr.w	r5, r5, #1
 8000814:	f8c9 5020 	str.w	r5, [r9, #32]
 8000818:	f8d9 5020 	ldr.w	r5, [r9, #32]
 800081c:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000820:	f005 0501 	and.w	r5, r5, #1
 8000824:	9503      	str	r5, [sp, #12]
 8000826:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800082a:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800082e:	9d03      	ldr	r5, [sp, #12]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000830:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        temp = SYSCFG->EXTICR[position >> 2];
 8000834:	68bd      	ldr	r5, [r7, #8]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000836:	fa0e fe0c 	lsl.w	lr, lr, ip
 800083a:	ea25 0e0e 	bic.w	lr, r5, lr
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800083e:	4d21      	ldr	r5, [pc, #132]	; (80008c4 <HAL_GPIO_Init+0x194>)
 8000840:	42a8      	cmp	r0, r5
 8000842:	d034      	beq.n	80008ae <HAL_GPIO_Init+0x17e>
 8000844:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000848:	42a8      	cmp	r0, r5
 800084a:	d032      	beq.n	80008b2 <HAL_GPIO_Init+0x182>
 800084c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000850:	42a8      	cmp	r0, r5
 8000852:	d030      	beq.n	80008b6 <HAL_GPIO_Init+0x186>
 8000854:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000858:	42a8      	cmp	r0, r5
 800085a:	d02e      	beq.n	80008ba <HAL_GPIO_Init+0x18a>
 800085c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000860:	42a8      	cmp	r0, r5
 8000862:	bf14      	ite	ne
 8000864:	2505      	movne	r5, #5
 8000866:	2504      	moveq	r5, #4
 8000868:	fa05 f50c 	lsl.w	r5, r5, ip
 800086c:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8000870:	60bd      	str	r5, [r7, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000872:	43f7      	mvns	r7, r6
        temp = EXTI->IMR;
 8000874:	6815      	ldr	r5, [r2, #0]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000876:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800087a:	bf0c      	ite	eq
 800087c:	403d      	andeq	r5, r7
          SET_BIT(temp, iocurrent); 
 800087e:	4335      	orrne	r5, r6
        EXTI->IMR = temp;
 8000880:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8000882:	6855      	ldr	r5, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000884:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8000888:	bf0c      	ite	eq
 800088a:	403d      	andeq	r5, r7
          SET_BIT(temp, iocurrent); 
 800088c:	4335      	orrne	r5, r6
        EXTI->EMR = temp;
 800088e:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8000890:	6895      	ldr	r5, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000892:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000896:	bf0c      	ite	eq
 8000898:	403d      	andeq	r5, r7
          SET_BIT(temp, iocurrent); 
 800089a:	4335      	orrne	r5, r6
        EXTI->RTSR = temp;
 800089c:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 800089e:	68d5      	ldr	r5, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80008a0:	02a4      	lsls	r4, r4, #10
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80008a2:	bf54      	ite	pl
 80008a4:	403d      	andpl	r5, r7
          SET_BIT(temp, iocurrent); 
 80008a6:	4335      	orrmi	r5, r6
        EXTI->FTSR = temp;
 80008a8:	60d5      	str	r5, [r2, #12]
    position++;
 80008aa:	3301      	adds	r3, #1
 80008ac:	e749      	b.n	8000742 <HAL_GPIO_Init+0x12>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80008ae:	2500      	movs	r5, #0
 80008b0:	e7da      	b.n	8000868 <HAL_GPIO_Init+0x138>
 80008b2:	2501      	movs	r5, #1
 80008b4:	e7d8      	b.n	8000868 <HAL_GPIO_Init+0x138>
 80008b6:	2502      	movs	r5, #2
 80008b8:	e7d6      	b.n	8000868 <HAL_GPIO_Init+0x138>
 80008ba:	2503      	movs	r5, #3
 80008bc:	e7d4      	b.n	8000868 <HAL_GPIO_Init+0x138>
 80008be:	bf00      	nop
 80008c0:	40010400 	.word	0x40010400
 80008c4:	40020000 	.word	0x40020000
 80008c8:	40023800 	.word	0x40023800

080008cc <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80008cc:	6903      	ldr	r3, [r0, #16]
 80008ce:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80008d0:	bf14      	ite	ne
 80008d2:	2001      	movne	r0, #1
 80008d4:	2000      	moveq	r0, #0
 80008d6:	4770      	bx	lr

080008d8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80008d8:	b10a      	cbz	r2, 80008de <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80008da:	6181      	str	r1, [r0, #24]
 80008dc:	4770      	bx	lr
 80008de:	0409      	lsls	r1, r1, #16
 80008e0:	e7fb      	b.n	80008da <HAL_GPIO_WritePin+0x2>
	...

080008e4 <RCC_SetFlashLatencyFromMSIRange>:
{
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80008e4:	4b1c      	ldr	r3, [pc, #112]	; (8000958 <RCC_SetFlashLatencyFromMSIRange+0x74>)
{
 80008e6:	b082      	sub	sp, #8
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80008e8:	689a      	ldr	r2, [r3, #8]
 80008ea:	f012 0ff0 	tst.w	r2, #240	; 0xf0
 80008ee:	d00c      	beq.n	800090a <RCC_SetFlashLatencyFromMSIRange+0x26>
{
 80008f0:	2200      	movs	r2, #0
    {
      latency = FLASH_LATENCY_1; /* 1WS */
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80008f2:	491a      	ldr	r1, [pc, #104]	; (800095c <RCC_SetFlashLatencyFromMSIRange+0x78>)
 80008f4:	680b      	ldr	r3, [r1, #0]
 80008f6:	f023 0301 	bic.w	r3, r3, #1
 80008fa:	4313      	orrs	r3, r2
 80008fc:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80008fe:	6808      	ldr	r0, [r1, #0]
 8000900:	f000 0001 	and.w	r0, r0, #1
 8000904:	4050      	eors	r0, r2
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8000906:	b002      	add	sp, #8
 8000908:	4770      	bx	lr
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800090a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800090c:	4914      	ldr	r1, [pc, #80]	; (8000960 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 800090e:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8000912:	d00f      	beq.n	8000934 <RCC_SetFlashLatencyFromMSIRange+0x50>
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8000914:	680a      	ldr	r2, [r1, #0]
 8000916:	f402 52c0 	and.w	r2, r2, #6144	; 0x1800
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800091a:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
 800091e:	d1e7      	bne.n	80008f0 <RCC_SetFlashLatencyFromMSIRange+0xc>
 8000920:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
 8000924:	d1e4      	bne.n	80008f0 <RCC_SetFlashLatencyFromMSIRange+0xc>
  __HAL_FLASH_SET_LATENCY(latency);
 8000926:	4a0d      	ldr	r2, [pc, #52]	; (800095c <RCC_SetFlashLatencyFromMSIRange+0x78>)
 8000928:	6813      	ldr	r3, [r2, #0]
 800092a:	f043 0304 	orr.w	r3, r3, #4
 800092e:	6013      	str	r3, [r2, #0]
      latency = FLASH_LATENCY_1; /* 1WS */
 8000930:	2201      	movs	r2, #1
 8000932:	e7de      	b.n	80008f2 <RCC_SetFlashLatencyFromMSIRange+0xe>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000934:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000936:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800093a:	625a      	str	r2, [r3, #36]	; 0x24
 800093c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800093e:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8000942:	9201      	str	r2, [sp, #4]
 8000944:	9a01      	ldr	r2, [sp, #4]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8000946:	680a      	ldr	r2, [r1, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
 8000948:	6a59      	ldr	r1, [r3, #36]	; 0x24
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800094a:	f402 52c0 	and.w	r2, r2, #6144	; 0x1800
      __HAL_RCC_PWR_CLK_DISABLE();
 800094e:	f021 5180 	bic.w	r1, r1, #268435456	; 0x10000000
 8000952:	6259      	str	r1, [r3, #36]	; 0x24
 8000954:	e7e1      	b.n	800091a <RCC_SetFlashLatencyFromMSIRange+0x36>
 8000956:	bf00      	nop
 8000958:	40023800 	.word	0x40023800
 800095c:	40023c00 	.word	0x40023c00
 8000960:	40007000 	.word	0x40007000

08000964 <HAL_RCC_OscConfig>:
{
 8000964:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8000968:	4604      	mov	r4, r0
 800096a:	b908      	cbnz	r0, 8000970 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 800096c:	2001      	movs	r0, #1
 800096e:	e077      	b.n	8000a60 <HAL_RCC_OscConfig+0xfc>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000970:	4ba0      	ldr	r3, [pc, #640]	; (8000bf4 <HAL_RCC_OscConfig+0x290>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000972:	6802      	ldr	r2, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000974:	689e      	ldr	r6, [r3, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000976:	689f      	ldr	r7, [r3, #8]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000978:	07d0      	lsls	r0, r2, #31
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800097a:	f006 060c 	and.w	r6, r6, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800097e:	f407 3780 	and.w	r7, r7, #65536	; 0x10000
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000982:	d44b      	bmi.n	8000a1c <HAL_RCC_OscConfig+0xb8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000984:	6823      	ldr	r3, [r4, #0]
 8000986:	0799      	lsls	r1, r3, #30
 8000988:	f100 8092 	bmi.w	8000ab0 <HAL_RCC_OscConfig+0x14c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800098c:	6823      	ldr	r3, [r4, #0]
 800098e:	06d8      	lsls	r0, r3, #27
 8000990:	d536      	bpl.n	8000a00 <HAL_RCC_OscConfig+0x9c>
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8000992:	2e00      	cmp	r6, #0
 8000994:	f040 80dc 	bne.w	8000b50 <HAL_RCC_OscConfig+0x1ec>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000998:	4d96      	ldr	r5, [pc, #600]	; (8000bf4 <HAL_RCC_OscConfig+0x290>)
 800099a:	682b      	ldr	r3, [r5, #0]
 800099c:	0599      	lsls	r1, r3, #22
 800099e:	d502      	bpl.n	80009a6 <HAL_RCC_OscConfig+0x42>
 80009a0:	69a3      	ldr	r3, [r4, #24]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d0e2      	beq.n	800096c <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80009a6:	686b      	ldr	r3, [r5, #4]
 80009a8:	6a20      	ldr	r0, [r4, #32]
 80009aa:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80009ae:	4298      	cmp	r0, r3
 80009b0:	f240 80bc 	bls.w	8000b2c <HAL_RCC_OscConfig+0x1c8>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80009b4:	f7ff ff96 	bl	80008e4 <RCC_SetFlashLatencyFromMSIRange>
 80009b8:	2800      	cmp	r0, #0
 80009ba:	d1d7      	bne.n	800096c <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80009bc:	686b      	ldr	r3, [r5, #4]
 80009be:	6a22      	ldr	r2, [r4, #32]
 80009c0:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80009c4:	4313      	orrs	r3, r2
 80009c6:	606b      	str	r3, [r5, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80009c8:	686b      	ldr	r3, [r5, #4]
 80009ca:	69e2      	ldr	r2, [r4, #28]
 80009cc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80009d0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80009d4:	606b      	str	r3, [r5, #4]
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80009d6:	4b87      	ldr	r3, [pc, #540]	; (8000bf4 <HAL_RCC_OscConfig+0x290>)
 80009d8:	6899      	ldr	r1, [r3, #8]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80009da:	6a23      	ldr	r3, [r4, #32]
 80009dc:	0b5b      	lsrs	r3, r3, #13
 80009de:	1c5a      	adds	r2, r3, #1
 80009e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80009e4:	4093      	lsls	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80009e6:	f3c1 1203 	ubfx	r2, r1, #4, #4
 80009ea:	4983      	ldr	r1, [pc, #524]	; (8000bf8 <HAL_RCC_OscConfig+0x294>)
 80009ec:	5c8a      	ldrb	r2, [r1, r2]
 80009ee:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80009f0:	4a82      	ldr	r2, [pc, #520]	; (8000bfc <HAL_RCC_OscConfig+0x298>)
 80009f2:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick(uwTickPrio);
 80009f4:	4b82      	ldr	r3, [pc, #520]	; (8000c00 <HAL_RCC_OscConfig+0x29c>)
 80009f6:	6818      	ldr	r0, [r3, #0]
 80009f8:	f7ff fbc0 	bl	800017c <HAL_InitTick>
        if(status != HAL_OK)
 80009fc:	2800      	cmp	r0, #0
 80009fe:	d12f      	bne.n	8000a60 <HAL_RCC_OscConfig+0xfc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000a00:	6823      	ldr	r3, [r4, #0]
 8000a02:	0718      	lsls	r0, r3, #28
 8000a04:	f100 80d3 	bmi.w	8000bae <HAL_RCC_OscConfig+0x24a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000a08:	6823      	ldr	r3, [r4, #0]
 8000a0a:	0759      	lsls	r1, r3, #29
 8000a0c:	f100 8100 	bmi.w	8000c10 <HAL_RCC_OscConfig+0x2ac>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000a10:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8000a12:	2800      	cmp	r0, #0
 8000a14:	f040 816a 	bne.w	8000cec <HAL_RCC_OscConfig+0x388>
  return HAL_OK;
 8000a18:	2000      	movs	r0, #0
 8000a1a:	e021      	b.n	8000a60 <HAL_RCC_OscConfig+0xfc>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000a1c:	2e08      	cmp	r6, #8
 8000a1e:	d002      	beq.n	8000a26 <HAL_RCC_OscConfig+0xc2>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000a20:	2e0c      	cmp	r6, #12
 8000a22:	d107      	bne.n	8000a34 <HAL_RCC_OscConfig+0xd0>
 8000a24:	b137      	cbz	r7, 8000a34 <HAL_RCC_OscConfig+0xd0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	039a      	lsls	r2, r3, #14
 8000a2a:	d5ab      	bpl.n	8000984 <HAL_RCC_OscConfig+0x20>
 8000a2c:	6863      	ldr	r3, [r4, #4]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d1a8      	bne.n	8000984 <HAL_RCC_OscConfig+0x20>
 8000a32:	e79b      	b.n	800096c <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a34:	6863      	ldr	r3, [r4, #4]
 8000a36:	4d6f      	ldr	r5, [pc, #444]	; (8000bf4 <HAL_RCC_OscConfig+0x290>)
 8000a38:	2b01      	cmp	r3, #1
 8000a3a:	d114      	bne.n	8000a66 <HAL_RCC_OscConfig+0x102>
 8000a3c:	682b      	ldr	r3, [r5, #0]
 8000a3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a42:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000a44:	f7ff fbdc 	bl	8000200 <HAL_GetTick>
 8000a48:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000a4a:	4d6a      	ldr	r5, [pc, #424]	; (8000bf4 <HAL_RCC_OscConfig+0x290>)
 8000a4c:	682b      	ldr	r3, [r5, #0]
 8000a4e:	039b      	lsls	r3, r3, #14
 8000a50:	d498      	bmi.n	8000984 <HAL_RCC_OscConfig+0x20>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a52:	f7ff fbd5 	bl	8000200 <HAL_GetTick>
 8000a56:	eba0 0008 	sub.w	r0, r0, r8
 8000a5a:	2864      	cmp	r0, #100	; 0x64
 8000a5c:	d9f6      	bls.n	8000a4c <HAL_RCC_OscConfig+0xe8>
            return HAL_TIMEOUT;
 8000a5e:	2003      	movs	r0, #3
}
 8000a60:	b003      	add	sp, #12
 8000a62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a66:	b9ab      	cbnz	r3, 8000a94 <HAL_RCC_OscConfig+0x130>
 8000a68:	682b      	ldr	r3, [r5, #0]
 8000a6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a6e:	602b      	str	r3, [r5, #0]
 8000a70:	682b      	ldr	r3, [r5, #0]
 8000a72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a76:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000a78:	f7ff fbc2 	bl	8000200 <HAL_GetTick>
 8000a7c:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000a7e:	682b      	ldr	r3, [r5, #0]
 8000a80:	0398      	lsls	r0, r3, #14
 8000a82:	f57f af7f 	bpl.w	8000984 <HAL_RCC_OscConfig+0x20>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a86:	f7ff fbbb 	bl	8000200 <HAL_GetTick>
 8000a8a:	eba0 0008 	sub.w	r0, r0, r8
 8000a8e:	2864      	cmp	r0, #100	; 0x64
 8000a90:	d9f5      	bls.n	8000a7e <HAL_RCC_OscConfig+0x11a>
 8000a92:	e7e4      	b.n	8000a5e <HAL_RCC_OscConfig+0xfa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a94:	2b05      	cmp	r3, #5
 8000a96:	682b      	ldr	r3, [r5, #0]
 8000a98:	d103      	bne.n	8000aa2 <HAL_RCC_OscConfig+0x13e>
 8000a9a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a9e:	602b      	str	r3, [r5, #0]
 8000aa0:	e7cc      	b.n	8000a3c <HAL_RCC_OscConfig+0xd8>
 8000aa2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000aa6:	602b      	str	r3, [r5, #0]
 8000aa8:	682b      	ldr	r3, [r5, #0]
 8000aaa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000aae:	e7c8      	b.n	8000a42 <HAL_RCC_OscConfig+0xde>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000ab0:	2e04      	cmp	r6, #4
 8000ab2:	d002      	beq.n	8000aba <HAL_RCC_OscConfig+0x156>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000ab4:	2e0c      	cmp	r6, #12
 8000ab6:	d110      	bne.n	8000ada <HAL_RCC_OscConfig+0x176>
 8000ab8:	b97f      	cbnz	r7, 8000ada <HAL_RCC_OscConfig+0x176>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000aba:	4b4e      	ldr	r3, [pc, #312]	; (8000bf4 <HAL_RCC_OscConfig+0x290>)
 8000abc:	681a      	ldr	r2, [r3, #0]
 8000abe:	0791      	lsls	r1, r2, #30
 8000ac0:	d503      	bpl.n	8000aca <HAL_RCC_OscConfig+0x166>
 8000ac2:	68e2      	ldr	r2, [r4, #12]
 8000ac4:	2a01      	cmp	r2, #1
 8000ac6:	f47f af51 	bne.w	800096c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000aca:	685a      	ldr	r2, [r3, #4]
 8000acc:	6921      	ldr	r1, [r4, #16]
 8000ace:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 8000ad2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000ad6:	605a      	str	r2, [r3, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ad8:	e758      	b.n	800098c <HAL_RCC_OscConfig+0x28>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ada:	68e2      	ldr	r2, [r4, #12]
 8000adc:	4b49      	ldr	r3, [pc, #292]	; (8000c04 <HAL_RCC_OscConfig+0x2a0>)
 8000ade:	b1b2      	cbz	r2, 8000b0e <HAL_RCC_OscConfig+0x1aa>
        __HAL_RCC_HSI_ENABLE();
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000ae4:	f7ff fb8c 	bl	8000200 <HAL_GetTick>
 8000ae8:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000aea:	4d42      	ldr	r5, [pc, #264]	; (8000bf4 <HAL_RCC_OscConfig+0x290>)
 8000aec:	682b      	ldr	r3, [r5, #0]
 8000aee:	079a      	lsls	r2, r3, #30
 8000af0:	d507      	bpl.n	8000b02 <HAL_RCC_OscConfig+0x19e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000af2:	686b      	ldr	r3, [r5, #4]
 8000af4:	6922      	ldr	r2, [r4, #16]
 8000af6:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8000afa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000afe:	606b      	str	r3, [r5, #4]
 8000b00:	e744      	b.n	800098c <HAL_RCC_OscConfig+0x28>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000b02:	f7ff fb7d 	bl	8000200 <HAL_GetTick>
 8000b06:	1bc0      	subs	r0, r0, r7
 8000b08:	2802      	cmp	r0, #2
 8000b0a:	d9ef      	bls.n	8000aec <HAL_RCC_OscConfig+0x188>
 8000b0c:	e7a7      	b.n	8000a5e <HAL_RCC_OscConfig+0xfa>
        __HAL_RCC_HSI_DISABLE();
 8000b0e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000b10:	f7ff fb76 	bl	8000200 <HAL_GetTick>
 8000b14:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000b16:	4d37      	ldr	r5, [pc, #220]	; (8000bf4 <HAL_RCC_OscConfig+0x290>)
 8000b18:	682b      	ldr	r3, [r5, #0]
 8000b1a:	079b      	lsls	r3, r3, #30
 8000b1c:	f57f af36 	bpl.w	800098c <HAL_RCC_OscConfig+0x28>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000b20:	f7ff fb6e 	bl	8000200 <HAL_GetTick>
 8000b24:	1bc0      	subs	r0, r0, r7
 8000b26:	2802      	cmp	r0, #2
 8000b28:	d9f6      	bls.n	8000b18 <HAL_RCC_OscConfig+0x1b4>
 8000b2a:	e798      	b.n	8000a5e <HAL_RCC_OscConfig+0xfa>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000b2c:	686b      	ldr	r3, [r5, #4]
 8000b2e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000b32:	4303      	orrs	r3, r0
 8000b34:	606b      	str	r3, [r5, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000b36:	686b      	ldr	r3, [r5, #4]
 8000b38:	69e2      	ldr	r2, [r4, #28]
 8000b3a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000b3e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000b42:	606b      	str	r3, [r5, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000b44:	f7ff fece 	bl	80008e4 <RCC_SetFlashLatencyFromMSIRange>
 8000b48:	2800      	cmp	r0, #0
 8000b4a:	f43f af44 	beq.w	80009d6 <HAL_RCC_OscConfig+0x72>
 8000b4e:	e70d      	b.n	800096c <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000b50:	69a2      	ldr	r2, [r4, #24]
 8000b52:	4b2d      	ldr	r3, [pc, #180]	; (8000c08 <HAL_RCC_OscConfig+0x2a4>)
 8000b54:	b1e2      	cbz	r2, 8000b90 <HAL_RCC_OscConfig+0x22c>
        __HAL_RCC_MSI_ENABLE();
 8000b56:	2201      	movs	r2, #1
 8000b58:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000b5a:	f7ff fb51 	bl	8000200 <HAL_GetTick>
 8000b5e:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000b60:	4d24      	ldr	r5, [pc, #144]	; (8000bf4 <HAL_RCC_OscConfig+0x290>)
 8000b62:	682b      	ldr	r3, [r5, #0]
 8000b64:	059a      	lsls	r2, r3, #22
 8000b66:	d50d      	bpl.n	8000b84 <HAL_RCC_OscConfig+0x220>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000b68:	686b      	ldr	r3, [r5, #4]
 8000b6a:	6a22      	ldr	r2, [r4, #32]
 8000b6c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000b70:	4313      	orrs	r3, r2
 8000b72:	606b      	str	r3, [r5, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000b74:	686b      	ldr	r3, [r5, #4]
 8000b76:	69e2      	ldr	r2, [r4, #28]
 8000b78:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000b7c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000b80:	606b      	str	r3, [r5, #4]
 8000b82:	e73d      	b.n	8000a00 <HAL_RCC_OscConfig+0x9c>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000b84:	f7ff fb3c 	bl	8000200 <HAL_GetTick>
 8000b88:	1bc0      	subs	r0, r0, r7
 8000b8a:	2802      	cmp	r0, #2
 8000b8c:	d9e9      	bls.n	8000b62 <HAL_RCC_OscConfig+0x1fe>
 8000b8e:	e766      	b.n	8000a5e <HAL_RCC_OscConfig+0xfa>
        __HAL_RCC_MSI_DISABLE();
 8000b90:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000b92:	f7ff fb35 	bl	8000200 <HAL_GetTick>
 8000b96:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8000b98:	4d16      	ldr	r5, [pc, #88]	; (8000bf4 <HAL_RCC_OscConfig+0x290>)
 8000b9a:	682b      	ldr	r3, [r5, #0]
 8000b9c:	059b      	lsls	r3, r3, #22
 8000b9e:	f57f af2f 	bpl.w	8000a00 <HAL_RCC_OscConfig+0x9c>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000ba2:	f7ff fb2d 	bl	8000200 <HAL_GetTick>
 8000ba6:	1bc0      	subs	r0, r0, r7
 8000ba8:	2802      	cmp	r0, #2
 8000baa:	d9f6      	bls.n	8000b9a <HAL_RCC_OscConfig+0x236>
 8000bac:	e757      	b.n	8000a5e <HAL_RCC_OscConfig+0xfa>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000bae:	6962      	ldr	r2, [r4, #20]
 8000bb0:	4b16      	ldr	r3, [pc, #88]	; (8000c0c <HAL_RCC_OscConfig+0x2a8>)
 8000bb2:	b17a      	cbz	r2, 8000bd4 <HAL_RCC_OscConfig+0x270>
      __HAL_RCC_LSI_ENABLE();
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000bb8:	f7ff fb22 	bl	8000200 <HAL_GetTick>
 8000bbc:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000bbe:	4d0d      	ldr	r5, [pc, #52]	; (8000bf4 <HAL_RCC_OscConfig+0x290>)
 8000bc0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000bc2:	079a      	lsls	r2, r3, #30
 8000bc4:	f53f af20 	bmi.w	8000a08 <HAL_RCC_OscConfig+0xa4>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000bc8:	f7ff fb1a 	bl	8000200 <HAL_GetTick>
 8000bcc:	1bc0      	subs	r0, r0, r7
 8000bce:	2802      	cmp	r0, #2
 8000bd0:	d9f6      	bls.n	8000bc0 <HAL_RCC_OscConfig+0x25c>
 8000bd2:	e744      	b.n	8000a5e <HAL_RCC_OscConfig+0xfa>
      __HAL_RCC_LSI_DISABLE();
 8000bd4:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000bd6:	f7ff fb13 	bl	8000200 <HAL_GetTick>
 8000bda:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8000bdc:	4d05      	ldr	r5, [pc, #20]	; (8000bf4 <HAL_RCC_OscConfig+0x290>)
 8000bde:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000be0:	079b      	lsls	r3, r3, #30
 8000be2:	f57f af11 	bpl.w	8000a08 <HAL_RCC_OscConfig+0xa4>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000be6:	f7ff fb0b 	bl	8000200 <HAL_GetTick>
 8000bea:	1bc0      	subs	r0, r0, r7
 8000bec:	2802      	cmp	r0, #2
 8000bee:	d9f6      	bls.n	8000bde <HAL_RCC_OscConfig+0x27a>
 8000bf0:	e735      	b.n	8000a5e <HAL_RCC_OscConfig+0xfa>
 8000bf2:	bf00      	nop
 8000bf4:	40023800 	.word	0x40023800
 8000bf8:	08001bcc 	.word	0x08001bcc
 8000bfc:	20000008 	.word	0x20000008
 8000c00:	20000004 	.word	0x20000004
 8000c04:	42470000 	.word	0x42470000
 8000c08:	42470020 	.word	0x42470020
 8000c0c:	42470680 	.word	0x42470680
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c10:	4b60      	ldr	r3, [pc, #384]	; (8000d94 <HAL_RCC_OscConfig+0x430>)
 8000c12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c14:	00d0      	lsls	r0, r2, #3
 8000c16:	d429      	bmi.n	8000c6c <HAL_RCC_OscConfig+0x308>
      pwrclkchanged = SET;
 8000c18:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000c1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c1c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000c20:	625a      	str	r2, [r3, #36]	; 0x24
 8000c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c28:	9301      	str	r3, [sp, #4]
 8000c2a:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c2c:	4d5a      	ldr	r5, [pc, #360]	; (8000d98 <HAL_RCC_OscConfig+0x434>)
 8000c2e:	682b      	ldr	r3, [r5, #0]
 8000c30:	05d9      	lsls	r1, r3, #23
 8000c32:	d51d      	bpl.n	8000c70 <HAL_RCC_OscConfig+0x30c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c34:	68a3      	ldr	r3, [r4, #8]
 8000c36:	4d57      	ldr	r5, [pc, #348]	; (8000d94 <HAL_RCC_OscConfig+0x430>)
 8000c38:	2b01      	cmp	r3, #1
 8000c3a:	d12a      	bne.n	8000c92 <HAL_RCC_OscConfig+0x32e>
 8000c3c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000c3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c42:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000c44:	f7ff fadc 	bl	8000200 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c48:	f241 3588 	movw	r5, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000c4c:	4681      	mov	r9, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000c4e:	f8df 8144 	ldr.w	r8, [pc, #324]	; 8000d94 <HAL_RCC_OscConfig+0x430>
 8000c52:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
 8000c56:	059b      	lsls	r3, r3, #22
 8000c58:	d541      	bpl.n	8000cde <HAL_RCC_OscConfig+0x37a>
    if(pwrclkchanged == SET)
 8000c5a:	2f00      	cmp	r7, #0
 8000c5c:	f43f aed8 	beq.w	8000a10 <HAL_RCC_OscConfig+0xac>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000c60:	4a4c      	ldr	r2, [pc, #304]	; (8000d94 <HAL_RCC_OscConfig+0x430>)
 8000c62:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000c64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000c68:	6253      	str	r3, [r2, #36]	; 0x24
 8000c6a:	e6d1      	b.n	8000a10 <HAL_RCC_OscConfig+0xac>
    FlagStatus       pwrclkchanged = RESET;
 8000c6c:	2700      	movs	r7, #0
 8000c6e:	e7dd      	b.n	8000c2c <HAL_RCC_OscConfig+0x2c8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000c70:	682b      	ldr	r3, [r5, #0]
 8000c72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c76:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000c78:	f7ff fac2 	bl	8000200 <HAL_GetTick>
 8000c7c:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c7e:	682b      	ldr	r3, [r5, #0]
 8000c80:	05da      	lsls	r2, r3, #23
 8000c82:	d4d7      	bmi.n	8000c34 <HAL_RCC_OscConfig+0x2d0>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000c84:	f7ff fabc 	bl	8000200 <HAL_GetTick>
 8000c88:	eba0 0008 	sub.w	r0, r0, r8
 8000c8c:	2864      	cmp	r0, #100	; 0x64
 8000c8e:	d9f6      	bls.n	8000c7e <HAL_RCC_OscConfig+0x31a>
 8000c90:	e6e5      	b.n	8000a5e <HAL_RCC_OscConfig+0xfa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c92:	b9b3      	cbnz	r3, 8000cc2 <HAL_RCC_OscConfig+0x35e>
 8000c94:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c96:	f241 3988 	movw	r9, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c9a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000c9e:	636b      	str	r3, [r5, #52]	; 0x34
 8000ca0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000ca2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000ca6:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000ca8:	f7ff faaa 	bl	8000200 <HAL_GetTick>
 8000cac:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8000cae:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000cb0:	0598      	lsls	r0, r3, #22
 8000cb2:	d5d2      	bpl.n	8000c5a <HAL_RCC_OscConfig+0x2f6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000cb4:	f7ff faa4 	bl	8000200 <HAL_GetTick>
 8000cb8:	eba0 0008 	sub.w	r0, r0, r8
 8000cbc:	4548      	cmp	r0, r9
 8000cbe:	d9f6      	bls.n	8000cae <HAL_RCC_OscConfig+0x34a>
 8000cc0:	e6cd      	b.n	8000a5e <HAL_RCC_OscConfig+0xfa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000cc2:	2b05      	cmp	r3, #5
 8000cc4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000cc6:	d103      	bne.n	8000cd0 <HAL_RCC_OscConfig+0x36c>
 8000cc8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ccc:	636b      	str	r3, [r5, #52]	; 0x34
 8000cce:	e7b5      	b.n	8000c3c <HAL_RCC_OscConfig+0x2d8>
 8000cd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000cd4:	636b      	str	r3, [r5, #52]	; 0x34
 8000cd6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000cd8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000cdc:	e7b1      	b.n	8000c42 <HAL_RCC_OscConfig+0x2de>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000cde:	f7ff fa8f 	bl	8000200 <HAL_GetTick>
 8000ce2:	eba0 0009 	sub.w	r0, r0, r9
 8000ce6:	42a8      	cmp	r0, r5
 8000ce8:	d9b3      	bls.n	8000c52 <HAL_RCC_OscConfig+0x2ee>
 8000cea:	e6b8      	b.n	8000a5e <HAL_RCC_OscConfig+0xfa>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000cec:	2e0c      	cmp	r6, #12
 8000cee:	d039      	beq.n	8000d64 <HAL_RCC_OscConfig+0x400>
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	4d2a      	ldr	r5, [pc, #168]	; (8000d9c <HAL_RCC_OscConfig+0x438>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000cf4:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8000cf6:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000cf8:	d126      	bne.n	8000d48 <HAL_RCC_OscConfig+0x3e4>
        tickstart = HAL_GetTick();
 8000cfa:	f7ff fa81 	bl	8000200 <HAL_GetTick>
 8000cfe:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8000d00:	4e24      	ldr	r6, [pc, #144]	; (8000d94 <HAL_RCC_OscConfig+0x430>)
 8000d02:	6833      	ldr	r3, [r6, #0]
 8000d04:	0199      	lsls	r1, r3, #6
 8000d06:	d419      	bmi.n	8000d3c <HAL_RCC_OscConfig+0x3d8>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000d08:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000d0a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000d0c:	68b2      	ldr	r2, [r6, #8]
 8000d0e:	430b      	orrs	r3, r1
 8000d10:	f422 027d 	bic.w	r2, r2, #16580608	; 0xfd0000
 8000d14:	4313      	orrs	r3, r2
 8000d16:	6b22      	ldr	r2, [r4, #48]	; 0x30
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8000d18:	4c1e      	ldr	r4, [pc, #120]	; (8000d94 <HAL_RCC_OscConfig+0x430>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000d1a:	4313      	orrs	r3, r2
 8000d1c:	60b3      	str	r3, [r6, #8]
        __HAL_RCC_PLL_ENABLE();
 8000d1e:	2301      	movs	r3, #1
 8000d20:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000d22:	f7ff fa6d 	bl	8000200 <HAL_GetTick>
 8000d26:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8000d28:	6823      	ldr	r3, [r4, #0]
 8000d2a:	019a      	lsls	r2, r3, #6
 8000d2c:	f53f ae74 	bmi.w	8000a18 <HAL_RCC_OscConfig+0xb4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d30:	f7ff fa66 	bl	8000200 <HAL_GetTick>
 8000d34:	1b40      	subs	r0, r0, r5
 8000d36:	2802      	cmp	r0, #2
 8000d38:	d9f6      	bls.n	8000d28 <HAL_RCC_OscConfig+0x3c4>
 8000d3a:	e690      	b.n	8000a5e <HAL_RCC_OscConfig+0xfa>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d3c:	f7ff fa60 	bl	8000200 <HAL_GetTick>
 8000d40:	1bc0      	subs	r0, r0, r7
 8000d42:	2802      	cmp	r0, #2
 8000d44:	d9dd      	bls.n	8000d02 <HAL_RCC_OscConfig+0x39e>
 8000d46:	e68a      	b.n	8000a5e <HAL_RCC_OscConfig+0xfa>
        tickstart = HAL_GetTick();
 8000d48:	f7ff fa5a 	bl	8000200 <HAL_GetTick>
 8000d4c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8000d4e:	4c11      	ldr	r4, [pc, #68]	; (8000d94 <HAL_RCC_OscConfig+0x430>)
 8000d50:	6823      	ldr	r3, [r4, #0]
 8000d52:	019b      	lsls	r3, r3, #6
 8000d54:	f57f ae60 	bpl.w	8000a18 <HAL_RCC_OscConfig+0xb4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d58:	f7ff fa52 	bl	8000200 <HAL_GetTick>
 8000d5c:	1b40      	subs	r0, r0, r5
 8000d5e:	2802      	cmp	r0, #2
 8000d60:	d9f6      	bls.n	8000d50 <HAL_RCC_OscConfig+0x3ec>
 8000d62:	e67c      	b.n	8000a5e <HAL_RCC_OscConfig+0xfa>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000d64:	2801      	cmp	r0, #1
 8000d66:	f43f ae7b 	beq.w	8000a60 <HAL_RCC_OscConfig+0xfc>
        pll_config = RCC->CFGR;
 8000d6a:	4b0a      	ldr	r3, [pc, #40]	; (8000d94 <HAL_RCC_OscConfig+0x430>)
 8000d6c:	6898      	ldr	r0, [r3, #8]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000d6e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000d70:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 8000d74:	429a      	cmp	r2, r3
 8000d76:	f47f adf9 	bne.w	800096c <HAL_RCC_OscConfig+0x8>
 8000d7a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8000d7c:	f400 1370 	and.w	r3, r0, #3932160	; 0x3c0000
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000d80:	4293      	cmp	r3, r2
 8000d82:	f47f adf3 	bne.w	800096c <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8000d86:	6b23      	ldr	r3, [r4, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8000d88:	f400 0040 	and.w	r0, r0, #12582912	; 0xc00000
    return HAL_ERROR;
 8000d8c:	1ac0      	subs	r0, r0, r3
 8000d8e:	bf18      	it	ne
 8000d90:	2001      	movne	r0, #1
 8000d92:	e665      	b.n	8000a60 <HAL_RCC_OscConfig+0xfc>
 8000d94:	40023800 	.word	0x40023800
 8000d98:	40007000 	.word	0x40007000
 8000d9c:	42470060 	.word	0x42470060

08000da0 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8000da0:	4a12      	ldr	r2, [pc, #72]	; (8000dec <HAL_RCC_GetSysClockFreq+0x4c>)
 8000da2:	6893      	ldr	r3, [r2, #8]
  switch (tmpreg & RCC_CFGR_SWS)
 8000da4:	f003 010c 	and.w	r1, r3, #12
 8000da8:	2908      	cmp	r1, #8
 8000daa:	d005      	beq.n	8000db8 <HAL_RCC_GetSysClockFreq+0x18>
 8000dac:	290c      	cmp	r1, #12
 8000dae:	d005      	beq.n	8000dbc <HAL_RCC_GetSysClockFreq+0x1c>
 8000db0:	2904      	cmp	r1, #4
 8000db2:	d113      	bne.n	8000ddc <HAL_RCC_GetSysClockFreq+0x3c>
      sysclockfreq = HSI_VALUE;
 8000db4:	480e      	ldr	r0, [pc, #56]	; (8000df0 <HAL_RCC_GetSysClockFreq+0x50>)
}
 8000db6:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8000db8:	480e      	ldr	r0, [pc, #56]	; (8000df4 <HAL_RCC_GetSysClockFreq+0x54>)
 8000dba:	4770      	bx	lr
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8000dbc:	480e      	ldr	r0, [pc, #56]	; (8000df8 <HAL_RCC_GetSysClockFreq+0x58>)
 8000dbe:	f3c3 4183 	ubfx	r1, r3, #18, #4
 8000dc2:	5c41      	ldrb	r1, [r0, r1]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8000dc4:	f3c3 5081 	ubfx	r0, r3, #22, #2
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000dc8:	6893      	ldr	r3, [r2, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8000dca:	3001      	adds	r0, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000dcc:	03db      	lsls	r3, r3, #15
        pllvco = (HSE_VALUE * pllm) / plld;
 8000dce:	bf4c      	ite	mi
 8000dd0:	4b08      	ldrmi	r3, [pc, #32]	; (8000df4 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (HSI_VALUE * pllm) / plld;
 8000dd2:	4b07      	ldrpl	r3, [pc, #28]	; (8000df0 <HAL_RCC_GetSysClockFreq+0x50>)
 8000dd4:	434b      	muls	r3, r1
 8000dd6:	fbb3 f0f0 	udiv	r0, r3, r0
 8000dda:	4770      	bx	lr
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8000ddc:	6850      	ldr	r0, [r2, #4]
 8000dde:	f3c0 3042 	ubfx	r0, r0, #13, #3
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8000de2:	1c43      	adds	r3, r0, #1
 8000de4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000de8:	4098      	lsls	r0, r3
 8000dea:	4770      	bx	lr
 8000dec:	40023800 	.word	0x40023800
 8000df0:	00f42400 	.word	0x00f42400
 8000df4:	016e3600 	.word	0x016e3600
 8000df8:	08001bdc 	.word	0x08001bdc

08000dfc <HAL_RCC_ClockConfig>:
{
 8000dfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e00:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000e02:	4604      	mov	r4, r0
 8000e04:	b910      	cbnz	r0, 8000e0c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000e06:	2001      	movs	r0, #1
 8000e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000e0c:	4b57      	ldr	r3, [pc, #348]	; (8000f6c <HAL_RCC_ClockConfig+0x170>)
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	f002 0201 	and.w	r2, r2, #1
 8000e14:	428a      	cmp	r2, r1
 8000e16:	d32a      	bcc.n	8000e6e <HAL_RCC_ClockConfig+0x72>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000e18:	6822      	ldr	r2, [r4, #0]
 8000e1a:	0796      	lsls	r6, r2, #30
 8000e1c:	d438      	bmi.n	8000e90 <HAL_RCC_ClockConfig+0x94>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000e1e:	07d0      	lsls	r0, r2, #31
 8000e20:	d43e      	bmi.n	8000ea0 <HAL_RCC_ClockConfig+0xa4>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000e22:	4b52      	ldr	r3, [pc, #328]	; (8000f6c <HAL_RCC_ClockConfig+0x170>)
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	f002 0201 	and.w	r2, r2, #1
 8000e2a:	4295      	cmp	r5, r2
 8000e2c:	f0c0 808d 	bcc.w	8000f4a <HAL_RCC_ClockConfig+0x14e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e30:	6822      	ldr	r2, [r4, #0]
 8000e32:	0751      	lsls	r1, r2, #29
 8000e34:	f100 8092 	bmi.w	8000f5c <HAL_RCC_ClockConfig+0x160>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000e38:	0713      	lsls	r3, r2, #28
 8000e3a:	d507      	bpl.n	8000e4c <HAL_RCC_ClockConfig+0x50>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000e3c:	4a4c      	ldr	r2, [pc, #304]	; (8000f70 <HAL_RCC_ClockConfig+0x174>)
 8000e3e:	6921      	ldr	r1, [r4, #16]
 8000e40:	6893      	ldr	r3, [r2, #8]
 8000e42:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000e46:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000e4a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000e4c:	f7ff ffa8 	bl	8000da0 <HAL_RCC_GetSysClockFreq>
}
 8000e50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000e54:	4b46      	ldr	r3, [pc, #280]	; (8000f70 <HAL_RCC_ClockConfig+0x174>)
 8000e56:	4a47      	ldr	r2, [pc, #284]	; (8000f74 <HAL_RCC_ClockConfig+0x178>)
 8000e58:	689b      	ldr	r3, [r3, #8]
 8000e5a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000e5e:	5cd3      	ldrb	r3, [r2, r3]
 8000e60:	40d8      	lsrs	r0, r3
 8000e62:	4b45      	ldr	r3, [pc, #276]	; (8000f78 <HAL_RCC_ClockConfig+0x17c>)
 8000e64:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8000e66:	4b45      	ldr	r3, [pc, #276]	; (8000f7c <HAL_RCC_ClockConfig+0x180>)
 8000e68:	6818      	ldr	r0, [r3, #0]
 8000e6a:	f7ff b987 	b.w	800017c <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e6e:	2901      	cmp	r1, #1
 8000e70:	bf02      	ittt	eq
 8000e72:	681a      	ldreq	r2, [r3, #0]
 8000e74:	f042 0204 	orreq.w	r2, r2, #4
 8000e78:	601a      	streq	r2, [r3, #0]
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	f022 0201 	bic.w	r2, r2, #1
 8000e80:	430a      	orrs	r2, r1
 8000e82:	601a      	str	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f003 0301 	and.w	r3, r3, #1
 8000e8a:	4299      	cmp	r1, r3
 8000e8c:	d1bb      	bne.n	8000e06 <HAL_RCC_ClockConfig+0xa>
 8000e8e:	e7c3      	b.n	8000e18 <HAL_RCC_ClockConfig+0x1c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000e90:	4937      	ldr	r1, [pc, #220]	; (8000f70 <HAL_RCC_ClockConfig+0x174>)
 8000e92:	68a0      	ldr	r0, [r4, #8]
 8000e94:	688b      	ldr	r3, [r1, #8]
 8000e96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000e9a:	4303      	orrs	r3, r0
 8000e9c:	608b      	str	r3, [r1, #8]
 8000e9e:	e7be      	b.n	8000e1e <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ea0:	6861      	ldr	r1, [r4, #4]
 8000ea2:	4b33      	ldr	r3, [pc, #204]	; (8000f70 <HAL_RCC_ClockConfig+0x174>)
 8000ea4:	2902      	cmp	r1, #2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000ea6:	681a      	ldr	r2, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ea8:	d11d      	bne.n	8000ee6 <HAL_RCC_ClockConfig+0xea>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000eaa:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000eae:	d0aa      	beq.n	8000e06 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000eb0:	689a      	ldr	r2, [r3, #8]
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000eb2:	4f2f      	ldr	r7, [pc, #188]	; (8000f70 <HAL_RCC_ClockConfig+0x174>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000eb4:	f022 0203 	bic.w	r2, r2, #3
 8000eb8:	430a      	orrs	r2, r1
 8000eba:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8000ebc:	f7ff f9a0 	bl	8000200 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ec0:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8000ec2:	4606      	mov	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ec4:	2b02      	cmp	r3, #2
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ec6:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000eca:	d119      	bne.n	8000f00 <HAL_RCC_ClockConfig+0x104>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	f003 030c 	and.w	r3, r3, #12
 8000ed2:	2b08      	cmp	r3, #8
 8000ed4:	d0a5      	beq.n	8000e22 <HAL_RCC_ClockConfig+0x26>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ed6:	f7ff f993 	bl	8000200 <HAL_GetTick>
 8000eda:	1b80      	subs	r0, r0, r6
 8000edc:	4540      	cmp	r0, r8
 8000ede:	d9f5      	bls.n	8000ecc <HAL_RCC_ClockConfig+0xd0>
          return HAL_TIMEOUT;
 8000ee0:	2003      	movs	r0, #3
 8000ee2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000ee6:	2903      	cmp	r1, #3
 8000ee8:	d102      	bne.n	8000ef0 <HAL_RCC_ClockConfig+0xf4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8000eea:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8000eee:	e7de      	b.n	8000eae <HAL_RCC_ClockConfig+0xb2>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8000ef0:	2901      	cmp	r1, #1
 8000ef2:	d102      	bne.n	8000efa <HAL_RCC_ClockConfig+0xfe>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000ef4:	f012 0f02 	tst.w	r2, #2
 8000ef8:	e7d9      	b.n	8000eae <HAL_RCC_ClockConfig+0xb2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000efa:	f412 7f00 	tst.w	r2, #512	; 0x200
 8000efe:	e7d6      	b.n	8000eae <HAL_RCC_ClockConfig+0xb2>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000f00:	2b03      	cmp	r3, #3
 8000f02:	d10a      	bne.n	8000f1a <HAL_RCC_ClockConfig+0x11e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	f003 030c 	and.w	r3, r3, #12
 8000f0a:	2b0c      	cmp	r3, #12
 8000f0c:	d089      	beq.n	8000e22 <HAL_RCC_ClockConfig+0x26>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f0e:	f7ff f977 	bl	8000200 <HAL_GetTick>
 8000f12:	1b80      	subs	r0, r0, r6
 8000f14:	4540      	cmp	r0, r8
 8000f16:	d9f5      	bls.n	8000f04 <HAL_RCC_ClockConfig+0x108>
 8000f18:	e7e2      	b.n	8000ee0 <HAL_RCC_ClockConfig+0xe4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d110      	bne.n	8000f40 <HAL_RCC_ClockConfig+0x144>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f1e:	68bb      	ldr	r3, [r7, #8]
 8000f20:	f003 030c 	and.w	r3, r3, #12
 8000f24:	2b04      	cmp	r3, #4
 8000f26:	f43f af7c 	beq.w	8000e22 <HAL_RCC_ClockConfig+0x26>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f2a:	f7ff f969 	bl	8000200 <HAL_GetTick>
 8000f2e:	1b80      	subs	r0, r0, r6
 8000f30:	4540      	cmp	r0, r8
 8000f32:	d9f4      	bls.n	8000f1e <HAL_RCC_ClockConfig+0x122>
 8000f34:	e7d4      	b.n	8000ee0 <HAL_RCC_ClockConfig+0xe4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f36:	f7ff f963 	bl	8000200 <HAL_GetTick>
 8000f3a:	1b80      	subs	r0, r0, r6
 8000f3c:	4540      	cmp	r0, r8
 8000f3e:	d8cf      	bhi.n	8000ee0 <HAL_RCC_ClockConfig+0xe4>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	f013 0f0c 	tst.w	r3, #12
 8000f46:	d1f6      	bne.n	8000f36 <HAL_RCC_ClockConfig+0x13a>
 8000f48:	e76b      	b.n	8000e22 <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	f022 0201 	bic.w	r2, r2, #1
 8000f50:	601a      	str	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	07da      	lsls	r2, r3, #31
 8000f56:	f53f af56 	bmi.w	8000e06 <HAL_RCC_ClockConfig+0xa>
 8000f5a:	e769      	b.n	8000e30 <HAL_RCC_ClockConfig+0x34>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000f5c:	4904      	ldr	r1, [pc, #16]	; (8000f70 <HAL_RCC_ClockConfig+0x174>)
 8000f5e:	68e0      	ldr	r0, [r4, #12]
 8000f60:	688b      	ldr	r3, [r1, #8]
 8000f62:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000f66:	4303      	orrs	r3, r0
 8000f68:	608b      	str	r3, [r1, #8]
 8000f6a:	e765      	b.n	8000e38 <HAL_RCC_ClockConfig+0x3c>
 8000f6c:	40023c00 	.word	0x40023c00
 8000f70:	40023800 	.word	0x40023800
 8000f74:	08001bcc 	.word	0x08001bcc
 8000f78:	20000008 	.word	0x20000008
 8000f7c:	20000004 	.word	0x20000004

08000f80 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000f80:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  tmpcr1 = TIMx->CR1;
 8000f84:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000f86:	d006      	beq.n	8000f96 <TIM_Base_SetConfig+0x16>
 8000f88:	4a18      	ldr	r2, [pc, #96]	; (8000fec <TIM_Base_SetConfig+0x6c>)
 8000f8a:	4290      	cmp	r0, r2
 8000f8c:	d003      	beq.n	8000f96 <TIM_Base_SetConfig+0x16>
 8000f8e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f92:	4290      	cmp	r0, r2
 8000f94:	d10e      	bne.n	8000fb4 <TIM_Base_SetConfig+0x34>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8000f96:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000f98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000f9c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
    tmpcr1 |= Structure->CounterMode;
 8000fa0:	ea43 0302 	orr.w	r3, r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000fa4:	d011      	beq.n	8000fca <TIM_Base_SetConfig+0x4a>
 8000fa6:	4a11      	ldr	r2, [pc, #68]	; (8000fec <TIM_Base_SetConfig+0x6c>)
 8000fa8:	4290      	cmp	r0, r2
 8000faa:	d00e      	beq.n	8000fca <TIM_Base_SetConfig+0x4a>
 8000fac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000fb0:	4290      	cmp	r0, r2
 8000fb2:	d00a      	beq.n	8000fca <TIM_Base_SetConfig+0x4a>
 8000fb4:	4a0e      	ldr	r2, [pc, #56]	; (8000ff0 <TIM_Base_SetConfig+0x70>)
 8000fb6:	4290      	cmp	r0, r2
 8000fb8:	d007      	beq.n	8000fca <TIM_Base_SetConfig+0x4a>
 8000fba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000fbe:	4290      	cmp	r0, r2
 8000fc0:	d003      	beq.n	8000fca <TIM_Base_SetConfig+0x4a>
 8000fc2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000fc6:	4290      	cmp	r0, r2
 8000fc8:	d103      	bne.n	8000fd2 <TIM_Base_SetConfig+0x52>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000fca:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8000fcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000fd0:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8000fd2:	690a      	ldr	r2, [r1, #16]
 8000fd4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000fd8:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8000fda:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000fdc:	688b      	ldr	r3, [r1, #8]
 8000fde:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8000fe0:	680b      	ldr	r3, [r1, #0]
 8000fe2:	6283      	str	r3, [r0, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	6143      	str	r3, [r0, #20]
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	40000400 	.word	0x40000400
 8000ff0:	40010800 	.word	0x40010800

08000ff4 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000ff4:	6a03      	ldr	r3, [r0, #32]
{
 8000ff6:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000ff8:	f023 0301 	bic.w	r3, r3, #1
 8000ffc:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000ffe:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001000:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001002:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001004:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001006:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800100a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800100c:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 800100e:	f023 0302 	bic.w	r3, r3, #2

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001012:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001014:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001016:	684a      	ldr	r2, [r1, #4]
  tmpccer |= OC_Config->OCPolarity;
 8001018:	432b      	orrs	r3, r5
  TIMx->CCR1 = OC_Config->Pulse;
 800101a:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800101c:	6203      	str	r3, [r0, #32]
 800101e:	bd30      	pop	{r4, r5, pc}

08001020 <TIM_OC2_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001020:	6a03      	ldr	r3, [r0, #32]
{
 8001022:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001024:	f023 0310 	bic.w	r3, r3, #16
 8001028:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800102a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800102c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800102e:	6982      	ldr	r2, [r0, #24]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001030:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001032:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001036:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800103a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 800103c:	f023 0320 	bic.w	r3, r3, #32

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001040:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001042:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001044:	684a      	ldr	r2, [r1, #4]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001046:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCR2 = OC_Config->Pulse;
 800104a:	6382      	str	r2, [r0, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800104c:	6203      	str	r3, [r0, #32]
 800104e:	bd30      	pop	{r4, r5, pc}

08001050 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8001050:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001052:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001054:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001056:	f001 011f 	and.w	r1, r1, #31
 800105a:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 800105c:	ea23 0304 	bic.w	r3, r3, r4
 8001060:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001062:	6a03      	ldr	r3, [r0, #32]
 8001064:	408a      	lsls	r2, r1
 8001066:	431a      	orrs	r2, r3
 8001068:	6202      	str	r2, [r0, #32]
 800106a:	bd10      	pop	{r4, pc}

0800106c <HAL_TIM_Base_Init>:
{
 800106c:	b510      	push	{r4, lr}
  if (htim == NULL)
 800106e:	4604      	mov	r4, r0
 8001070:	b1a0      	cbz	r0, 800109c <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001072:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001076:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800107a:	b91b      	cbnz	r3, 8001084 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800107c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 8001080:	f000 fcb0 	bl	80019e4 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001084:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001086:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001088:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800108c:	1d21      	adds	r1, r4, #4
 800108e:	f7ff ff77 	bl	8000f80 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8001092:	2301      	movs	r3, #1
  return HAL_OK;
 8001094:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001096:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 800109a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800109c:	2001      	movs	r0, #1
}
 800109e:	bd10      	pop	{r4, pc}

080010a0 <HAL_TIM_PWM_MspInit>:
 80010a0:	4770      	bx	lr

080010a2 <HAL_TIM_PWM_Init>:
{
 80010a2:	b510      	push	{r4, lr}
  if (htim == NULL)
 80010a4:	4604      	mov	r4, r0
 80010a6:	b1a0      	cbz	r0, 80010d2 <HAL_TIM_PWM_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 80010a8:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80010ac:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80010b0:	b91b      	cbnz	r3, 80010ba <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80010b2:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_PWM_MspInit(htim);
 80010b6:	f7ff fff3 	bl	80010a0 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80010ba:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80010bc:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80010be:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80010c2:	1d21      	adds	r1, r4, #4
 80010c4:	f7ff ff5c 	bl	8000f80 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80010c8:	2301      	movs	r3, #1
  return HAL_OK;
 80010ca:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80010cc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 80010d0:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80010d2:	2001      	movs	r0, #1
}
 80010d4:	bd10      	pop	{r4, pc}

080010d6 <HAL_TIM_IC_Start>:
{
 80010d6:	b510      	push	{r4, lr}
 80010d8:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80010da:	2201      	movs	r2, #1
 80010dc:	6800      	ldr	r0, [r0, #0]
 80010de:	f7ff ffb7 	bl	8001050 <TIM_CCxChannelCmd>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80010e2:	6823      	ldr	r3, [r4, #0]
}
 80010e4:	2000      	movs	r0, #0
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80010e6:	689a      	ldr	r2, [r3, #8]
 80010e8:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80010ec:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 80010ee:	bf1e      	ittt	ne
 80010f0:	681a      	ldrne	r2, [r3, #0]
 80010f2:	f042 0201 	orrne.w	r2, r2, #1
 80010f6:	601a      	strne	r2, [r3, #0]
}
 80010f8:	bd10      	pop	{r4, pc}

080010fa <HAL_TIM_PWM_Start>:
 80010fa:	f7ff bfec 	b.w	80010d6 <HAL_TIM_IC_Start>

080010fe <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 80010fe:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
{
 8001102:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8001104:	2b01      	cmp	r3, #1
{
 8001106:	4605      	mov	r5, r0
 8001108:	460c      	mov	r4, r1
 800110a:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 800110e:	d025      	beq.n	800115c <HAL_TIM_PWM_ConfigChannel+0x5e>
 8001110:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8001112:	f885 0039 	strb.w	r0, [r5, #57]	; 0x39
  __HAL_LOCK(htim);
 8001116:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
  switch (Channel)
 800111a:	2a0c      	cmp	r2, #12
 800111c:	d818      	bhi.n	8001150 <HAL_TIM_PWM_ConfigChannel+0x52>
 800111e:	e8df f002 	tbb	[pc, r2]
 8001122:	1707      	.short	0x1707
 8001124:	171e1717 	.word	0x171e1717
 8001128:	172f1717 	.word	0x172f1717
 800112c:	1717      	.short	0x1717
 800112e:	52          	.byte	0x52
 800112f:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001130:	6828      	ldr	r0, [r5, #0]
 8001132:	f7ff ff5f 	bl	8000ff4 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001136:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001138:	68c9      	ldr	r1, [r1, #12]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800113a:	699a      	ldr	r2, [r3, #24]
 800113c:	f042 0208 	orr.w	r2, r2, #8
 8001140:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001142:	699a      	ldr	r2, [r3, #24]
 8001144:	f022 0204 	bic.w	r2, r2, #4
 8001148:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800114a:	699a      	ldr	r2, [r3, #24]
 800114c:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800114e:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8001150:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001152:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001154:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
  __HAL_UNLOCK(htim);
 8001158:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
}
 800115c:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800115e:	6828      	ldr	r0, [r5, #0]
 8001160:	f7ff ff5e 	bl	8001020 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001164:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001166:	68c9      	ldr	r1, [r1, #12]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001168:	699a      	ldr	r2, [r3, #24]
 800116a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800116e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001170:	699a      	ldr	r2, [r3, #24]
 8001172:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001176:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001178:	699a      	ldr	r2, [r3, #24]
 800117a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800117e:	e7e6      	b.n	800114e <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001180:	682b      	ldr	r3, [r5, #0]
  tmpccmrx |= OC_Config->OCMode;
 8001182:	6826      	ldr	r6, [r4, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001184:	6a1a      	ldr	r2, [r3, #32]
 8001186:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800118a:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 800118c:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 800118e:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8001190:	69d9      	ldr	r1, [r3, #28]
  tmpccer &= ~TIM_CCER_CC3P;
 8001192:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001196:	f021 0173 	bic.w	r1, r1, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800119a:	4331      	orrs	r1, r6
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800119c:	68a6      	ldr	r6, [r4, #8]
  TIMx->CR2 = tmpcr2;
 800119e:	6058      	str	r0, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 80011a0:	61d9      	str	r1, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 80011a2:	6861      	ldr	r1, [r4, #4]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80011a4:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  TIMx->CCR3 = OC_Config->Pulse;
 80011a8:	63d9      	str	r1, [r3, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 80011aa:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80011ac:	69da      	ldr	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80011ae:	68e1      	ldr	r1, [r4, #12]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80011b0:	f042 0208 	orr.w	r2, r2, #8
 80011b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80011b6:	69da      	ldr	r2, [r3, #28]
 80011b8:	f022 0204 	bic.w	r2, r2, #4
 80011bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80011be:	69da      	ldr	r2, [r3, #28]
 80011c0:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80011c2:	61da      	str	r2, [r3, #28]
      break;
 80011c4:	e7c4      	b.n	8001150 <HAL_TIM_PWM_ConfigChannel+0x52>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80011c6:	682b      	ldr	r3, [r5, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80011c8:	6826      	ldr	r6, [r4, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80011ca:	6a1a      	ldr	r2, [r3, #32]
 80011cc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80011d0:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 80011d2:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80011d4:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 80011d6:	69d9      	ldr	r1, [r3, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 80011d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80011dc:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80011e0:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80011e4:	68a6      	ldr	r6, [r4, #8]
  TIMx->CR2 = tmpcr2;
 80011e6:	6058      	str	r0, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 80011e8:	61d9      	str	r1, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 80011ea:	6861      	ldr	r1, [r4, #4]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80011ec:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCR4 = OC_Config->Pulse;
 80011f0:	6419      	str	r1, [r3, #64]	; 0x40
  TIMx->CCER = tmpccer;
 80011f2:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80011f4:	69da      	ldr	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80011f6:	68e1      	ldr	r1, [r4, #12]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80011f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80011fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80011fe:	69da      	ldr	r2, [r3, #28]
 8001200:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001204:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001206:	69da      	ldr	r2, [r3, #28]
 8001208:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800120c:	e7d9      	b.n	80011c2 <HAL_TIM_PWM_ConfigChannel+0xc4>

0800120e <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800120e:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
{
 8001212:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8001214:	2b01      	cmp	r3, #1
 8001216:	f04f 0302 	mov.w	r3, #2
 800121a:	d019      	beq.n	8001250 <HAL_TIM_ConfigClockSource+0x42>
 800121c:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800121e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  tmpsmcr = htim->Instance->SMCR;
 8001222:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 8001224:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  tmpsmcr = htim->Instance->SMCR;
 8001228:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800122a:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800122e:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8001232:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8001234:	680a      	ldr	r2, [r1, #0]
 8001236:	2a40      	cmp	r2, #64	; 0x40
 8001238:	d06f      	beq.n	800131a <HAL_TIM_ConfigClockSource+0x10c>
 800123a:	d816      	bhi.n	800126a <HAL_TIM_ConfigClockSource+0x5c>
 800123c:	2a10      	cmp	r2, #16
 800123e:	d00d      	beq.n	800125c <HAL_TIM_ConfigClockSource+0x4e>
 8001240:	d808      	bhi.n	8001254 <HAL_TIM_ConfigClockSource+0x46>
 8001242:	b15a      	cbz	r2, 800125c <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_READY;
 8001244:	2301      	movs	r3, #1
 8001246:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UNLOCK(htim);
 800124a:	2300      	movs	r3, #0
 800124c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 8001250:	4618      	mov	r0, r3
}
 8001252:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8001254:	2a20      	cmp	r2, #32
 8001256:	d001      	beq.n	800125c <HAL_TIM_ConfigClockSource+0x4e>
 8001258:	2a30      	cmp	r2, #48	; 0x30
 800125a:	d1f3      	bne.n	8001244 <HAL_TIM_ConfigClockSource+0x36>
  tmpsmcr = TIMx->SMCR;
 800125c:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800125e:	f042 0207 	orr.w	r2, r2, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8001262:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001266:	430a      	orrs	r2, r1
 8001268:	e03d      	b.n	80012e6 <HAL_TIM_ConfigClockSource+0xd8>
  switch (sClockSourceConfig->ClockSource)
 800126a:	2a60      	cmp	r2, #96	; 0x60
 800126c:	d03d      	beq.n	80012ea <HAL_TIM_ConfigClockSource+0xdc>
 800126e:	d818      	bhi.n	80012a2 <HAL_TIM_ConfigClockSource+0x94>
 8001270:	2a50      	cmp	r2, #80	; 0x50
 8001272:	d1e7      	bne.n	8001244 <HAL_TIM_ConfigClockSource+0x36>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001274:	684c      	ldr	r4, [r1, #4]
 8001276:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001278:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800127a:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800127c:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001280:	f025 0501 	bic.w	r5, r5, #1
 8001284:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001286:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8001288:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800128a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800128e:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8001292:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001294:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8001296:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001298:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800129c:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 80012a0:	e021      	b.n	80012e6 <HAL_TIM_ConfigClockSource+0xd8>
  switch (sClockSourceConfig->ClockSource)
 80012a2:	2a70      	cmp	r2, #112	; 0x70
 80012a4:	d011      	beq.n	80012ca <HAL_TIM_ConfigClockSource+0xbc>
 80012a6:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80012aa:	d1cb      	bne.n	8001244 <HAL_TIM_ConfigClockSource+0x36>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80012ac:	688a      	ldr	r2, [r1, #8]
 80012ae:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80012b0:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80012b2:	68c9      	ldr	r1, [r1, #12]
 80012b4:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80012b6:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80012ba:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80012be:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 80012c0:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80012c2:	689a      	ldr	r2, [r3, #8]
 80012c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80012c8:	e00d      	b.n	80012e6 <HAL_TIM_ConfigClockSource+0xd8>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80012ca:	688a      	ldr	r2, [r1, #8]
 80012cc:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80012ce:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80012d0:	68c9      	ldr	r1, [r1, #12]
 80012d2:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80012d4:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80012d8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80012dc:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 80012de:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 80012e0:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80012e2:	f042 0277 	orr.w	r2, r2, #119	; 0x77
  TIMx->SMCR = tmpsmcr;
 80012e6:	609a      	str	r2, [r3, #8]
 80012e8:	e7ac      	b.n	8001244 <HAL_TIM_ConfigClockSource+0x36>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80012ea:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80012ec:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80012ee:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 80012f2:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80012f4:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80012f6:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 80012f8:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80012fa:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80012fe:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8001302:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001306:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 800130a:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800130c:	621a      	str	r2, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 800130e:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001310:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001314:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 8001318:	e7e5      	b.n	80012e6 <HAL_TIM_ConfigClockSource+0xd8>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800131a:	684c      	ldr	r4, [r1, #4]
 800131c:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800131e:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001320:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001322:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001326:	f025 0501 	bic.w	r5, r5, #1
 800132a:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800132c:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 800132e:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001330:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001334:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8001338:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800133a:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 800133c:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800133e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001342:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8001346:	e7ce      	b.n	80012e6 <HAL_TIM_ConfigClockSource+0xd8>

08001348 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001348:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
{
 800134c:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 800134e:	2b01      	cmp	r3, #1
 8001350:	f04f 0302 	mov.w	r3, #2
 8001354:	d014      	beq.n	8001380 <HAL_TIMEx_MasterConfigSynchronization+0x38>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001356:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001358:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  tmpcr2 = htim->Instance->CR2;
 800135c:	6862      	ldr	r2, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800135e:	68a3      	ldr	r3, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001360:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001362:	6849      	ldr	r1, [r1, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 8001364:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_MSM;
 8001368:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800136c:	430b      	orrs	r3, r1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800136e:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001370:	6062      	str	r2, [r4, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001372:	60a3      	str	r3, [r4, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001374:	2301      	movs	r3, #1
 8001376:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  __HAL_UNLOCK(htim);
 800137a:	2300      	movs	r3, #0
 800137c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 8001380:	4618      	mov	r0, r3

  return HAL_OK;
}
 8001382:	bd30      	pop	{r4, r5, pc}

08001384 <CheckIfEnabled>:
	  TurretState = NewTurretState;
	}
}

void CheckIfEnabled( void )
{
 8001384:	b508      	push	{r3, lr}
	GPIO_PinState state;

	state = HAL_GPIO_ReadPin(ENABLE_GPIO_Port, ENABLE_Pin);
 8001386:	2180      	movs	r1, #128	; 0x80
 8001388:	4806      	ldr	r0, [pc, #24]	; (80013a4 <CheckIfEnabled+0x20>)
 800138a:	f7ff fa9f 	bl	80008cc <HAL_GPIO_ReadPin>
	if(state == GPIO_PIN_RESET)
 800138e:	b910      	cbnz	r0, 8001396 <CheckIfEnabled+0x12>
	{
		NewTurretState = IDLE;
 8001390:	4b05      	ldr	r3, [pc, #20]	; (80013a8 <CheckIfEnabled+0x24>)
 8001392:	7018      	strb	r0, [r3, #0]
 8001394:	bd08      	pop	{r3, pc}
	}
	else
	{
		if(TurretState == IDLE)
 8001396:	4b05      	ldr	r3, [pc, #20]	; (80013ac <CheckIfEnabled+0x28>)
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	b913      	cbnz	r3, 80013a2 <CheckIfEnabled+0x1e>
		{
			NewTurretState = LOCK;
 800139c:	2203      	movs	r2, #3
 800139e:	4b02      	ldr	r3, [pc, #8]	; (80013a8 <CheckIfEnabled+0x24>)
 80013a0:	701a      	strb	r2, [r3, #0]
 80013a2:	bd08      	pop	{r3, pc}
 80013a4:	40020800 	.word	0x40020800
 80013a8:	20000069 	.word	0x20000069
 80013ac:	20000068 	.word	0x20000068

080013b0 <GetCurrentTool>:
		}
	}
}

uint8_t GetCurrentTool( void )
{
 80013b0:	b510      	push	{r4, lr}
	*/

	uint8_t value = 0;
	uint8_t toolNo = 0;

	if(HAL_GPIO_ReadPin(ENC_1_GPIO_Port, ENC_1_Pin))
 80013b2:	2101      	movs	r1, #1
 80013b4:	4811      	ldr	r0, [pc, #68]	; (80013fc <GetCurrentTool+0x4c>)
 80013b6:	f7ff fa89 	bl	80008cc <HAL_GPIO_ReadPin>
	{
		value = value || 0b0001;
	}
	if(HAL_GPIO_ReadPin(ENC_2_GPIO_Port, ENC_2_Pin))
 80013ba:	2102      	movs	r1, #2
	if(HAL_GPIO_ReadPin(ENC_1_GPIO_Port, ENC_1_Pin))
 80013bc:	4604      	mov	r4, r0
	if(HAL_GPIO_ReadPin(ENC_2_GPIO_Port, ENC_2_Pin))
 80013be:	480f      	ldr	r0, [pc, #60]	; (80013fc <GetCurrentTool+0x4c>)
 80013c0:	f7ff fa84 	bl	80008cc <HAL_GPIO_ReadPin>
 80013c4:	b9b8      	cbnz	r0, 80013f6 <GetCurrentTool+0x46>
	if(HAL_GPIO_ReadPin(ENC_1_GPIO_Port, ENC_1_Pin))
 80013c6:	3400      	adds	r4, #0
 80013c8:	bf18      	it	ne
 80013ca:	2401      	movne	r4, #1
	{
		value = value || 0b0010;
	}
	if(HAL_GPIO_ReadPin(ENC_3_GPIO_Port, ENC_3_Pin))
 80013cc:	2104      	movs	r1, #4
 80013ce:	480b      	ldr	r0, [pc, #44]	; (80013fc <GetCurrentTool+0x4c>)
 80013d0:	f7ff fa7c 	bl	80008cc <HAL_GPIO_ReadPin>
	{
		value = value || 0b0100;
	}
	if(HAL_GPIO_ReadPin(ENC_4_GPIO_Port, ENC_4_Pin))
 80013d4:	2108      	movs	r1, #8
	if(HAL_GPIO_ReadPin(ENC_3_GPIO_Port, ENC_3_Pin))
 80013d6:	2800      	cmp	r0, #0
	if(HAL_GPIO_ReadPin(ENC_4_GPIO_Port, ENC_4_Pin))
 80013d8:	4808      	ldr	r0, [pc, #32]	; (80013fc <GetCurrentTool+0x4c>)
	if(HAL_GPIO_ReadPin(ENC_3_GPIO_Port, ENC_3_Pin))
 80013da:	bf18      	it	ne
 80013dc:	2401      	movne	r4, #1
	if(HAL_GPIO_ReadPin(ENC_4_GPIO_Port, ENC_4_Pin))
 80013de:	f7ff fa75 	bl	80008cc <HAL_GPIO_ReadPin>
	{
		value = value || 0b1000;
 80013e2:	2800      	cmp	r0, #0
 80013e4:	bf18      	it	ne
 80013e6:	2401      	movne	r4, #1
 80013e8:	3c01      	subs	r4, #1
 80013ea:	b2e4      	uxtb	r4, r4
 80013ec:	2c0b      	cmp	r4, #11
			toolNo = 8;
			break;
	}

	return toolNo;
}
 80013ee:	bf94      	ite	ls
 80013f0:	2007      	movls	r0, #7
 80013f2:	2000      	movhi	r0, #0
 80013f4:	bd10      	pop	{r4, pc}
 80013f6:	2401      	movs	r4, #1
 80013f8:	e7e8      	b.n	80013cc <GetCurrentTool+0x1c>
 80013fa:	bf00      	nop
 80013fc:	40020800 	.word	0x40020800

08001400 <GetSelectedTool>:

uint8_t GetSelectedTool( void )
{
 8001400:	b508      	push	{r3, lr}
	uint8_t toolNo = 0;


	if(HAL_GPIO_ReadPin(TOOL_SEL_1_GPIO_Port, TOOL_SEL_1_Pin))
 8001402:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001406:	4820      	ldr	r0, [pc, #128]	; (8001488 <GetSelectedTool+0x88>)
 8001408:	f7ff fa60 	bl	80008cc <HAL_GPIO_ReadPin>
 800140c:	bb68      	cbnz	r0, 800146a <GetSelectedTool+0x6a>
	{
		toolNo = 1;
	}
	else if(HAL_GPIO_ReadPin(TOOL_SEL_2_GPIO_Port, TOOL_SEL_2_Pin))
 800140e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001412:	481d      	ldr	r0, [pc, #116]	; (8001488 <GetSelectedTool+0x88>)
 8001414:	f7ff fa5a 	bl	80008cc <HAL_GPIO_ReadPin>
 8001418:	bb48      	cbnz	r0, 800146e <GetSelectedTool+0x6e>
	{
		toolNo = 2;
	}
	else if(HAL_GPIO_ReadPin(TOOL_SEL_3_GPIO_Port, TOOL_SEL_3_Pin))
 800141a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800141e:	481a      	ldr	r0, [pc, #104]	; (8001488 <GetSelectedTool+0x88>)
 8001420:	f7ff fa54 	bl	80008cc <HAL_GPIO_ReadPin>
 8001424:	bb28      	cbnz	r0, 8001472 <GetSelectedTool+0x72>
	{
		toolNo = 3;
	}
	else if(HAL_GPIO_ReadPin(TOOL_SEL_4_GPIO_Port, TOOL_SEL_4_Pin))
 8001426:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800142a:	4817      	ldr	r0, [pc, #92]	; (8001488 <GetSelectedTool+0x88>)
 800142c:	f7ff fa4e 	bl	80008cc <HAL_GPIO_ReadPin>
 8001430:	bb08      	cbnz	r0, 8001476 <GetSelectedTool+0x76>
	{
		toolNo = 4;
	}
	else if(HAL_GPIO_ReadPin(TOOL_SEL_5_GPIO_Port, TOOL_SEL_5_Pin))
 8001432:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001436:	4814      	ldr	r0, [pc, #80]	; (8001488 <GetSelectedTool+0x88>)
 8001438:	f7ff fa48 	bl	80008cc <HAL_GPIO_ReadPin>
 800143c:	b9e8      	cbnz	r0, 800147a <GetSelectedTool+0x7a>
	{
		toolNo = 5;
	}
	else if(HAL_GPIO_ReadPin(TOOL_SEL_6_GPIO_Port, TOOL_SEL_6_Pin))
 800143e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001442:	4811      	ldr	r0, [pc, #68]	; (8001488 <GetSelectedTool+0x88>)
 8001444:	f7ff fa42 	bl	80008cc <HAL_GPIO_ReadPin>
 8001448:	b9c8      	cbnz	r0, 800147e <GetSelectedTool+0x7e>
	{
		toolNo = 6;
	}
	else if(HAL_GPIO_ReadPin(TOOL_SEL_7_GPIO_Port, TOOL_SEL_7_Pin))
 800144a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800144e:	480e      	ldr	r0, [pc, #56]	; (8001488 <GetSelectedTool+0x88>)
 8001450:	f7ff fa3c 	bl	80008cc <HAL_GPIO_ReadPin>
 8001454:	b9a8      	cbnz	r0, 8001482 <GetSelectedTool+0x82>
	{
		toolNo = 7;
	}
	else if(HAL_GPIO_ReadPin(TOOL_SEL_8_GPIO_Port, TOOL_SEL_8_Pin))
 8001456:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800145a:	480b      	ldr	r0, [pc, #44]	; (8001488 <GetSelectedTool+0x88>)
 800145c:	f7ff fa36 	bl	80008cc <HAL_GPIO_ReadPin>
	{
		toolNo = 8;
 8001460:	2800      	cmp	r0, #0
 8001462:	bf0c      	ite	eq
 8001464:	2000      	moveq	r0, #0
 8001466:	2008      	movne	r0, #8
 8001468:	bd08      	pop	{r3, pc}
		toolNo = 1;
 800146a:	2001      	movs	r0, #1
 800146c:	bd08      	pop	{r3, pc}
		toolNo = 2;
 800146e:	2002      	movs	r0, #2
 8001470:	bd08      	pop	{r3, pc}
		toolNo = 3;
 8001472:	2003      	movs	r0, #3
 8001474:	bd08      	pop	{r3, pc}
		toolNo = 4;
 8001476:	2004      	movs	r0, #4
 8001478:	bd08      	pop	{r3, pc}
		toolNo = 5;
 800147a:	2005      	movs	r0, #5
 800147c:	bd08      	pop	{r3, pc}
		toolNo = 6;
 800147e:	2006      	movs	r0, #6
 8001480:	bd08      	pop	{r3, pc}
		toolNo = 7;
 8001482:	2007      	movs	r0, #7
	}

	return toolNo;
}
 8001484:	bd08      	pop	{r3, pc}
 8001486:	bf00      	nop
 8001488:	40020000 	.word	0x40020000

0800148c <SetTurretStatusLocked>:
	SetTurretStatusLocked(false);
	user_pwm_setvalue(0);
}

void SetTurretStatusLocked(uint8_t ready)
{
 800148c:	b508      	push	{r3, lr}
	if(ready)
 800148e:	b160      	cbz	r0, 80014aa <SetTurretStatusLocked+0x1e>
	{
		HAL_GPIO_WritePin(LED_LOCK_GPIO_Port, LED_LOCK_Pin, GPIO_PIN_RESET);
 8001490:	2200      	movs	r2, #0
 8001492:	2140      	movs	r1, #64	; 0x40
 8001494:	4808      	ldr	r0, [pc, #32]	; (80014b8 <SetTurretStatusLocked+0x2c>)
 8001496:	f7ff fa1f 	bl	80008d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TOOL_CHANGE_READY_GPIO_Port, TOOL_CHANGE_READY_Pin, GPIO_PIN_RESET);
 800149a:	2200      	movs	r2, #0
	else
	{
		HAL_GPIO_WritePin(LED_LOCK_GPIO_Port, LED_LOCK_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(TOOL_CHANGE_READY_GPIO_Port, TOOL_CHANGE_READY_Pin, GPIO_PIN_SET);
	}
}
 800149c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		HAL_GPIO_WritePin(TOOL_CHANGE_READY_GPIO_Port, TOOL_CHANGE_READY_Pin, GPIO_PIN_SET);
 80014a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014a4:	4805      	ldr	r0, [pc, #20]	; (80014bc <SetTurretStatusLocked+0x30>)
 80014a6:	f7ff ba17 	b.w	80008d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_LOCK_GPIO_Port, LED_LOCK_Pin, GPIO_PIN_SET);
 80014aa:	2201      	movs	r2, #1
 80014ac:	2140      	movs	r1, #64	; 0x40
 80014ae:	4802      	ldr	r0, [pc, #8]	; (80014b8 <SetTurretStatusLocked+0x2c>)
 80014b0:	f7ff fa12 	bl	80008d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TOOL_CHANGE_READY_GPIO_Port, TOOL_CHANGE_READY_Pin, GPIO_PIN_SET);
 80014b4:	2201      	movs	r2, #1
 80014b6:	e7f1      	b.n	800149c <SetTurretStatusLocked+0x10>
 80014b8:	40020400 	.word	0x40020400
 80014bc:	40020800 	.word	0x40020800

080014c0 <CheckNewTool>:
{
 80014c0:	b508      	push	{r3, lr}
	if((TurretState == IDLE) || (TurretState == LOCK) )
 80014c2:	4b0a      	ldr	r3, [pc, #40]	; (80014ec <CheckNewTool+0x2c>)
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	b10b      	cbz	r3, 80014cc <CheckNewTool+0xc>
 80014c8:	2b03      	cmp	r3, #3
 80014ca:	d10d      	bne.n	80014e8 <CheckNewTool+0x28>
		state = HAL_GPIO_ReadPin(TOOL_CHANGE_GPIO_Port, TOOL_CHANGE_Pin);
 80014cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014d0:	4807      	ldr	r0, [pc, #28]	; (80014f0 <CheckNewTool+0x30>)
 80014d2:	f7ff f9fb 	bl	80008cc <HAL_GPIO_ReadPin>
		if(state == GPIO_PIN_SET)
 80014d6:	2801      	cmp	r0, #1
 80014d8:	d106      	bne.n	80014e8 <CheckNewTool+0x28>
			NewTurretState = FORWARD;
 80014da:	4b06      	ldr	r3, [pc, #24]	; (80014f4 <CheckNewTool+0x34>)
 80014dc:	7018      	strb	r0, [r3, #0]
			SetTurretStatusLocked(false);
 80014de:	2000      	movs	r0, #0
}
 80014e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			SetTurretStatusLocked(false);
 80014e4:	f7ff bfd2 	b.w	800148c <SetTurretStatusLocked>
 80014e8:	bd08      	pop	{r3, pc}
 80014ea:	bf00      	nop
 80014ec:	20000068 	.word	0x20000068
 80014f0:	40020800 	.word	0x40020800
 80014f4:	20000069 	.word	0x20000069

080014f8 <user_pwm_setvalue>:

void user_pwm_setvalue(uint16_t value)
{
 80014f8:	b530      	push	{r4, r5, lr}
    TIM_OC_InitTypeDef sConfigOC;

    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014fa:	2360      	movs	r3, #96	; 0x60
    sConfigOC.Pulse = value;
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014fc:	2400      	movs	r4, #0
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;

    HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2);
 80014fe:	4d0d      	ldr	r5, [pc, #52]	; (8001534 <user_pwm_setvalue+0x3c>)
{
 8001500:	b085      	sub	sp, #20
    sConfigOC.Pulse = value;
 8001502:	9001      	str	r0, [sp, #4]
    HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2);
 8001504:	2204      	movs	r2, #4
 8001506:	4669      	mov	r1, sp
 8001508:	4628      	mov	r0, r5
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800150a:	9300      	str	r3, [sp, #0]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800150c:	9402      	str	r4, [sp, #8]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800150e:	9403      	str	r4, [sp, #12]
    HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2);
 8001510:	f7ff fdf5 	bl	80010fe <HAL_TIM_PWM_ConfigChannel>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001514:	4628      	mov	r0, r5

    HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1);
 8001516:	4d08      	ldr	r5, [pc, #32]	; (8001538 <user_pwm_setvalue+0x40>)
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001518:	2104      	movs	r1, #4
 800151a:	f7ff fdee 	bl	80010fa <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1);
 800151e:	4622      	mov	r2, r4
 8001520:	4669      	mov	r1, sp
 8001522:	4628      	mov	r0, r5
 8001524:	f7ff fdeb 	bl	80010fe <HAL_TIM_PWM_ConfigChannel>
    HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
 8001528:	4621      	mov	r1, r4
 800152a:	4628      	mov	r0, r5
 800152c:	f7ff fde5 	bl	80010fa <HAL_TIM_PWM_Start>

}
 8001530:	b005      	add	sp, #20
 8001532:	bd30      	pop	{r4, r5, pc}
 8001534:	2000002c 	.word	0x2000002c
 8001538:	2000006c 	.word	0x2000006c

0800153c <ForwardTurret>:
{
 800153c:	b538      	push	{r3, r4, r5, lr}
	CurrentTool = GetCurrentTool();
 800153e:	f7ff ff37 	bl	80013b0 <GetCurrentTool>
 8001542:	4605      	mov	r5, r0
	SelectedTool = GetSelectedTool();
 8001544:	f7ff ff5c 	bl	8001400 <GetSelectedTool>
	if(SelectedTool != CurrentTool)
 8001548:	4285      	cmp	r5, r0
	SelectedTool = GetSelectedTool();
 800154a:	4604      	mov	r4, r0
	if(SelectedTool != CurrentTool)
 800154c:	d013      	beq.n	8001576 <ForwardTurret+0x3a>
		HAL_GPIO_WritePin(MOTOR_DIR_GPIO_Port, MOTOR_DIR_Pin, TURRET_FORWARD_DIR);
 800154e:	2200      	movs	r2, #0
 8001550:	2102      	movs	r1, #2
 8001552:	480a      	ldr	r0, [pc, #40]	; (800157c <ForwardTurret+0x40>)
 8001554:	f7ff f9c0 	bl	80008d8 <HAL_GPIO_WritePin>
		user_pwm_setvalue(TURRET_FORWARD_POWER);
 8001558:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800155c:	f7ff ffcc 	bl	80014f8 <user_pwm_setvalue>
		SetTurretStatusLocked(false);
 8001560:	2000      	movs	r0, #0
 8001562:	f7ff ff93 	bl	800148c <SetTurretStatusLocked>
			CurrentTool = GetCurrentTool();
 8001566:	f7ff ff23 	bl	80013b0 <GetCurrentTool>
		while(SelectedTool != CurrentTool)
 800156a:	4284      	cmp	r4, r0
 800156c:	d1fb      	bne.n	8001566 <ForwardTurret+0x2a>
		NewTurretState = REVERSE;
 800156e:	2202      	movs	r2, #2
		NewTurretState = LOCK;
 8001570:	4b03      	ldr	r3, [pc, #12]	; (8001580 <ForwardTurret+0x44>)
 8001572:	701a      	strb	r2, [r3, #0]
 8001574:	bd38      	pop	{r3, r4, r5, pc}
 8001576:	2203      	movs	r2, #3
 8001578:	e7fa      	b.n	8001570 <ForwardTurret+0x34>
 800157a:	bf00      	nop
 800157c:	40020000 	.word	0x40020000
 8001580:	20000069 	.word	0x20000069

08001584 <ReverseTurret>:
	__IO uint32_t ADCValue=0;
 8001584:	2300      	movs	r3, #0
{
 8001586:	b573      	push	{r0, r1, r4, r5, r6, lr}
	HAL_GPIO_WritePin(MOTOR_DIR_GPIO_Port, MOTOR_DIR_Pin, TURRET_REVERSE_DIR);
 8001588:	2201      	movs	r2, #1
 800158a:	2102      	movs	r1, #2
 800158c:	480d      	ldr	r0, [pc, #52]	; (80015c4 <ReverseTurret+0x40>)
	__IO uint32_t ADCValue=0;
 800158e:	9301      	str	r3, [sp, #4]
	HAL_GPIO_WritePin(MOTOR_DIR_GPIO_Port, MOTOR_DIR_Pin, TURRET_REVERSE_DIR);
 8001590:	f7ff f9a2 	bl	80008d8 <HAL_GPIO_WritePin>
	user_pwm_setvalue(TURRET_LOCK_POWER);
 8001594:	20c8      	movs	r0, #200	; 0xc8
 8001596:	f7ff ffaf 	bl	80014f8 <user_pwm_setvalue>
    if (HAL_ADC_PollForConversion(&hadc, 1000000) == HAL_OK)
 800159a:	4c0b      	ldr	r4, [pc, #44]	; (80015c8 <ReverseTurret+0x44>)
 800159c:	4e0b      	ldr	r6, [pc, #44]	; (80015cc <ReverseTurret+0x48>)
	while(ADCValue < LOCKTHRESHOLD)
 800159e:	f240 55db 	movw	r5, #1499	; 0x5db
 80015a2:	9b01      	ldr	r3, [sp, #4]
 80015a4:	42ab      	cmp	r3, r5
 80015a6:	d901      	bls.n	80015ac <ReverseTurret+0x28>
}
 80015a8:	b002      	add	sp, #8
 80015aa:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_ADC_PollForConversion(&hadc, 1000000) == HAL_OK)
 80015ac:	4631      	mov	r1, r6
 80015ae:	4620      	mov	r0, r4
 80015b0:	f7fe feee 	bl	8000390 <HAL_ADC_PollForConversion>
 80015b4:	2800      	cmp	r0, #0
 80015b6:	d1f4      	bne.n	80015a2 <ReverseTurret+0x1e>
        ADCValue = HAL_ADC_GetValue(&hadc);
 80015b8:	4620      	mov	r0, r4
 80015ba:	f7fe ff3c 	bl	8000436 <HAL_ADC_GetValue>
 80015be:	9001      	str	r0, [sp, #4]
 80015c0:	e7ed      	b.n	800159e <ReverseTurret+0x1a>
 80015c2:	bf00      	nop
 80015c4:	40020000 	.word	0x40020000
 80015c8:	200000a8 	.word	0x200000a8
 80015cc:	000f4240 	.word	0x000f4240

080015d0 <LockTurret>:
{
 80015d0:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(MOTOR_DIR_GPIO_Port, MOTOR_DIR_Pin, TURRET_REVERSE_DIR);
 80015d2:	2201      	movs	r2, #1
 80015d4:	2102      	movs	r1, #2
 80015d6:	4805      	ldr	r0, [pc, #20]	; (80015ec <LockTurret+0x1c>)
 80015d8:	f7ff f97e 	bl	80008d8 <HAL_GPIO_WritePin>
	user_pwm_setvalue(TURRET_LOCK_POWER);
 80015dc:	20c8      	movs	r0, #200	; 0xc8
 80015de:	f7ff ff8b 	bl	80014f8 <user_pwm_setvalue>
}
 80015e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	SetTurretStatusLocked(true);
 80015e6:	2001      	movs	r0, #1
 80015e8:	f7ff bf50 	b.w	800148c <SetTurretStatusLocked>
 80015ec:	40020000 	.word	0x40020000

080015f0 <UnlockTurret>:
{
 80015f0:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(MOTOR_DIR_GPIO_Port, MOTOR_DIR_Pin, TURRET_REVERSE_DIR);
 80015f2:	2201      	movs	r2, #1
 80015f4:	2102      	movs	r1, #2
 80015f6:	4805      	ldr	r0, [pc, #20]	; (800160c <UnlockTurret+0x1c>)
 80015f8:	f7ff f96e 	bl	80008d8 <HAL_GPIO_WritePin>
	SetTurretStatusLocked(false);
 80015fc:	2000      	movs	r0, #0
 80015fe:	f7ff ff45 	bl	800148c <SetTurretStatusLocked>
}
 8001602:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	user_pwm_setvalue(0);
 8001606:	2000      	movs	r0, #0
 8001608:	f7ff bf76 	b.w	80014f8 <user_pwm_setvalue>
 800160c:	40020000 	.word	0x40020000

08001610 <InitApp>:
{
 8001610:	b508      	push	{r3, lr}
	TurretState = IDLE;
 8001612:	2300      	movs	r3, #0
 8001614:	4a05      	ldr	r2, [pc, #20]	; (800162c <InitApp+0x1c>)
	HAL_ADC_Start(&hadc);
 8001616:	4806      	ldr	r0, [pc, #24]	; (8001630 <InitApp+0x20>)
	TurretState = IDLE;
 8001618:	7013      	strb	r3, [r2, #0]
	NewTurretState = IDLE;
 800161a:	4a06      	ldr	r2, [pc, #24]	; (8001634 <InitApp+0x24>)
 800161c:	7013      	strb	r3, [r2, #0]
	HAL_ADC_Start(&hadc);
 800161e:	f7fe fff3 	bl	8000608 <HAL_ADC_Start>
}
 8001622:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	UnlockTurret();
 8001626:	f7ff bfe3 	b.w	80015f0 <UnlockTurret>
 800162a:	bf00      	nop
 800162c:	20000068 	.word	0x20000068
 8001630:	200000a8 	.word	0x200000a8
 8001634:	20000069 	.word	0x20000069

08001638 <MainLoop>:
{
 8001638:	b538      	push	{r3, r4, r5, lr}
	if(TurretState != NewTurretState)
 800163a:	4c0f      	ldr	r4, [pc, #60]	; (8001678 <MainLoop+0x40>)
 800163c:	4d0f      	ldr	r5, [pc, #60]	; (800167c <MainLoop+0x44>)
	CheckIfEnabled();
 800163e:	f7ff fea1 	bl	8001384 <CheckIfEnabled>
	CheckNewTool();
 8001642:	f7ff ff3d 	bl	80014c0 <CheckNewTool>
	if(TurretState != NewTurretState)
 8001646:	7821      	ldrb	r1, [r4, #0]
 8001648:	7828      	ldrb	r0, [r5, #0]
 800164a:	4288      	cmp	r0, r1
 800164c:	d009      	beq.n	8001662 <MainLoop+0x2a>
	  switch (TurretState) {
 800164e:	2903      	cmp	r1, #3
 8001650:	d805      	bhi.n	800165e <MainLoop+0x26>
 8001652:	e8df f001 	tbb	[pc, r1]
 8001656:	0702      	.short	0x0702
 8001658:	0d0a      	.short	0x0d0a
			UnlockTurret();
 800165a:	f7ff ffc9 	bl	80015f0 <UnlockTurret>
	  TurretState = NewTurretState;
 800165e:	782b      	ldrb	r3, [r5, #0]
 8001660:	7023      	strb	r3, [r4, #0]
 8001662:	bd38      	pop	{r3, r4, r5, pc}
			ForwardTurret();
 8001664:	f7ff ff6a 	bl	800153c <ForwardTurret>
			break;
 8001668:	e7f9      	b.n	800165e <MainLoop+0x26>
			ReverseTurret();
 800166a:	f7ff ff8b 	bl	8001584 <ReverseTurret>
			break;
 800166e:	e7f6      	b.n	800165e <MainLoop+0x26>
			LockTurret();
 8001670:	f7ff ffae 	bl	80015d0 <LockTurret>
			break;
 8001674:	e7f3      	b.n	800165e <MainLoop+0x26>
 8001676:	bf00      	nop
 8001678:	20000068 	.word	0x20000068
 800167c:	20000069 	.word	0x20000069

08001680 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001680:	b530      	push	{r4, r5, lr}
 8001682:	b093      	sub	sp, #76	; 0x4c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001684:	2234      	movs	r2, #52	; 0x34
 8001686:	2100      	movs	r1, #0
 8001688:	a805      	add	r0, sp, #20
 800168a:	f000 fa8b 	bl	8001ba4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800168e:	2100      	movs	r1, #0
 8001690:	2214      	movs	r2, #20
 8001692:	4668      	mov	r0, sp
 8001694:	f000 fa86 	bl	8001ba4 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001698:	4a0e      	ldr	r2, [pc, #56]	; (80016d4 <SystemClock_Config+0x54>)
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800169a:	2400      	movs	r4, #0
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800169c:	6813      	ldr	r3, [r2, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800169e:	2501      	movs	r5, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016a0:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80016a4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80016a8:	6013      	str	r3, [r2, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016aa:	2302      	movs	r3, #2
 80016ac:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016ae:	2310      	movs	r3, #16
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016b0:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016b2:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016b4:	9508      	str	r5, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80016b6:	940e      	str	r4, [sp, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016b8:	f7ff f954 	bl	8000964 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016bc:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80016be:	4621      	mov	r1, r4
 80016c0:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80016c2:	e88d 0028 	stmia.w	sp, {r3, r5}
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016c6:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016c8:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016ca:	9404      	str	r4, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80016cc:	f7ff fb96 	bl	8000dfc <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 80016d0:	b013      	add	sp, #76	; 0x4c
 80016d2:	bd30      	pop	{r4, r5, pc}
 80016d4:	40007000 	.word	0x40007000

080016d8 <main>:
{
 80016d8:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 80016dc:	b091      	sub	sp, #68	; 0x44
  HAL_Init();
 80016de:	f7fe fd73 	bl	80001c8 <HAL_Init>
  SystemClock_Config();
 80016e2:	f7ff ffcd 	bl	8001680 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e6:	2214      	movs	r2, #20
 80016e8:	2100      	movs	r1, #0
 80016ea:	a80b      	add	r0, sp, #44	; 0x2c
 80016ec:	f000 fa5a 	bl	8001ba4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016f0:	4b8a      	ldr	r3, [pc, #552]	; (800191c <main+0x244>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_DIR_GPIO_Port, MOTOR_DIR_Pin, GPIO_PIN_RESET);
 80016f2:	2102      	movs	r1, #2
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016f4:	69da      	ldr	r2, [r3, #28]
  HAL_GPIO_WritePin(MOTOR_DIR_GPIO_Port, MOTOR_DIR_Pin, GPIO_PIN_RESET);
 80016f6:	488a      	ldr	r0, [pc, #552]	; (8001920 <main+0x248>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016f8:	f042 0204 	orr.w	r2, r2, #4
 80016fc:	61da      	str	r2, [r3, #28]
 80016fe:	69da      	ldr	r2, [r3, #28]
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_LOCK_GPIO_Port, LED_LOCK_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : ENC_1_Pin ENC_2_Pin ENC_3_Pin ENC_4_Pin */
  GPIO_InitStruct.Pin = ENC_1_Pin|ENC_2_Pin|ENC_3_Pin|ENC_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001700:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001702:	f002 0204 	and.w	r2, r2, #4
 8001706:	9202      	str	r2, [sp, #8]
 8001708:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800170a:	69da      	ldr	r2, [r3, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800170c:	2601      	movs	r6, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800170e:	f042 0201 	orr.w	r2, r2, #1
 8001712:	61da      	str	r2, [r3, #28]
 8001714:	69da      	ldr	r2, [r3, #28]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001716:	2710      	movs	r7, #16
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001718:	f002 0201 	and.w	r2, r2, #1
 800171c:	9203      	str	r2, [sp, #12]
 800171e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001720:	69da      	ldr	r2, [r3, #28]
  htim9.Instance = TIM9;
 8001722:	4d80      	ldr	r5, [pc, #512]	; (8001924 <main+0x24c>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001724:	f042 0202 	orr.w	r2, r2, #2
 8001728:	61da      	str	r2, [r3, #28]
 800172a:	69db      	ldr	r3, [r3, #28]
  HAL_GPIO_WritePin(MOTOR_DIR_GPIO_Port, MOTOR_DIR_Pin, GPIO_PIN_RESET);
 800172c:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800172e:	f003 0302 	and.w	r3, r3, #2
 8001732:	9304      	str	r3, [sp, #16]
 8001734:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(MOTOR_DIR_GPIO_Port, MOTOR_DIR_Pin, GPIO_PIN_RESET);
 8001736:	f7ff f8cf 	bl	80008d8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TOOL_CHANGE_READY_GPIO_Port, TOOL_CHANGE_READY_Pin, GPIO_PIN_RESET);
 800173a:	2200      	movs	r2, #0
 800173c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001740:	4879      	ldr	r0, [pc, #484]	; (8001928 <main+0x250>)
 8001742:	f7ff f8c9 	bl	80008d8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_LOCK_GPIO_Port, LED_LOCK_Pin, GPIO_PIN_RESET);
 8001746:	2200      	movs	r2, #0
 8001748:	2140      	movs	r1, #64	; 0x40
 800174a:	4878      	ldr	r0, [pc, #480]	; (800192c <main+0x254>)
 800174c:	f7ff f8c4 	bl	80008d8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = ENC_1_Pin|ENC_2_Pin|ENC_3_Pin|ENC_4_Pin;
 8001750:	230f      	movs	r3, #15
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001752:	a90b      	add	r1, sp, #44	; 0x2c
 8001754:	4874      	ldr	r0, [pc, #464]	; (8001928 <main+0x250>)
  GPIO_InitStruct.Pin = ENC_1_Pin|ENC_2_Pin|ENC_3_Pin|ENC_4_Pin;
 8001756:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001758:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800175a:	960d      	str	r6, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800175c:	f7fe ffe8 	bl	8000730 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_Pin TOOL_SEL_1_Pin TOOL_SEL_2_Pin TOOL_SEL_3_Pin 
                           TOOL_SEL_4_Pin TOOL_SEL_5_Pin TOOL_SEL_6_Pin TOOL_SEL_7_Pin 
                           TOOL_SEL_8_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin|TOOL_SEL_1_Pin|TOOL_SEL_2_Pin|TOOL_SEL_3_Pin 
 8001760:	f64f 7301 	movw	r3, #65281	; 0xff01
                          |TOOL_SEL_4_Pin|TOOL_SEL_5_Pin|TOOL_SEL_6_Pin|TOOL_SEL_7_Pin 
                          |TOOL_SEL_8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001764:	a90b      	add	r1, sp, #44	; 0x2c
 8001766:	486e      	ldr	r0, [pc, #440]	; (8001920 <main+0x248>)
  GPIO_InitStruct.Pin = BUTTON_Pin|TOOL_SEL_1_Pin|TOOL_SEL_2_Pin|TOOL_SEL_3_Pin 
 8001768:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800176a:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176c:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800176e:	f7fe ffdf 	bl	8000730 <HAL_GPIO_Init>

  /*Configure GPIO pin : MOTOR_DIR_Pin */
  GPIO_InitStruct.Pin = MOTOR_DIR_Pin;
 8001772:	2302      	movs	r3, #2
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(MOTOR_DIR_GPIO_Port, &GPIO_InitStruct);
 8001774:	a90b      	add	r1, sp, #44	; 0x2c
 8001776:	486a      	ldr	r0, [pc, #424]	; (8001920 <main+0x248>)
  GPIO_InitStruct.Pin = MOTOR_DIR_Pin;
 8001778:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800177a:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177c:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177e:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(MOTOR_DIR_GPIO_Port, &GPIO_InitStruct);
 8001780:	f7fe ffd6 	bl	8000730 <HAL_GPIO_Init>

  /*Configure GPIO pin : MOTOR_CURENT_Pin */
  GPIO_InitStruct.Pin = MOTOR_CURENT_Pin;
 8001784:	2308      	movs	r3, #8
 8001786:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001788:	2303      	movs	r3, #3
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800178a:	a90b      	add	r1, sp, #44	; 0x2c
 800178c:	4864      	ldr	r0, [pc, #400]	; (8001920 <main+0x248>)
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800178e:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001790:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001792:	f7fe ffcd 	bl	8000730 <HAL_GPIO_Init>

  /*Configure GPIO pins : TURRET_P1_Pin TURRET_P2_Pin TURRET_P3_Pin TURRET_P4_Pin */
  GPIO_InitStruct.Pin = TURRET_P1_Pin|TURRET_P2_Pin|TURRET_P3_Pin|TURRET_P4_Pin;
 8001796:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800179a:	a90b      	add	r1, sp, #44	; 0x2c
 800179c:	4863      	ldr	r0, [pc, #396]	; (800192c <main+0x254>)
  GPIO_InitStruct.Pin = TURRET_P1_Pin|TURRET_P2_Pin|TURRET_P3_Pin|TURRET_P4_Pin;
 800179e:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017a0:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a2:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017a4:	f7fe ffc4 	bl	8000730 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENABLE_Pin TOOL_CHANGE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin|TOOL_CHANGE_Pin;
 80017a8:	f44f 7320 	mov.w	r3, #640	; 0x280
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017ac:	a90b      	add	r1, sp, #44	; 0x2c
 80017ae:	485e      	ldr	r0, [pc, #376]	; (8001928 <main+0x250>)
  GPIO_InitStruct.Pin = ENABLE_Pin|TOOL_CHANGE_Pin;
 80017b0:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017b2:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b4:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017b6:	f7fe ffbb 	bl	8000730 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOOL_CHANGE_READY_Pin */
  GPIO_InitStruct.Pin = TOOL_CHANGE_READY_Pin;
 80017ba:	f44f 7380 	mov.w	r3, #256	; 0x100
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(TOOL_CHANGE_READY_GPIO_Port, &GPIO_InitStruct);
 80017be:	a90b      	add	r1, sp, #44	; 0x2c
 80017c0:	4859      	ldr	r0, [pc, #356]	; (8001928 <main+0x250>)
  GPIO_InitStruct.Pin = TOOL_CHANGE_READY_Pin;
 80017c2:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017c4:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c6:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c8:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(TOOL_CHANGE_READY_GPIO_Port, &GPIO_InitStruct);
 80017ca:	f7fe ffb1 	bl	8000730 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_LOCK_Pin */
  GPIO_InitStruct.Pin = LED_LOCK_Pin;
 80017ce:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LED_LOCK_GPIO_Port, &GPIO_InitStruct);
 80017d0:	a90b      	add	r1, sp, #44	; 0x2c
 80017d2:	4856      	ldr	r0, [pc, #344]	; (800192c <main+0x254>)
  GPIO_InitStruct.Pin = LED_LOCK_Pin;
 80017d4:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017d6:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d8:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017da:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(LED_LOCK_GPIO_Port, &GPIO_InitStruct);
 80017dc:	f7fe ffa8 	bl	8000730 <HAL_GPIO_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017e0:	463a      	mov	r2, r7
 80017e2:	4621      	mov	r1, r4
 80017e4:	a807      	add	r0, sp, #28
 80017e6:	f000 f9dd 	bl	8001ba4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017ea:	463a      	mov	r2, r7
 80017ec:	4621      	mov	r1, r4
 80017ee:	a80b      	add	r0, sp, #44	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017f0:	9405      	str	r4, [sp, #20]
 80017f2:	9406      	str	r4, [sp, #24]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017f4:	f000 f9d6 	bl	8001ba4 <memset>
  htim9.Instance = TIM9;
 80017f8:	4b4d      	ldr	r3, [pc, #308]	; (8001930 <main+0x258>)
  htim9.Init.Period = 2000-1;
 80017fa:	f240 7bcf 	movw	fp, #1999	; 0x7cf
  htim9.Instance = TIM9;
 80017fe:	602b      	str	r3, [r5, #0]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001800:	f04f 0a80 	mov.w	sl, #128	; 0x80
  htim9.Init.Prescaler = 160-1;
 8001804:	239f      	movs	r3, #159	; 0x9f
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001806:	f44f 5980 	mov.w	r9, #4096	; 0x1000
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 800180a:	4628      	mov	r0, r5
  htim9.Init.Prescaler = 160-1;
 800180c:	606b      	str	r3, [r5, #4]
 800180e:	9301      	str	r3, [sp, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001810:	60ac      	str	r4, [r5, #8]
  htim9.Init.Period = 2000-1;
 8001812:	f8c5 b00c 	str.w	fp, [r5, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001816:	612c      	str	r4, [r5, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001818:	f8c5 a014 	str.w	sl, [r5, #20]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 800181c:	f7ff fc26 	bl	800106c <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001820:	a907      	add	r1, sp, #28
 8001822:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001824:	f8cd 901c 	str.w	r9, [sp, #28]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001828:	f7ff fcf1 	bl	800120e <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 800182c:	4628      	mov	r0, r5
 800182e:	f7ff fc38 	bl	80010a2 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim9, &sMasterConfig) != HAL_OK)
 8001832:	a905      	add	r1, sp, #20
 8001834:	4628      	mov	r0, r5
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001836:	f04f 0804 	mov.w	r8, #4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800183a:	9405      	str	r4, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800183c:	9406      	str	r4, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim9, &sMasterConfig) != HAL_OK)
 800183e:	f7ff fd83 	bl	8001348 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001842:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001844:	4622      	mov	r2, r4
 8001846:	a90b      	add	r1, sp, #44	; 0x2c
 8001848:	4628      	mov	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800184a:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 800184c:	940c      	str	r4, [sp, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800184e:	940d      	str	r4, [sp, #52]	; 0x34
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001850:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001854:	f7ff fc53 	bl	80010fe <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim9);
 8001858:	4628      	mov	r0, r5
 800185a:	f000 f8e9 	bl	8001a30 <HAL_TIM_MspPostInit>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800185e:	463a      	mov	r2, r7
 8001860:	4621      	mov	r1, r4
 8001862:	a807      	add	r0, sp, #28
  htim4.Instance = TIM4;
 8001864:	4d33      	ldr	r5, [pc, #204]	; (8001934 <main+0x25c>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001866:	f000 f99d 	bl	8001ba4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800186a:	4621      	mov	r1, r4
 800186c:	463a      	mov	r2, r7
 800186e:	a80b      	add	r0, sp, #44	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001870:	9405      	str	r4, [sp, #20]
 8001872:	9406      	str	r4, [sp, #24]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001874:	f000 f996 	bl	8001ba4 <memset>
  htim4.Instance = TIM4;
 8001878:	4a2f      	ldr	r2, [pc, #188]	; (8001938 <main+0x260>)
  htim4.Init.Prescaler = 160-1;
 800187a:	9b01      	ldr	r3, [sp, #4]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800187c:	4628      	mov	r0, r5
  htim4.Instance = TIM4;
 800187e:	602a      	str	r2, [r5, #0]
  htim4.Init.Prescaler = 160-1;
 8001880:	606b      	str	r3, [r5, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001882:	60ac      	str	r4, [r5, #8]
  htim4.Init.Period = 2000-1;
 8001884:	f8c5 b00c 	str.w	fp, [r5, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001888:	612c      	str	r4, [r5, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800188a:	f8c5 a014 	str.w	sl, [r5, #20]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800188e:	f7ff fbed 	bl	800106c <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001892:	a907      	add	r1, sp, #28
 8001894:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001896:	f8cd 901c 	str.w	r9, [sp, #28]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800189a:	f7ff fcb8 	bl	800120e <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800189e:	4628      	mov	r0, r5
 80018a0:	f7ff fbff 	bl	80010a2 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80018a4:	a905      	add	r1, sp, #20
 80018a6:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018a8:	9405      	str	r4, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018aa:	9406      	str	r4, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80018ac:	f7ff fd4c 	bl	8001348 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018b0:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80018b2:	4642      	mov	r2, r8
 80018b4:	a90b      	add	r1, sp, #44	; 0x2c
 80018b6:	4628      	mov	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018b8:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 80018ba:	940c      	str	r4, [sp, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018bc:	940d      	str	r4, [sp, #52]	; 0x34
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80018be:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80018c2:	f7ff fc1c 	bl	80010fe <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim4);
 80018c6:	4628      	mov	r0, r5
  hadc.Instance = ADC1;
 80018c8:	4d1c      	ldr	r5, [pc, #112]	; (800193c <main+0x264>)
  HAL_TIM_MspPostInit(&htim4);
 80018ca:	f000 f8b1 	bl	8001a30 <HAL_TIM_MspPostInit>
  hadc.Instance = ADC1;
 80018ce:	4b1c      	ldr	r3, [pc, #112]	; (8001940 <main+0x268>)
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80018d0:	4628      	mov	r0, r5
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80018d2:	e885 0018 	stmia.w	r5, {r3, r4}
  ADC_ChannelConfTypeDef sConfig = {0};
 80018d6:	940b      	str	r4, [sp, #44]	; 0x2c
 80018d8:	940c      	str	r4, [sp, #48]	; 0x30
 80018da:	940d      	str	r4, [sp, #52]	; 0x34
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80018dc:	60ac      	str	r4, [r5, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018de:	60ec      	str	r4, [r5, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80018e0:	612c      	str	r4, [r5, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80018e2:	616c      	str	r4, [r5, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 80018e4:	61ac      	str	r4, [r5, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 80018e6:	61ec      	str	r4, [r5, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 80018e8:	622c      	str	r4, [r5, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 80018ea:	f885 4024 	strb.w	r4, [r5, #36]	; 0x24
  hadc.Init.NbrOfConversion = 1;
 80018ee:	62ae      	str	r6, [r5, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80018f0:	f885 402c 	strb.w	r4, [r5, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80018f4:	636f      	str	r7, [r5, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80018f6:	63ac      	str	r4, [r5, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 80018f8:	f885 403c 	strb.w	r4, [r5, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80018fc:	f7fe fc86 	bl	800020c <HAL_ADC_Init>
  sConfig.Channel = ADC_CHANNEL_3;
 8001900:	2303      	movs	r3, #3
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001902:	a90b      	add	r1, sp, #44	; 0x2c
 8001904:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_3;
 8001906:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001908:	960c      	str	r6, [sp, #48]	; 0x30
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 800190a:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800190c:	f7fe fd96 	bl	800043c <HAL_ADC_ConfigChannel>
  InitApp();
 8001910:	f7ff fe7e 	bl	8001610 <InitApp>
	  MainLoop();
 8001914:	f7ff fe90 	bl	8001638 <MainLoop>
 8001918:	e7fc      	b.n	8001914 <main+0x23c>
 800191a:	bf00      	nop
 800191c:	40023800 	.word	0x40023800
 8001920:	40020000 	.word	0x40020000
 8001924:	2000006c 	.word	0x2000006c
 8001928:	40020800 	.word	0x40020800
 800192c:	40020400 	.word	0x40020400
 8001930:	40010800 	.word	0x40010800
 8001934:	2000002c 	.word	0x2000002c
 8001938:	40000800 	.word	0x40000800
 800193c:	200000a8 	.word	0x200000a8
 8001940:	40012400 	.word	0x40012400

08001944 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8001944:	4b0f      	ldr	r3, [pc, #60]	; (8001984 <HAL_MspInit+0x40>)
{
 8001946:	b084      	sub	sp, #16
  __HAL_RCC_COMP_CLK_ENABLE();
 8001948:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800194a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800194e:	625a      	str	r2, [r3, #36]	; 0x24
 8001950:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001952:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001956:	9201      	str	r2, [sp, #4]
 8001958:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800195a:	6a1a      	ldr	r2, [r3, #32]
 800195c:	f042 0201 	orr.w	r2, r2, #1
 8001960:	621a      	str	r2, [r3, #32]
 8001962:	6a1a      	ldr	r2, [r3, #32]
 8001964:	f002 0201 	and.w	r2, r2, #1
 8001968:	9202      	str	r2, [sp, #8]
 800196a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800196c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800196e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001972:	625a      	str	r2, [r3, #36]	; 0x24
 8001974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001976:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800197a:	9303      	str	r3, [sp, #12]
 800197c:	9b03      	ldr	r3, [sp, #12]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800197e:	b004      	add	sp, #16
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	40023800 	.word	0x40023800

08001988 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001988:	b510      	push	{r4, lr}
 800198a:	4604      	mov	r4, r0
 800198c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800198e:	2214      	movs	r2, #20
 8001990:	2100      	movs	r1, #0
 8001992:	a803      	add	r0, sp, #12
 8001994:	f000 f906 	bl	8001ba4 <memset>
  if(hadc->Instance==ADC1)
 8001998:	6822      	ldr	r2, [r4, #0]
 800199a:	4b10      	ldr	r3, [pc, #64]	; (80019dc <HAL_ADC_MspInit+0x54>)
 800199c:	429a      	cmp	r2, r3
 800199e:	d11b      	bne.n	80019d8 <HAL_ADC_MspInit+0x50>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80019a0:	f503 338a 	add.w	r3, r3, #70656	; 0x11400
 80019a4:	6a1a      	ldr	r2, [r3, #32]
    PA3     ------> ADC_IN3 
    */
    GPIO_InitStruct.Pin = MOTOR_CURENT_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(MOTOR_CURENT_GPIO_Port, &GPIO_InitStruct);
 80019a6:	a903      	add	r1, sp, #12
    __HAL_RCC_ADC1_CLK_ENABLE();
 80019a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019ac:	621a      	str	r2, [r3, #32]
 80019ae:	6a1a      	ldr	r2, [r3, #32]
    HAL_GPIO_Init(MOTOR_CURENT_GPIO_Port, &GPIO_InitStruct);
 80019b0:	480b      	ldr	r0, [pc, #44]	; (80019e0 <HAL_ADC_MspInit+0x58>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 80019b2:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80019b6:	9201      	str	r2, [sp, #4]
 80019b8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ba:	69da      	ldr	r2, [r3, #28]
 80019bc:	f042 0201 	orr.w	r2, r2, #1
 80019c0:	61da      	str	r2, [r3, #28]
 80019c2:	69db      	ldr	r3, [r3, #28]
 80019c4:	f003 0301 	and.w	r3, r3, #1
 80019c8:	9302      	str	r3, [sp, #8]
 80019ca:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = MOTOR_CURENT_Pin;
 80019cc:	2308      	movs	r3, #8
 80019ce:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019d0:	2303      	movs	r3, #3
 80019d2:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(MOTOR_CURENT_GPIO_Port, &GPIO_InitStruct);
 80019d4:	f7fe feac 	bl	8000730 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80019d8:	b008      	add	sp, #32
 80019da:	bd10      	pop	{r4, pc}
 80019dc:	40012400 	.word	0x40012400
 80019e0:	40020000 	.word	0x40020000

080019e4 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM4)
 80019e4:	6803      	ldr	r3, [r0, #0]
 80019e6:	4a0f      	ldr	r2, [pc, #60]	; (8001a24 <HAL_TIM_Base_MspInit+0x40>)
{
 80019e8:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM4)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d10b      	bne.n	8001a06 <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80019ee:	4b0e      	ldr	r3, [pc, #56]	; (8001a28 <HAL_TIM_Base_MspInit+0x44>)
 80019f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019f2:	f042 0204 	orr.w	r2, r2, #4
 80019f6:	625a      	str	r2, [r3, #36]	; 0x24
 80019f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019fa:	f003 0304 	and.w	r3, r3, #4
 80019fe:	9300      	str	r3, [sp, #0]
 8001a00:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8001a02:	b002      	add	sp, #8
 8001a04:	4770      	bx	lr
  else if(htim_base->Instance==TIM9)
 8001a06:	4a09      	ldr	r2, [pc, #36]	; (8001a2c <HAL_TIM_Base_MspInit+0x48>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d1fa      	bne.n	8001a02 <HAL_TIM_Base_MspInit+0x1e>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001a0c:	4b06      	ldr	r3, [pc, #24]	; (8001a28 <HAL_TIM_Base_MspInit+0x44>)
 8001a0e:	6a1a      	ldr	r2, [r3, #32]
 8001a10:	f042 0204 	orr.w	r2, r2, #4
 8001a14:	621a      	str	r2, [r3, #32]
 8001a16:	6a1b      	ldr	r3, [r3, #32]
 8001a18:	f003 0304 	and.w	r3, r3, #4
 8001a1c:	9301      	str	r3, [sp, #4]
 8001a1e:	9b01      	ldr	r3, [sp, #4]
}
 8001a20:	e7ef      	b.n	8001a02 <HAL_TIM_Base_MspInit+0x1e>
 8001a22:	bf00      	nop
 8001a24:	40000800 	.word	0x40000800
 8001a28:	40023800 	.word	0x40023800
 8001a2c:	40010800 	.word	0x40010800

08001a30 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a30:	b510      	push	{r4, lr}
 8001a32:	4604      	mov	r4, r0
 8001a34:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a36:	2214      	movs	r2, #20
 8001a38:	2100      	movs	r1, #0
 8001a3a:	a803      	add	r0, sp, #12
 8001a3c:	f000 f8b2 	bl	8001ba4 <memset>
  if(htim->Instance==TIM4)
 8001a40:	6823      	ldr	r3, [r4, #0]
 8001a42:	4a17      	ldr	r2, [pc, #92]	; (8001aa0 <HAL_TIM_MspPostInit+0x70>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d114      	bne.n	8001a72 <HAL_TIM_MspPostInit+0x42>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a48:	4b16      	ldr	r3, [pc, #88]	; (8001aa4 <HAL_TIM_MspPostInit+0x74>)
    GPIO_InitStruct.Pin = LED_PWM_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
    HAL_GPIO_Init(LED_PWM_GPIO_Port, &GPIO_InitStruct);
 8001a4a:	4817      	ldr	r0, [pc, #92]	; (8001aa8 <HAL_TIM_MspPostInit+0x78>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a4c:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(LED_PWM_GPIO_Port, &GPIO_InitStruct);
 8001a4e:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a50:	f042 0202 	orr.w	r2, r2, #2
 8001a54:	61da      	str	r2, [r3, #28]
 8001a56:	69db      	ldr	r3, [r3, #28]
 8001a58:	f003 0302 	and.w	r3, r3, #2
 8001a5c:	9301      	str	r3, [sp, #4]
 8001a5e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = LED_PWM_Pin;
 8001a60:	2380      	movs	r3, #128	; 0x80
 8001a62:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a64:	2302      	movs	r3, #2
 8001a66:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001a68:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pin = MOTOR_PWM_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
    HAL_GPIO_Init(MOTOR_PWM_GPIO_Port, &GPIO_InitStruct);
 8001a6a:	f7fe fe61 	bl	8000730 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8001a6e:	b008      	add	sp, #32
 8001a70:	bd10      	pop	{r4, pc}
  else if(htim->Instance==TIM9)
 8001a72:	4a0e      	ldr	r2, [pc, #56]	; (8001aac <HAL_TIM_MspPostInit+0x7c>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d1fa      	bne.n	8001a6e <HAL_TIM_MspPostInit+0x3e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a78:	4b0a      	ldr	r3, [pc, #40]	; (8001aa4 <HAL_TIM_MspPostInit+0x74>)
    HAL_GPIO_Init(MOTOR_PWM_GPIO_Port, &GPIO_InitStruct);
 8001a7a:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a7c:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(MOTOR_PWM_GPIO_Port, &GPIO_InitStruct);
 8001a7e:	480c      	ldr	r0, [pc, #48]	; (8001ab0 <HAL_TIM_MspPostInit+0x80>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a80:	f042 0201 	orr.w	r2, r2, #1
 8001a84:	61da      	str	r2, [r3, #28]
 8001a86:	69db      	ldr	r3, [r3, #28]
 8001a88:	f003 0301 	and.w	r3, r3, #1
 8001a8c:	9302      	str	r3, [sp, #8]
 8001a8e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = MOTOR_PWM_Pin;
 8001a90:	2304      	movs	r3, #4
 8001a92:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a94:	2302      	movs	r3, #2
 8001a96:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	9307      	str	r3, [sp, #28]
 8001a9c:	e7e5      	b.n	8001a6a <HAL_TIM_MspPostInit+0x3a>
 8001a9e:	bf00      	nop
 8001aa0:	40000800 	.word	0x40000800
 8001aa4:	40023800 	.word	0x40023800
 8001aa8:	40020400 	.word	0x40020400
 8001aac:	40010800 	.word	0x40010800
 8001ab0:	40020000 	.word	0x40020000

08001ab4 <NMI_Handler>:
 8001ab4:	4770      	bx	lr

08001ab6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ab6:	e7fe      	b.n	8001ab6 <HardFault_Handler>

08001ab8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ab8:	e7fe      	b.n	8001ab8 <MemManage_Handler>

08001aba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001aba:	e7fe      	b.n	8001aba <BusFault_Handler>

08001abc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001abc:	e7fe      	b.n	8001abc <UsageFault_Handler>

08001abe <SVC_Handler>:
 8001abe:	4770      	bx	lr

08001ac0 <DebugMon_Handler>:
 8001ac0:	4770      	bx	lr

08001ac2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ac2:	4770      	bx	lr

08001ac4 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ac4:	f7fe bb90 	b.w	80001e8 <HAL_IncTick>

08001ac8 <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8001ac8:	4b0e      	ldr	r3, [pc, #56]	; (8001b04 <SystemInit+0x3c>)
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ad0:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 8001ad2:	6899      	ldr	r1, [r3, #8]
 8001ad4:	4a0c      	ldr	r2, [pc, #48]	; (8001b08 <SystemInit+0x40>)
 8001ad6:	400a      	ands	r2, r1
 8001ad8:	609a      	str	r2, [r3, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	f022 5288 	bic.w	r2, r2, #285212672	; 0x11000000
 8001ae0:	f022 1201 	bic.w	r2, r2, #65537	; 0x10001
 8001ae4:	601a      	str	r2, [r3, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001aec:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 8001aee:	689a      	ldr	r2, [r3, #8]
 8001af0:	f422 027d 	bic.w	r2, r2, #16580608	; 0xfd0000
 8001af4:	609a      	str	r2, [r3, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001af6:	2200      	movs	r2, #0
 8001af8:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001afa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001afe:	4b03      	ldr	r3, [pc, #12]	; (8001b0c <SystemInit+0x44>)
 8001b00:	609a      	str	r2, [r3, #8]
 8001b02:	4770      	bx	lr
 8001b04:	40023800 	.word	0x40023800
 8001b08:	88ffc00c 	.word	0x88ffc00c
 8001b0c:	e000ed00 	.word	0xe000ed00

08001b10 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001b10:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001b12:	e003      	b.n	8001b1c <LoopCopyDataInit>

08001b14 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001b14:	4b0b      	ldr	r3, [pc, #44]	; (8001b44 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001b16:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001b18:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001b1a:	3104      	adds	r1, #4

08001b1c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001b1c:	480a      	ldr	r0, [pc, #40]	; (8001b48 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001b1e:	4b0b      	ldr	r3, [pc, #44]	; (8001b4c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001b20:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001b22:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001b24:	d3f6      	bcc.n	8001b14 <CopyDataInit>
  ldr r2, =_sbss
 8001b26:	4a0a      	ldr	r2, [pc, #40]	; (8001b50 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001b28:	e002      	b.n	8001b30 <LoopFillZerobss>

08001b2a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001b2a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001b2c:	f842 3b04 	str.w	r3, [r2], #4

08001b30 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001b30:	4b08      	ldr	r3, [pc, #32]	; (8001b54 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001b32:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001b34:	d3f9      	bcc.n	8001b2a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001b36:	f7ff ffc7 	bl	8001ac8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b3a:	f000 f80f 	bl	8001b5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b3e:	f7ff fdcb 	bl	80016d8 <main>
  bx lr
 8001b42:	4770      	bx	lr
  ldr r3, =_sidata
 8001b44:	08001bf0 	.word	0x08001bf0
  ldr r0, =_sdata
 8001b48:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001b4c:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8001b50:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8001b54:	200000fc 	.word	0x200000fc

08001b58 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b58:	e7fe      	b.n	8001b58 <ADC1_IRQHandler>
	...

08001b5c <__libc_init_array>:
 8001b5c:	b570      	push	{r4, r5, r6, lr}
 8001b5e:	2500      	movs	r5, #0
 8001b60:	4e0c      	ldr	r6, [pc, #48]	; (8001b94 <__libc_init_array+0x38>)
 8001b62:	4c0d      	ldr	r4, [pc, #52]	; (8001b98 <__libc_init_array+0x3c>)
 8001b64:	1ba4      	subs	r4, r4, r6
 8001b66:	10a4      	asrs	r4, r4, #2
 8001b68:	42a5      	cmp	r5, r4
 8001b6a:	d109      	bne.n	8001b80 <__libc_init_array+0x24>
 8001b6c:	f000 f822 	bl	8001bb4 <_init>
 8001b70:	2500      	movs	r5, #0
 8001b72:	4e0a      	ldr	r6, [pc, #40]	; (8001b9c <__libc_init_array+0x40>)
 8001b74:	4c0a      	ldr	r4, [pc, #40]	; (8001ba0 <__libc_init_array+0x44>)
 8001b76:	1ba4      	subs	r4, r4, r6
 8001b78:	10a4      	asrs	r4, r4, #2
 8001b7a:	42a5      	cmp	r5, r4
 8001b7c:	d105      	bne.n	8001b8a <__libc_init_array+0x2e>
 8001b7e:	bd70      	pop	{r4, r5, r6, pc}
 8001b80:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001b84:	4798      	blx	r3
 8001b86:	3501      	adds	r5, #1
 8001b88:	e7ee      	b.n	8001b68 <__libc_init_array+0xc>
 8001b8a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001b8e:	4798      	blx	r3
 8001b90:	3501      	adds	r5, #1
 8001b92:	e7f2      	b.n	8001b7a <__libc_init_array+0x1e>
 8001b94:	08001be8 	.word	0x08001be8
 8001b98:	08001be8 	.word	0x08001be8
 8001b9c:	08001be8 	.word	0x08001be8
 8001ba0:	08001bec 	.word	0x08001bec

08001ba4 <memset>:
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	4402      	add	r2, r0
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d100      	bne.n	8001bae <memset+0xa>
 8001bac:	4770      	bx	lr
 8001bae:	f803 1b01 	strb.w	r1, [r3], #1
 8001bb2:	e7f9      	b.n	8001ba8 <memset+0x4>

08001bb4 <_init>:
 8001bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bb6:	bf00      	nop
 8001bb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bba:	bc08      	pop	{r3}
 8001bbc:	469e      	mov	lr, r3
 8001bbe:	4770      	bx	lr

08001bc0 <_fini>:
 8001bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bc2:	bf00      	nop
 8001bc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bc6:	bc08      	pop	{r3}
 8001bc8:	469e      	mov	lr, r3
 8001bca:	4770      	bx	lr
