
ToolChanger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001df4  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08001f30  08001f30  00011f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001f4c  08001f4c  00011f4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001f50  08001f50  00011f50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08001f54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000f4  2000000c  08001f60  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000100  08001f60  00020100  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000aeeb  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000187a  00000000  00000000  0002af20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000052f7  00000000  00000000  0002c79a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000008f8  00000000  00000000  00031a98  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000008a8  00000000  00000000  00032390  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00003ccc  00000000  00000000  00032c38  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002c08  00000000  00000000  00036904  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003950c  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001728  00000000  00000000  00039588  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000000c 	.word	0x2000000c
 8000158:	00000000 	.word	0x00000000
 800015c:	08001f18 	.word	0x08001f18

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000010 	.word	0x20000010
 8000178:	08001f18 	.word	0x08001f18

0800017c <HAL_InitTick>:
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 800017c:	4b10      	ldr	r3, [pc, #64]	; (80001c0 <HAL_InitTick+0x44>)
 800017e:	681b      	ldr	r3, [r3, #0]
 8000180:	b90b      	cbnz	r3, 8000186 <HAL_InitTick+0xa>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8000182:	2001      	movs	r0, #1
 8000184:	4770      	bx	lr
{
 8000186:	b510      	push	{r4, lr}
 8000188:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800018a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800018e:	fbb0 f3f3 	udiv	r3, r0, r3
 8000192:	4a0c      	ldr	r2, [pc, #48]	; (80001c4 <HAL_InitTick+0x48>)
 8000194:	6810      	ldr	r0, [r2, #0]
 8000196:	fbb0 f0f3 	udiv	r0, r0, r3
 800019a:	f000 fb0d 	bl	80007b8 <HAL_SYSTICK_Config>
 800019e:	b968      	cbnz	r0, 80001bc <HAL_InitTick+0x40>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001a0:	2c0f      	cmp	r4, #15
 80001a2:	d901      	bls.n	80001a8 <HAL_InitTick+0x2c>
        status = HAL_ERROR;
 80001a4:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 80001a6:	bd10      	pop	{r4, pc}
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001a8:	2200      	movs	r2, #0
 80001aa:	4621      	mov	r1, r4
 80001ac:	f04f 30ff 	mov.w	r0, #4294967295
 80001b0:	f000 fad0 	bl	8000754 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <HAL_InitTick+0x4c>)
 80001b6:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 80001b8:	2000      	movs	r0, #0
 80001ba:	bd10      	pop	{r4, pc}
      status = HAL_ERROR;
 80001bc:	2001      	movs	r0, #1
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	20000008 	.word	0x20000008
 80001c8:	20000004 	.word	0x20000004

080001cc <HAL_Init>:
{
 80001cc:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001ce:	2003      	movs	r0, #3
 80001d0:	f000 faae 	bl	8000730 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80001d4:	2000      	movs	r0, #0
 80001d6:	f7ff ffd1 	bl	800017c <HAL_InitTick>
 80001da:	b110      	cbz	r0, 80001e2 <HAL_Init+0x16>
    status = HAL_ERROR;
 80001dc:	2401      	movs	r4, #1
}
 80001de:	4620      	mov	r0, r4
 80001e0:	bd10      	pop	{r4, pc}
 80001e2:	4604      	mov	r4, r0
    HAL_MspInit();
 80001e4:	f001 fd58 	bl	8001c98 <HAL_MspInit>
 80001e8:	e7f9      	b.n	80001de <HAL_Init+0x12>
	...

080001ec <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001ec:	4a03      	ldr	r2, [pc, #12]	; (80001fc <HAL_IncTick+0x10>)
 80001ee:	6813      	ldr	r3, [r2, #0]
 80001f0:	4903      	ldr	r1, [pc, #12]	; (8000200 <HAL_IncTick+0x14>)
 80001f2:	6809      	ldr	r1, [r1, #0]
 80001f4:	440b      	add	r3, r1
 80001f6:	6013      	str	r3, [r2, #0]
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	20000028 	.word	0x20000028
 8000200:	20000000 	.word	0x20000000

08000204 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000204:	4b01      	ldr	r3, [pc, #4]	; (800020c <HAL_GetTick+0x8>)
 8000206:	6818      	ldr	r0, [r3, #0]
}
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	20000028 	.word	0x20000028

08000210 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000210:	b538      	push	{r3, r4, r5, lr}
 8000212:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000214:	f7ff fff6 	bl	8000204 <HAL_GetTick>
 8000218:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800021a:	f1b4 3fff 	cmp.w	r4, #4294967295
 800021e:	d002      	beq.n	8000226 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000220:	4b04      	ldr	r3, [pc, #16]	; (8000234 <HAL_Delay+0x24>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000226:	f7ff ffed 	bl	8000204 <HAL_GetTick>
 800022a:	1b40      	subs	r0, r0, r5
 800022c:	4284      	cmp	r4, r0
 800022e:	d8fa      	bhi.n	8000226 <HAL_Delay+0x16>
  {
  }
}
 8000230:	bd38      	pop	{r3, r4, r5, pc}
 8000232:	bf00      	nop
 8000234:	20000000 	.word	0x20000000

08000238 <HAL_ADC_Init>:
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cr1 = 0;
  uint32_t tmp_cr2 = 0;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000238:	2800      	cmp	r0, #0
 800023a:	f000 80be 	beq.w	80003ba <HAL_ADC_Init+0x182>
{
 800023e:	b570      	push	{r4, r5, r6, lr}
 8000240:	b082      	sub	sp, #8
 8000242:	4604      	mov	r4, r0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000244:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8000246:	2b00      	cmp	r3, #0
 8000248:	d071      	beq.n	800032e <HAL_ADC_Init+0xf6>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800024a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800024c:	f013 0f10 	tst.w	r3, #16
 8000250:	f040 80b5 	bne.w	80003be <HAL_ADC_Init+0x186>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000254:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000256:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800025a:	f023 0302 	bic.w	r3, r3, #2
 800025e:	f043 0302 	orr.w	r3, r3, #2
 8000262:	64e3      	str	r3, [r4, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 8000264:	4a57      	ldr	r2, [pc, #348]	; (80003c4 <HAL_ADC_Init+0x18c>)
 8000266:	6853      	ldr	r3, [r2, #4]
 8000268:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800026c:	6861      	ldr	r1, [r4, #4]
 800026e:	430b      	orrs	r3, r1
 8000270:	6053      	str	r3, [r2, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8000272:	68e3      	ldr	r3, [r4, #12]
                hadc->Init.EOCSelection                                        |
 8000274:	6962      	ldr	r2, [r4, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8000276:	4313      	orrs	r3, r2
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000278:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800027c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000280:	fa92 f2a2 	rbit	r2, r2
 8000284:	fab2 f282 	clz	r2, r2
 8000288:	fa01 f202 	lsl.w	r2, r1, r2
                hadc->Init.EOCSelection                                        |
 800028c:	4313      	orrs	r3, r2
                hadc->Init.ChannelsBank                                        |
 800028e:	6a22      	ldr	r2, [r4, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000290:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 8000292:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 8000296:	2302      	movs	r3, #2
 8000298:	fa93 f3a3 	rbit	r3, r3
 800029c:	fab3 f383 	clz	r3, r3
 80002a0:	fa00 f303 	lsl.w	r3, r0, r3
                hadc->Init.ChannelsBank                                        |
 80002a4:	4313      	orrs	r3, r2
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80002a6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80002a8:	2a10      	cmp	r2, #16
 80002aa:	d002      	beq.n	80002b2 <HAL_ADC_Init+0x7a>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
                  hadc->Init.ExternalTrigConvEdge );
 80002ac:	6ba1      	ldr	r1, [r4, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 80002ae:	430a      	orrs	r2, r1
 80002b0:	4313      	orrs	r3, r2
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 80002b2:	6821      	ldr	r1, [r4, #0]
 80002b4:	680a      	ldr	r2, [r1, #0]
 80002b6:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 80002ba:	d114      	bne.n	80002e6 <HAL_ADC_Init+0xae>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 80002bc:	69a5      	ldr	r5, [r4, #24]
 80002be:	432b      	orrs	r3, r5
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80002c0:	68a5      	ldr	r5, [r4, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 80002c2:	69e6      	ldr	r6, [r4, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80002c4:	4335      	orrs	r5, r6
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 80002c6:	6926      	ldr	r6, [r4, #16]
 80002c8:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 80002cc:	d042      	beq.n	8000354 <HAL_ADC_Init+0x11c>
 80002ce:	2e01      	cmp	r6, #1
 80002d0:	d03d      	beq.n	800034e <HAL_ADC_Init+0x116>
                  hadc->Init.LowPowerAutoPowerOff           |
 80002d2:	432a      	orrs	r2, r5
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80002d4:	f894 502c 	ldrb.w	r5, [r4, #44]	; 0x2c
 80002d8:	2d01      	cmp	r5, #1
 80002da:	d03e      	beq.n	800035a <HAL_ADC_Init+0x122>
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 80002dc:	684d      	ldr	r5, [r1, #4]
 80002de:	483a      	ldr	r0, [pc, #232]	; (80003c8 <HAL_ADC_Init+0x190>)
 80002e0:	4028      	ands	r0, r5
 80002e2:	4302      	orrs	r2, r0
 80002e4:	604a      	str	r2, [r1, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 80002e6:	6821      	ldr	r1, [r4, #0]
 80002e8:	6888      	ldr	r0, [r1, #8]
 80002ea:	4a38      	ldr	r2, [pc, #224]	; (80003cc <HAL_ADC_Init+0x194>)
 80002ec:	4002      	ands	r2, r0
 80002ee:	431a      	orrs	r2, r3
 80002f0:	608a      	str	r2, [r1, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80002f2:	6922      	ldr	r2, [r4, #16]
 80002f4:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80002f8:	d046      	beq.n	8000388 <HAL_ADC_Init+0x150>
 80002fa:	2a01      	cmp	r2, #1
 80002fc:	d044      	beq.n	8000388 <HAL_ADC_Init+0x150>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80002fe:	6821      	ldr	r1, [r4, #0]
 8000300:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8000302:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 8000306:	630a      	str	r2, [r1, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 8000308:	6822      	ldr	r2, [r4, #0]
 800030a:	6891      	ldr	r1, [r2, #8]
 800030c:	4a30      	ldr	r2, [pc, #192]	; (80003d0 <HAL_ADC_Init+0x198>)
 800030e:	400a      	ands	r2, r1
 8000310:	4293      	cmp	r3, r2
 8000312:	d049      	beq.n	80003a8 <HAL_ADC_Init+0x170>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000314:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000316:	f023 0312 	bic.w	r3, r3, #18
 800031a:	f043 0310 	orr.w	r3, r3, #16
 800031e:	64e3      	str	r3, [r4, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000320:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000322:	f043 0301 	orr.w	r3, r3, #1
 8000326:	6523      	str	r3, [r4, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 8000328:	2001      	movs	r0, #1
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 800032a:	b002      	add	sp, #8
 800032c:	bd70      	pop	{r4, r5, r6, pc}
    ADC_CLEAR_ERRORCODE(hadc);
 800032e:	6503      	str	r3, [r0, #80]	; 0x50
    hadc->Lock = HAL_UNLOCKED;
 8000330:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000334:	4b27      	ldr	r3, [pc, #156]	; (80003d4 <HAL_ADC_Init+0x19c>)
 8000336:	6a1a      	ldr	r2, [r3, #32]
 8000338:	f042 0201 	orr.w	r2, r2, #1
 800033c:	621a      	str	r2, [r3, #32]
 800033e:	6a1b      	ldr	r3, [r3, #32]
 8000340:	f003 0301 	and.w	r3, r3, #1
 8000344:	9301      	str	r3, [sp, #4]
 8000346:	9b01      	ldr	r3, [sp, #4]
    HAL_ADC_MspInit(hadc);
 8000348:	f001 fcc8 	bl	8001cdc <HAL_ADC_MspInit>
 800034c:	e77d      	b.n	800024a <HAL_ADC_Init+0x12>
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 800034e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000352:	e7be      	b.n	80002d2 <HAL_ADC_Init+0x9a>
 8000354:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000358:	e7bb      	b.n	80002d2 <HAL_ADC_Init+0x9a>
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800035a:	b960      	cbnz	r0, 8000376 <HAL_ADC_Init+0x13e>
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800035c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800035e:	3801      	subs	r0, #1
 8000360:	f44f 4560 	mov.w	r5, #57344	; 0xe000
 8000364:	fa95 f5a5 	rbit	r5, r5
 8000368:	fab5 f585 	clz	r5, r5
 800036c:	40a8      	lsls	r0, r5
 800036e:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
 8000372:	4302      	orrs	r2, r0
 8000374:	e7b2      	b.n	80002dc <HAL_ADC_Init+0xa4>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000376:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8000378:	f040 0020 	orr.w	r0, r0, #32
 800037c:	64e0      	str	r0, [r4, #76]	; 0x4c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800037e:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8000380:	f040 0001 	orr.w	r0, r0, #1
 8000384:	6520      	str	r0, [r4, #80]	; 0x50
 8000386:	e7a9      	b.n	80002dc <HAL_ADC_Init+0xa4>
      MODIFY_REG(hadc->Instance->SQR1                         ,
 8000388:	6825      	ldr	r5, [r4, #0]
 800038a:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800038c:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 8000390:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000392:	3901      	subs	r1, #1
 8000394:	f04f 70f8 	mov.w	r0, #32505856	; 0x1f00000
 8000398:	fa90 f0a0 	rbit	r0, r0
 800039c:	fab0 f080 	clz	r0, r0
 80003a0:	4081      	lsls	r1, r0
 80003a2:	430a      	orrs	r2, r1
 80003a4:	632a      	str	r2, [r5, #48]	; 0x30
 80003a6:	e7af      	b.n	8000308 <HAL_ADC_Init+0xd0>
      ADC_CLEAR_ERRORCODE(hadc);
 80003a8:	2000      	movs	r0, #0
 80003aa:	6520      	str	r0, [r4, #80]	; 0x50
      ADC_STATE_CLR_SET(hadc->State,
 80003ac:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80003ae:	f023 0303 	bic.w	r3, r3, #3
 80003b2:	f043 0301 	orr.w	r3, r3, #1
 80003b6:	64e3      	str	r3, [r4, #76]	; 0x4c
 80003b8:	e7b7      	b.n	800032a <HAL_ADC_Init+0xf2>
    return HAL_ERROR;
 80003ba:	2001      	movs	r0, #1
 80003bc:	4770      	bx	lr
    tmp_hal_status = HAL_ERROR;
 80003be:	2001      	movs	r0, #1
 80003c0:	e7b3      	b.n	800032a <HAL_ADC_Init+0xf2>
 80003c2:	bf00      	nop
 80003c4:	40012700 	.word	0x40012700
 80003c8:	fcfc16ff 	.word	0xfcfc16ff
 80003cc:	c0fff18d 	.word	0xc0fff18d
 80003d0:	bf80fffe 	.word	0xbf80fffe
 80003d4:	40023800 	.word	0x40023800

080003d8 <HAL_ADC_PollForConversion>:
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and and polling for end of each conversion. */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80003d8:	6803      	ldr	r3, [r0, #0]
 80003da:	689a      	ldr	r2, [r3, #8]
 80003dc:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80003e0:	d003      	beq.n	80003ea <HAL_ADC_PollForConversion+0x12>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80003e2:	689b      	ldr	r3, [r3, #8]
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80003e4:	f413 7f80 	tst.w	r3, #256	; 0x100
 80003e8:	d11c      	bne.n	8000424 <HAL_ADC_PollForConversion+0x4c>
{
 80003ea:	b570      	push	{r4, r5, r6, lr}
 80003ec:	460d      	mov	r5, r1
 80003ee:	4604      	mov	r4, r0
    
    return HAL_ERROR;
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80003f0:	f7ff ff08 	bl	8000204 <HAL_GetTick>
 80003f4:	4606      	mov	r6, r0
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80003f6:	6823      	ldr	r3, [r4, #0]
 80003f8:	681a      	ldr	r2, [r3, #0]
 80003fa:	f012 0f02 	tst.w	r2, #2
 80003fe:	d11a      	bne.n	8000436 <HAL_ADC_PollForConversion+0x5e>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8000400:	f1b5 3fff 	cmp.w	r5, #4294967295
 8000404:	d0f7      	beq.n	80003f6 <HAL_ADC_PollForConversion+0x1e>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000406:	b125      	cbz	r5, 8000412 <HAL_ADC_PollForConversion+0x3a>
 8000408:	f7ff fefc 	bl	8000204 <HAL_GetTick>
 800040c:	1b80      	subs	r0, r0, r6
 800040e:	4285      	cmp	r5, r0
 8000410:	d2f1      	bcs.n	80003f6 <HAL_ADC_PollForConversion+0x1e>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000412:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000414:	f043 0304 	orr.w	r3, r3, #4
 8000418:	64e3      	str	r3, [r4, #76]	; 0x4c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800041a:	2300      	movs	r3, #0
 800041c:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
        
        return HAL_TIMEOUT;
 8000420:	2003      	movs	r0, #3
 8000422:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000424:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8000426:	f043 0320 	orr.w	r3, r3, #32
 800042a:	64c3      	str	r3, [r0, #76]	; 0x4c
    __HAL_UNLOCK(hadc);
 800042c:	2300      	movs	r3, #0
 800042e:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
    return HAL_ERROR;
 8000432:	2001      	movs	r0, #1
 8000434:	4770      	bx	lr
  }
  
  /* Clear end of conversion flag of regular group if low power feature     */
  /* "Auto Wait" is disabled, to not interfere with this feature until data */
  /* register is read using function HAL_ADC_GetValue().                    */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8000436:	69a2      	ldr	r2, [r4, #24]
 8000438:	b912      	cbnz	r2, 8000440 <HAL_ADC_PollForConversion+0x68>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800043a:	f06f 0212 	mvn.w	r2, #18
 800043e:	601a      	str	r2, [r3, #0]
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000440:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000442:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000446:	64e3      	str	r3, [r4, #76]	; 0x4c
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32L1, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000448:	6823      	ldr	r3, [r4, #0]
 800044a:	689a      	ldr	r2, [r3, #8]
 800044c:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8000450:	d118      	bne.n	8000484 <HAL_ADC_PollForConversion+0xac>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000452:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000456:	b9ba      	cbnz	r2, 8000488 <HAL_ADC_PollForConversion+0xb0>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000458:	6b1a      	ldr	r2, [r3, #48]	; 0x30
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800045a:	f012 7ff8 	tst.w	r2, #32505856	; 0x1f00000
 800045e:	d003      	beq.n	8000468 <HAL_ADC_PollForConversion+0x90>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000460:	689b      	ldr	r3, [r3, #8]
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000462:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8000466:	d111      	bne.n	800048c <HAL_ADC_PollForConversion+0xb4>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000468:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800046a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800046e:	64e3      	str	r3, [r4, #76]	; 0x4c
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000470:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000472:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8000476:	d10b      	bne.n	8000490 <HAL_ADC_PollForConversion+0xb8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000478:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800047a:	f043 0301 	orr.w	r3, r3, #1
 800047e:	64e3      	str	r3, [r4, #76]	; 0x4c
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000480:	2000      	movs	r0, #0
 8000482:	bd70      	pop	{r4, r5, r6, pc}
 8000484:	2000      	movs	r0, #0
 8000486:	bd70      	pop	{r4, r5, r6, pc}
 8000488:	2000      	movs	r0, #0
 800048a:	bd70      	pop	{r4, r5, r6, pc}
 800048c:	2000      	movs	r0, #0
 800048e:	bd70      	pop	{r4, r5, r6, pc}
 8000490:	2000      	movs	r0, #0
}
 8000492:	bd70      	pop	{r4, r5, r6, pc}

08000494 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000494:	6803      	ldr	r3, [r0, #0]
 8000496:	6d98      	ldr	r0, [r3, #88]	; 0x58
}
 8000498:	4770      	bx	lr
	...

0800049c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800049c:	b430      	push	{r4, r5}
 800049e:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0;
 80004a0:	2300      	movs	r3, #0
 80004a2:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80004a4:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 80004a8:	2b01      	cmp	r3, #1
 80004aa:	f000 80b9 	beq.w	8000620 <HAL_ADC_ConfigChannel+0x184>
 80004ae:	2301      	movs	r3, #1
 80004b0:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80004b4:	684b      	ldr	r3, [r1, #4]
 80004b6:	2b06      	cmp	r3, #6
 80004b8:	d828      	bhi.n	800050c <HAL_ADC_ConfigChannel+0x70>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 80004ba:	6805      	ldr	r5, [r0, #0]
 80004bc:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80004be:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80004c2:	3b05      	subs	r3, #5
 80004c4:	241f      	movs	r4, #31
 80004c6:	409c      	lsls	r4, r3
 80004c8:	ea22 0204 	bic.w	r2, r2, r4
 80004cc:	680c      	ldr	r4, [r1, #0]
 80004ce:	fa04 f303 	lsl.w	r3, r4, r3
 80004d2:	4313      	orrs	r3, r2
 80004d4:	642b      	str	r3, [r5, #64]	; 0x40
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 80004d6:	680b      	ldr	r3, [r1, #0]
 80004d8:	2b09      	cmp	r3, #9
 80004da:	d859      	bhi.n	8000590 <HAL_ADC_ConfigChannel+0xf4>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 80004dc:	6805      	ldr	r5, [r0, #0]
 80004de:	696a      	ldr	r2, [r5, #20]
 80004e0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80004e4:	2407      	movs	r4, #7
 80004e6:	409c      	lsls	r4, r3
 80004e8:	ea22 0204 	bic.w	r2, r2, r4
 80004ec:	688c      	ldr	r4, [r1, #8]
 80004ee:	fa04 f303 	lsl.w	r3, r4, r3
 80004f2:	4313      	orrs	r3, r2
 80004f4:	616b      	str	r3, [r5, #20]
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80004f6:	680b      	ldr	r3, [r1, #0]
 80004f8:	3b10      	subs	r3, #16
 80004fa:	2b01      	cmp	r3, #1
 80004fc:	d96c      	bls.n	80005d8 <HAL_ADC_ConfigChannel+0x13c>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80004fe:	2300      	movs	r3, #0
 8000500:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8000504:	4618      	mov	r0, r3
}
 8000506:	b002      	add	sp, #8
 8000508:	bc30      	pop	{r4, r5}
 800050a:	4770      	bx	lr
  else if (sConfig->Rank < 13)
 800050c:	2b0c      	cmp	r3, #12
 800050e:	d80e      	bhi.n	800052e <HAL_ADC_ConfigChannel+0x92>
    MODIFY_REG(hadc->Instance->SQR4,
 8000510:	6805      	ldr	r5, [r0, #0]
 8000512:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8000514:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000518:	3b23      	subs	r3, #35	; 0x23
 800051a:	241f      	movs	r4, #31
 800051c:	409c      	lsls	r4, r3
 800051e:	ea22 0204 	bic.w	r2, r2, r4
 8000522:	680c      	ldr	r4, [r1, #0]
 8000524:	fa04 f303 	lsl.w	r3, r4, r3
 8000528:	4313      	orrs	r3, r2
 800052a:	63eb      	str	r3, [r5, #60]	; 0x3c
 800052c:	e7d3      	b.n	80004d6 <HAL_ADC_ConfigChannel+0x3a>
  else if (sConfig->Rank < 19)
 800052e:	2b12      	cmp	r3, #18
 8000530:	d80e      	bhi.n	8000550 <HAL_ADC_ConfigChannel+0xb4>
    MODIFY_REG(hadc->Instance->SQR3,
 8000532:	6805      	ldr	r5, [r0, #0]
 8000534:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8000536:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800053a:	3b41      	subs	r3, #65	; 0x41
 800053c:	241f      	movs	r4, #31
 800053e:	409c      	lsls	r4, r3
 8000540:	ea22 0204 	bic.w	r2, r2, r4
 8000544:	680c      	ldr	r4, [r1, #0]
 8000546:	fa04 f303 	lsl.w	r3, r4, r3
 800054a:	4313      	orrs	r3, r2
 800054c:	63ab      	str	r3, [r5, #56]	; 0x38
 800054e:	e7c2      	b.n	80004d6 <HAL_ADC_ConfigChannel+0x3a>
  else if (sConfig->Rank < 25)
 8000550:	2b18      	cmp	r3, #24
 8000552:	d80e      	bhi.n	8000572 <HAL_ADC_ConfigChannel+0xd6>
    MODIFY_REG(hadc->Instance->SQR2,
 8000554:	6805      	ldr	r5, [r0, #0]
 8000556:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8000558:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800055c:	3b5f      	subs	r3, #95	; 0x5f
 800055e:	241f      	movs	r4, #31
 8000560:	409c      	lsls	r4, r3
 8000562:	ea22 0204 	bic.w	r2, r2, r4
 8000566:	680c      	ldr	r4, [r1, #0]
 8000568:	fa04 f303 	lsl.w	r3, r4, r3
 800056c:	4313      	orrs	r3, r2
 800056e:	636b      	str	r3, [r5, #52]	; 0x34
 8000570:	e7b1      	b.n	80004d6 <HAL_ADC_ConfigChannel+0x3a>
    MODIFY_REG(hadc->Instance->SQR1,
 8000572:	6805      	ldr	r5, [r0, #0]
 8000574:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8000576:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800057a:	3b7d      	subs	r3, #125	; 0x7d
 800057c:	241f      	movs	r4, #31
 800057e:	409c      	lsls	r4, r3
 8000580:	ea22 0204 	bic.w	r2, r2, r4
 8000584:	680c      	ldr	r4, [r1, #0]
 8000586:	fa04 f303 	lsl.w	r3, r4, r3
 800058a:	4313      	orrs	r3, r2
 800058c:	632b      	str	r3, [r5, #48]	; 0x30
 800058e:	e7a2      	b.n	80004d6 <HAL_ADC_ConfigChannel+0x3a>
  else if (sConfig->Channel < ADC_CHANNEL_20)
 8000590:	2b13      	cmp	r3, #19
 8000592:	d80e      	bhi.n	80005b2 <HAL_ADC_ConfigChannel+0x116>
    MODIFY_REG(hadc->Instance->SMPR2,
 8000594:	6805      	ldr	r5, [r0, #0]
 8000596:	692a      	ldr	r2, [r5, #16]
 8000598:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800059c:	3b1e      	subs	r3, #30
 800059e:	2407      	movs	r4, #7
 80005a0:	409c      	lsls	r4, r3
 80005a2:	ea22 0204 	bic.w	r2, r2, r4
 80005a6:	688c      	ldr	r4, [r1, #8]
 80005a8:	fa04 f303 	lsl.w	r3, r4, r3
 80005ac:	4313      	orrs	r3, r2
 80005ae:	612b      	str	r3, [r5, #16]
 80005b0:	e7a1      	b.n	80004f6 <HAL_ADC_ConfigChannel+0x5a>
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 80005b2:	2b1a      	cmp	r3, #26
 80005b4:	d80e      	bhi.n	80005d4 <HAL_ADC_ConfigChannel+0x138>
    MODIFY_REG(hadc->Instance->SMPR1,
 80005b6:	6805      	ldr	r5, [r0, #0]
 80005b8:	68ea      	ldr	r2, [r5, #12]
 80005ba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80005be:	3b3c      	subs	r3, #60	; 0x3c
 80005c0:	2407      	movs	r4, #7
 80005c2:	409c      	lsls	r4, r3
 80005c4:	ea22 0204 	bic.w	r2, r2, r4
 80005c8:	688c      	ldr	r4, [r1, #8]
 80005ca:	fa04 f303 	lsl.w	r3, r4, r3
 80005ce:	4313      	orrs	r3, r2
 80005d0:	60eb      	str	r3, [r5, #12]
 80005d2:	e790      	b.n	80004f6 <HAL_ADC_ConfigChannel+0x5a>
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 80005d4:	bf00      	nop
 80005d6:	e78e      	b.n	80004f6 <HAL_ADC_ConfigChannel+0x5a>
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 80005d8:	4b12      	ldr	r3, [pc, #72]	; (8000624 <HAL_ADC_ConfigChannel+0x188>)
 80005da:	685b      	ldr	r3, [r3, #4]
 80005dc:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 80005e0:	d18d      	bne.n	80004fe <HAL_ADC_ConfigChannel+0x62>
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 80005e2:	4a10      	ldr	r2, [pc, #64]	; (8000624 <HAL_ADC_ConfigChannel+0x188>)
 80005e4:	6853      	ldr	r3, [r2, #4]
 80005e6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80005ea:	6053      	str	r3, [r2, #4]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80005ec:	680b      	ldr	r3, [r1, #0]
 80005ee:	2b10      	cmp	r3, #16
 80005f0:	d185      	bne.n	80004fe <HAL_ADC_ConfigChannel+0x62>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80005f2:	4b0d      	ldr	r3, [pc, #52]	; (8000628 <HAL_ADC_ConfigChannel+0x18c>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	f102 7246 	add.w	r2, r2, #51904512	; 0x3180000
 80005fa:	f502 322d 	add.w	r2, r2, #177152	; 0x2b400
 80005fe:	f202 3283 	addw	r2, r2, #899	; 0x383
 8000602:	fba2 2303 	umull	r2, r3, r2, r3
 8000606:	0c9b      	lsrs	r3, r3, #18
 8000608:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800060c:	005a      	lsls	r2, r3, #1
 800060e:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0)
 8000610:	e002      	b.n	8000618 <HAL_ADC_ConfigChannel+0x17c>
            wait_loop_index--;
 8000612:	9b01      	ldr	r3, [sp, #4]
 8000614:	3b01      	subs	r3, #1
 8000616:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0)
 8000618:	9b01      	ldr	r3, [sp, #4]
 800061a:	2b00      	cmp	r3, #0
 800061c:	d1f9      	bne.n	8000612 <HAL_ADC_ConfigChannel+0x176>
 800061e:	e76e      	b.n	80004fe <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 8000620:	2002      	movs	r0, #2
 8000622:	e770      	b.n	8000506 <HAL_ADC_ConfigChannel+0x6a>
 8000624:	40012700 	.word	0x40012700
 8000628:	20000008 	.word	0x20000008

0800062c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800062c:	b530      	push	{r4, r5, lr}
 800062e:	b083      	sub	sp, #12
  uint32_t tickstart = 0;
  __IO uint32_t wait_loop_index = 0;
 8000630:	2300      	movs	r3, #0
 8000632:	9301      	str	r3, [sp, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000634:	6803      	ldr	r3, [r0, #0]
 8000636:	681a      	ldr	r2, [r3, #0]
 8000638:	f012 0f40 	tst.w	r2, #64	; 0x40
 800063c:	d130      	bne.n	80006a0 <ADC_Enable+0x74>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800063e:	689a      	ldr	r2, [r3, #8]
 8000640:	f042 0201 	orr.w	r2, r2, #1
 8000644:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8000646:	4b18      	ldr	r3, [pc, #96]	; (80006a8 <ADC_Enable+0x7c>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	4a18      	ldr	r2, [pc, #96]	; (80006ac <ADC_Enable+0x80>)
 800064c:	fba2 2303 	umull	r2, r3, r2, r3
 8000650:	0c9b      	lsrs	r3, r3, #18
 8000652:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000656:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 8000658:	e002      	b.n	8000660 <ADC_Enable+0x34>
    {
      wait_loop_index--;
 800065a:	9b01      	ldr	r3, [sp, #4]
 800065c:	3b01      	subs	r3, #1
 800065e:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 8000660:	9b01      	ldr	r3, [sp, #4]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d1f9      	bne.n	800065a <ADC_Enable+0x2e>
 8000666:	4604      	mov	r4, r0
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();    
 8000668:	f7ff fdcc 	bl	8000204 <HAL_GetTick>
 800066c:	4605      	mov	r5, r0

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800066e:	6823      	ldr	r3, [r4, #0]
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	f013 0f40 	tst.w	r3, #64	; 0x40
 8000676:	d111      	bne.n	800069c <ADC_Enable+0x70>
    {
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 8000678:	f7ff fdc4 	bl	8000204 <HAL_GetTick>
 800067c:	1b40      	subs	r0, r0, r5
 800067e:	2802      	cmp	r0, #2
 8000680:	d9f5      	bls.n	800066e <ADC_Enable+0x42>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000682:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000684:	f043 0310 	orr.w	r3, r3, #16
 8000688:	64e3      	str	r3, [r4, #76]	; 0x4c
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800068a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800068c:	f043 0301 	orr.w	r3, r3, #1
 8000690:	6523      	str	r3, [r4, #80]	; 0x50
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000692:	2300      	movs	r3, #0
 8000694:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
      
        return HAL_ERROR;
 8000698:	2001      	movs	r0, #1
 800069a:	e002      	b.n	80006a2 <ADC_Enable+0x76>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800069c:	2000      	movs	r0, #0
 800069e:	e000      	b.n	80006a2 <ADC_Enable+0x76>
 80006a0:	2000      	movs	r0, #0
}
 80006a2:	b003      	add	sp, #12
 80006a4:	bd30      	pop	{r4, r5, pc}
 80006a6:	bf00      	nop
 80006a8:	20000008 	.word	0x20000008
 80006ac:	431bde83 	.word	0x431bde83

080006b0 <HAL_ADC_Start>:
  __HAL_LOCK(hadc);
 80006b0:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 80006b4:	2b01      	cmp	r3, #1
 80006b6:	d102      	bne.n	80006be <HAL_ADC_Start+0xe>
 80006b8:	2302      	movs	r3, #2
}
 80006ba:	4618      	mov	r0, r3
 80006bc:	4770      	bx	lr
{
 80006be:	b510      	push	{r4, lr}
 80006c0:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 80006c2:	2301      	movs	r3, #1
 80006c4:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
  tmp_hal_status = ADC_Enable(hadc);
 80006c8:	f7ff ffb0 	bl	800062c <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 80006cc:	4603      	mov	r3, r0
 80006ce:	bb48      	cbnz	r0, 8000724 <HAL_ADC_Start+0x74>
    ADC_STATE_CLR_SET(hadc->State,
 80006d0:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80006d2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80006d6:	f022 0201 	bic.w	r2, r2, #1
 80006da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80006de:	64e2      	str	r2, [r4, #76]	; 0x4c
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80006e0:	6822      	ldr	r2, [r4, #0]
 80006e2:	6851      	ldr	r1, [r2, #4]
 80006e4:	f411 6f80 	tst.w	r1, #1024	; 0x400
 80006e8:	d005      	beq.n	80006f6 <HAL_ADC_Start+0x46>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80006ea:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80006ec:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 80006f0:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 80006f4:	64e1      	str	r1, [r4, #76]	; 0x4c
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80006f6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80006f8:	f411 5f80 	tst.w	r1, #4096	; 0x1000
 80006fc:	d014      	beq.n	8000728 <HAL_ADC_Start+0x78>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80006fe:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8000700:	f021 0106 	bic.w	r1, r1, #6
 8000704:	6521      	str	r1, [r4, #80]	; 0x50
    __HAL_UNLOCK(hadc);
 8000706:	2100      	movs	r1, #0
 8000708:	f884 1048 	strb.w	r1, [r4, #72]	; 0x48
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800070c:	f06f 0122 	mvn.w	r1, #34	; 0x22
 8000710:	6011      	str	r1, [r2, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8000712:	6822      	ldr	r2, [r4, #0]
 8000714:	6891      	ldr	r1, [r2, #8]
 8000716:	f011 5f40 	tst.w	r1, #805306368	; 0x30000000
 800071a:	d103      	bne.n	8000724 <HAL_ADC_Start+0x74>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 800071c:	6891      	ldr	r1, [r2, #8]
 800071e:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8000722:	6091      	str	r1, [r2, #8]
}
 8000724:	4618      	mov	r0, r3
 8000726:	bd10      	pop	{r4, pc}
      ADC_CLEAR_ERRORCODE(hadc);
 8000728:	2100      	movs	r1, #0
 800072a:	6521      	str	r1, [r4, #80]	; 0x50
 800072c:	e7eb      	b.n	8000706 <HAL_ADC_Start+0x56>
	...

08000730 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000730:	4a07      	ldr	r2, [pc, #28]	; (8000750 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000732:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000734:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000738:	041b      	lsls	r3, r3, #16
 800073a:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800073c:	0200      	lsls	r0, r0, #8
 800073e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000742:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8000744:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8000748:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800074c:	60d0      	str	r0, [r2, #12]
 800074e:	4770      	bx	lr
 8000750:	e000ed00 	.word	0xe000ed00

08000754 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000754:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000756:	4b16      	ldr	r3, [pc, #88]	; (80007b0 <HAL_NVIC_SetPriority+0x5c>)
 8000758:	68db      	ldr	r3, [r3, #12]
 800075a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800075e:	f1c3 0407 	rsb	r4, r3, #7
 8000762:	2c04      	cmp	r4, #4
 8000764:	bf28      	it	cs
 8000766:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000768:	1d1d      	adds	r5, r3, #4
 800076a:	2d06      	cmp	r5, #6
 800076c:	d917      	bls.n	800079e <HAL_NVIC_SetPriority+0x4a>
 800076e:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000770:	2501      	movs	r5, #1
 8000772:	fa05 f404 	lsl.w	r4, r5, r4
 8000776:	3c01      	subs	r4, #1
 8000778:	4021      	ands	r1, r4
 800077a:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800077c:	fa05 f303 	lsl.w	r3, r5, r3
 8000780:	3b01      	subs	r3, #1
 8000782:	4013      	ands	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000784:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8000786:	2800      	cmp	r0, #0
 8000788:	db0b      	blt.n	80007a2 <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800078a:	0109      	lsls	r1, r1, #4
 800078c:	b2c9      	uxtb	r1, r1
 800078e:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000792:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000796:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800079a:	bc30      	pop	{r4, r5}
 800079c:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800079e:	2300      	movs	r3, #0
 80007a0:	e7e6      	b.n	8000770 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007a2:	f000 000f 	and.w	r0, r0, #15
 80007a6:	0109      	lsls	r1, r1, #4
 80007a8:	b2c9      	uxtb	r1, r1
 80007aa:	4b02      	ldr	r3, [pc, #8]	; (80007b4 <HAL_NVIC_SetPriority+0x60>)
 80007ac:	5419      	strb	r1, [r3, r0]
 80007ae:	e7f4      	b.n	800079a <HAL_NVIC_SetPriority+0x46>
 80007b0:	e000ed00 	.word	0xe000ed00
 80007b4:	e000ed14 	.word	0xe000ed14

080007b8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007b8:	3801      	subs	r0, #1
 80007ba:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80007be:	d20a      	bcs.n	80007d6 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007c0:	4b06      	ldr	r3, [pc, #24]	; (80007dc <HAL_SYSTICK_Config+0x24>)
 80007c2:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007c4:	21f0      	movs	r1, #240	; 0xf0
 80007c6:	4a06      	ldr	r2, [pc, #24]	; (80007e0 <HAL_SYSTICK_Config+0x28>)
 80007c8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007cc:	2000      	movs	r0, #0
 80007ce:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007d0:	2207      	movs	r2, #7
 80007d2:	601a      	str	r2, [r3, #0]
 80007d4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80007d6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	e000e010 	.word	0xe000e010
 80007e0:	e000ed00 	.word	0xe000ed00

080007e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80007e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007e6:	b083      	sub	sp, #12
  uint32_t position = 0x00;
 80007e8:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80007ea:	e08d      	b.n	8000908 <HAL_GPIO_Init+0x124>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 80007ec:	08de      	lsrs	r6, r3, #3
 80007ee:	3608      	adds	r6, #8
 80007f0:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 80007f4:	f003 0e07 	and.w	lr, r3, #7
 80007f8:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80007fc:	270f      	movs	r7, #15
 80007fe:	fa07 f70e 	lsl.w	r7, r7, lr
 8000802:	ea24 0407 	bic.w	r4, r4, r7
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));       
 8000806:	690f      	ldr	r7, [r1, #16]
 8000808:	fa07 f70e 	lsl.w	r7, r7, lr
 800080c:	433c      	orrs	r4, r7
        GPIOx->AFR[position >> 3] = temp;
 800080e:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
 8000812:	e088      	b.n	8000926 <HAL_GPIO_Init+0x142>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000814:	6886      	ldr	r6, [r0, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000816:	4026      	ands	r6, r4
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8000818:	68cf      	ldr	r7, [r1, #12]
 800081a:	fa07 f70e 	lsl.w	r7, r7, lr
 800081e:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 8000820:	6086      	str	r6, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000822:	6846      	ldr	r6, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000824:	ea26 0505 	bic.w	r5, r6, r5
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000828:	684e      	ldr	r6, [r1, #4]
 800082a:	f3c6 1600 	ubfx	r6, r6, #4, #1
 800082e:	409e      	lsls	r6, r3
 8000830:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 8000832:	6045      	str	r5, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000834:	68c5      	ldr	r5, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8000836:	402c      	ands	r4, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8000838:	688d      	ldr	r5, [r1, #8]
 800083a:	fa05 f50e 	lsl.w	r5, r5, lr
 800083e:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8000840:	60c4      	str	r4, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000842:	684c      	ldr	r4, [r1, #4]
 8000844:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8000848:	d05d      	beq.n	8000906 <HAL_GPIO_Init+0x122>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800084a:	4c4a      	ldr	r4, [pc, #296]	; (8000974 <HAL_GPIO_Init+0x190>)
 800084c:	6a25      	ldr	r5, [r4, #32]
 800084e:	f045 0501 	orr.w	r5, r5, #1
 8000852:	6225      	str	r5, [r4, #32]
 8000854:	6a24      	ldr	r4, [r4, #32]
 8000856:	f004 0401 	and.w	r4, r4, #1
 800085a:	9401      	str	r4, [sp, #4]
 800085c:	9c01      	ldr	r4, [sp, #4]
        
        temp = SYSCFG->EXTICR[position >> 2];
 800085e:	089d      	lsrs	r5, r3, #2
 8000860:	1cae      	adds	r6, r5, #2
 8000862:	4c45      	ldr	r4, [pc, #276]	; (8000978 <HAL_GPIO_Init+0x194>)
 8000864:	f854 4026 	ldr.w	r4, [r4, r6, lsl #2]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000868:	f003 0603 	and.w	r6, r3, #3
 800086c:	00b6      	lsls	r6, r6, #2
 800086e:	270f      	movs	r7, #15
 8000870:	40b7      	lsls	r7, r6
 8000872:	ea24 0407 	bic.w	r4, r4, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000876:	4f41      	ldr	r7, [pc, #260]	; (800097c <HAL_GPIO_Init+0x198>)
 8000878:	42b8      	cmp	r0, r7
 800087a:	d071      	beq.n	8000960 <HAL_GPIO_Init+0x17c>
 800087c:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000880:	42b8      	cmp	r0, r7
 8000882:	d06f      	beq.n	8000964 <HAL_GPIO_Init+0x180>
 8000884:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000888:	42b8      	cmp	r0, r7
 800088a:	d06d      	beq.n	8000968 <HAL_GPIO_Init+0x184>
 800088c:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000890:	42b8      	cmp	r0, r7
 8000892:	d06b      	beq.n	800096c <HAL_GPIO_Init+0x188>
 8000894:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000898:	42b8      	cmp	r0, r7
 800089a:	d05f      	beq.n	800095c <HAL_GPIO_Init+0x178>
 800089c:	2705      	movs	r7, #5
 800089e:	fa07 f606 	lsl.w	r6, r7, r6
 80008a2:	4334      	orrs	r4, r6
        SYSCFG->EXTICR[position >> 2] = temp;
 80008a4:	3502      	adds	r5, #2
 80008a6:	4e34      	ldr	r6, [pc, #208]	; (8000978 <HAL_GPIO_Init+0x194>)
 80008a8:	f846 4025 	str.w	r4, [r6, r5, lsl #2]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80008ac:	4c34      	ldr	r4, [pc, #208]	; (8000980 <HAL_GPIO_Init+0x19c>)
 80008ae:	6825      	ldr	r5, [r4, #0]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80008b0:	43d4      	mvns	r4, r2
 80008b2:	ea05 0604 	and.w	r6, r5, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80008b6:	684f      	ldr	r7, [r1, #4]
 80008b8:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 80008bc:	d001      	beq.n	80008c2 <HAL_GPIO_Init+0xde>
        {
          SET_BIT(temp, iocurrent); 
 80008be:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->IMR = temp;
 80008c2:	4d2f      	ldr	r5, [pc, #188]	; (8000980 <HAL_GPIO_Init+0x19c>)
 80008c4:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR;
 80008c6:	686d      	ldr	r5, [r5, #4]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 80008c8:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80008cc:	684f      	ldr	r7, [r1, #4]
 80008ce:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 80008d2:	d001      	beq.n	80008d8 <HAL_GPIO_Init+0xf4>
        {
          SET_BIT(temp, iocurrent); 
 80008d4:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR = temp;
 80008d8:	4d29      	ldr	r5, [pc, #164]	; (8000980 <HAL_GPIO_Init+0x19c>)
 80008da:	606e      	str	r6, [r5, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80008dc:	68ad      	ldr	r5, [r5, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80008de:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80008e2:	684f      	ldr	r7, [r1, #4]
 80008e4:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 80008e8:	d001      	beq.n	80008ee <HAL_GPIO_Init+0x10a>
        {
          SET_BIT(temp, iocurrent); 
 80008ea:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR = temp;
 80008ee:	4d24      	ldr	r5, [pc, #144]	; (8000980 <HAL_GPIO_Init+0x19c>)
 80008f0:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR;
 80008f2:	68ed      	ldr	r5, [r5, #12]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80008f4:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80008f6:	684e      	ldr	r6, [r1, #4]
 80008f8:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 80008fc:	d001      	beq.n	8000902 <HAL_GPIO_Init+0x11e>
        {
          SET_BIT(temp, iocurrent); 
 80008fe:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR = temp;
 8000902:	4a1f      	ldr	r2, [pc, #124]	; (8000980 <HAL_GPIO_Init+0x19c>)
 8000904:	60d4      	str	r4, [r2, #12]
      }
    }
    
    position++;
 8000906:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0)
 8000908:	680a      	ldr	r2, [r1, #0]
 800090a:	fa32 f403 	lsrs.w	r4, r2, r3
 800090e:	d02f      	beq.n	8000970 <HAL_GPIO_Init+0x18c>
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000910:	2501      	movs	r5, #1
 8000912:	409d      	lsls	r5, r3
    if(iocurrent)
 8000914:	402a      	ands	r2, r5
 8000916:	d0f6      	beq.n	8000906 <HAL_GPIO_Init+0x122>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000918:	684c      	ldr	r4, [r1, #4]
 800091a:	2c02      	cmp	r4, #2
 800091c:	f43f af66 	beq.w	80007ec <HAL_GPIO_Init+0x8>
 8000920:	2c12      	cmp	r4, #18
 8000922:	f43f af63 	beq.w	80007ec <HAL_GPIO_Init+0x8>
      temp = GPIOx->MODER;
 8000926:	6806      	ldr	r6, [r0, #0]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8000928:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 800092c:	2403      	movs	r4, #3
 800092e:	fa04 f40e 	lsl.w	r4, r4, lr
 8000932:	43e4      	mvns	r4, r4
 8000934:	4026      	ands	r6, r4
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000936:	684f      	ldr	r7, [r1, #4]
 8000938:	f007 0703 	and.w	r7, r7, #3
 800093c:	fa07 f70e 	lsl.w	r7, r7, lr
 8000940:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 8000942:	6006      	str	r6, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000944:	684e      	ldr	r6, [r1, #4]
 8000946:	1e77      	subs	r7, r6, #1
 8000948:	2f01      	cmp	r7, #1
 800094a:	f67f af63 	bls.w	8000814 <HAL_GPIO_Init+0x30>
 800094e:	2e11      	cmp	r6, #17
 8000950:	f43f af60 	beq.w	8000814 <HAL_GPIO_Init+0x30>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000954:	2e12      	cmp	r6, #18
 8000956:	f47f af6d 	bne.w	8000834 <HAL_GPIO_Init+0x50>
 800095a:	e75b      	b.n	8000814 <HAL_GPIO_Init+0x30>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800095c:	2704      	movs	r7, #4
 800095e:	e79e      	b.n	800089e <HAL_GPIO_Init+0xba>
 8000960:	2700      	movs	r7, #0
 8000962:	e79c      	b.n	800089e <HAL_GPIO_Init+0xba>
 8000964:	2701      	movs	r7, #1
 8000966:	e79a      	b.n	800089e <HAL_GPIO_Init+0xba>
 8000968:	2702      	movs	r7, #2
 800096a:	e798      	b.n	800089e <HAL_GPIO_Init+0xba>
 800096c:	2703      	movs	r7, #3
 800096e:	e796      	b.n	800089e <HAL_GPIO_Init+0xba>
  } 
}
 8000970:	b003      	add	sp, #12
 8000972:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000974:	40023800 	.word	0x40023800
 8000978:	40010000 	.word	0x40010000
 800097c:	40020000 	.word	0x40020000
 8000980:	40010400 	.word	0x40010400

08000984 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000984:	6903      	ldr	r3, [r0, #16]
 8000986:	4219      	tst	r1, r3
 8000988:	d101      	bne.n	800098e <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800098a:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 800098c:	4770      	bx	lr
    bitstatus = GPIO_PIN_SET;
 800098e:	2001      	movs	r0, #1
 8000990:	4770      	bx	lr

08000992 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000992:	b912      	cbnz	r2, 800099a <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8000994:	0409      	lsls	r1, r1, #16
 8000996:	6181      	str	r1, [r0, #24]
 8000998:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800099a:	6181      	str	r1, [r0, #24]
 800099c:	4770      	bx	lr
	...

080009a0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 80009a0:	b082      	sub	sp, #8
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80009a2:	4b22      	ldr	r3, [pc, #136]	; (8000a2c <RCC_SetFlashLatencyFromMSIRange+0x8c>)
 80009a4:	689b      	ldr	r3, [r3, #8]
 80009a6:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 80009aa:	d125      	bne.n	80009f8 <RCC_SetFlashLatencyFromMSIRange+0x58>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80009ac:	4b1f      	ldr	r3, [pc, #124]	; (8000a2c <RCC_SetFlashLatencyFromMSIRange+0x8c>)
 80009ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009b0:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80009b4:	d008      	beq.n	80009c8 <RCC_SetFlashLatencyFromMSIRange+0x28>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80009b6:	4b1e      	ldr	r3, [pc, #120]	; (8000a30 <RCC_SetFlashLatencyFromMSIRange+0x90>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
      __HAL_RCC_PWR_CLK_DISABLE();
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80009be:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80009c2:	d014      	beq.n	80009ee <RCC_SetFlashLatencyFromMSIRange+0x4e>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80009c4:	2100      	movs	r1, #0
 80009c6:	e018      	b.n	80009fa <RCC_SetFlashLatencyFromMSIRange+0x5a>
      __HAL_RCC_PWR_CLK_ENABLE();
 80009c8:	4a18      	ldr	r2, [pc, #96]	; (8000a2c <RCC_SetFlashLatencyFromMSIRange+0x8c>)
 80009ca:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80009cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009d0:	6253      	str	r3, [r2, #36]	; 0x24
 80009d2:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80009d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009d8:	9301      	str	r3, [sp, #4]
 80009da:	9b01      	ldr	r3, [sp, #4]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80009dc:	4b14      	ldr	r3, [pc, #80]	; (8000a30 <RCC_SetFlashLatencyFromMSIRange+0x90>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
      __HAL_RCC_PWR_CLK_DISABLE();
 80009e4:	6a51      	ldr	r1, [r2, #36]	; 0x24
 80009e6:	f021 5180 	bic.w	r1, r1, #268435456	; 0x10000000
 80009ea:	6251      	str	r1, [r2, #36]	; 0x24
 80009ec:	e7e7      	b.n	80009be <RCC_SetFlashLatencyFromMSIRange+0x1e>
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80009ee:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
 80009f2:	d011      	beq.n	8000a18 <RCC_SetFlashLatencyFromMSIRange+0x78>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80009f4:	2100      	movs	r1, #0
 80009f6:	e000      	b.n	80009fa <RCC_SetFlashLatencyFromMSIRange+0x5a>
 80009f8:	2100      	movs	r1, #0
    {
      latency = FLASH_LATENCY_1; /* 1WS */
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80009fa:	b979      	cbnz	r1, 8000a1c <RCC_SetFlashLatencyFromMSIRange+0x7c>
 80009fc:	4a0d      	ldr	r2, [pc, #52]	; (8000a34 <RCC_SetFlashLatencyFromMSIRange+0x94>)
 80009fe:	6813      	ldr	r3, [r2, #0]
 8000a00:	f023 0301 	bic.w	r3, r3, #1
 8000a04:	430b      	orrs	r3, r1
 8000a06:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8000a08:	6813      	ldr	r3, [r2, #0]
 8000a0a:	f003 0301 	and.w	r3, r3, #1
 8000a0e:	4299      	cmp	r1, r3
 8000a10:	d00a      	beq.n	8000a28 <RCC_SetFlashLatencyFromMSIRange+0x88>
  {
    return HAL_ERROR;
 8000a12:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 8000a14:	b002      	add	sp, #8
 8000a16:	4770      	bx	lr
      latency = FLASH_LATENCY_1; /* 1WS */
 8000a18:	2101      	movs	r1, #1
 8000a1a:	e7ee      	b.n	80009fa <RCC_SetFlashLatencyFromMSIRange+0x5a>
  __HAL_FLASH_SET_LATENCY(latency);
 8000a1c:	4a05      	ldr	r2, [pc, #20]	; (8000a34 <RCC_SetFlashLatencyFromMSIRange+0x94>)
 8000a1e:	6813      	ldr	r3, [r2, #0]
 8000a20:	f043 0304 	orr.w	r3, r3, #4
 8000a24:	6013      	str	r3, [r2, #0]
 8000a26:	e7e9      	b.n	80009fc <RCC_SetFlashLatencyFromMSIRange+0x5c>
  return HAL_OK;
 8000a28:	2000      	movs	r0, #0
 8000a2a:	e7f3      	b.n	8000a14 <RCC_SetFlashLatencyFromMSIRange+0x74>
 8000a2c:	40023800 	.word	0x40023800
 8000a30:	40007000 	.word	0x40007000
 8000a34:	40023c00 	.word	0x40023c00

08000a38 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 8000a38:	2800      	cmp	r0, #0
 8000a3a:	f000 8268 	beq.w	8000f0e <HAL_RCC_OscConfig+0x4d6>
{
 8000a3e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a40:	b083      	sub	sp, #12
 8000a42:	4604      	mov	r4, r0
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000a44:	4ba3      	ldr	r3, [pc, #652]	; (8000cd4 <HAL_RCC_OscConfig+0x29c>)
 8000a46:	689d      	ldr	r5, [r3, #8]
 8000a48:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000a4c:	689e      	ldr	r6, [r3, #8]
 8000a4e:	f406 3680 	and.w	r6, r6, #65536	; 0x10000
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a52:	6803      	ldr	r3, [r0, #0]
 8000a54:	f013 0f01 	tst.w	r3, #1
 8000a58:	d02e      	beq.n	8000ab8 <HAL_RCC_OscConfig+0x80>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000a5a:	2d08      	cmp	r5, #8
 8000a5c:	d023      	beq.n	8000aa6 <HAL_RCC_OscConfig+0x6e>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000a5e:	2d0c      	cmp	r5, #12
 8000a60:	d01f      	beq.n	8000aa2 <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a62:	6863      	ldr	r3, [r4, #4]
 8000a64:	2b01      	cmp	r3, #1
 8000a66:	d046      	beq.n	8000af6 <HAL_RCC_OscConfig+0xbe>
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d14a      	bne.n	8000b02 <HAL_RCC_OscConfig+0xca>
 8000a6c:	4b99      	ldr	r3, [pc, #612]	; (8000cd4 <HAL_RCC_OscConfig+0x29c>)
 8000a6e:	681a      	ldr	r2, [r3, #0]
 8000a70:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000a74:	601a      	str	r2, [r3, #0]
 8000a76:	681a      	ldr	r2, [r3, #0]
 8000a78:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000a7c:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000a7e:	6863      	ldr	r3, [r4, #4]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d054      	beq.n	8000b2e <HAL_RCC_OscConfig+0xf6>
        tickstart = HAL_GetTick();
 8000a84:	f7ff fbbe 	bl	8000204 <HAL_GetTick>
 8000a88:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000a8a:	4b92      	ldr	r3, [pc, #584]	; (8000cd4 <HAL_RCC_OscConfig+0x29c>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000a92:	d111      	bne.n	8000ab8 <HAL_RCC_OscConfig+0x80>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a94:	f7ff fbb6 	bl	8000204 <HAL_GetTick>
 8000a98:	1bc0      	subs	r0, r0, r7
 8000a9a:	2864      	cmp	r0, #100	; 0x64
 8000a9c:	d9f5      	bls.n	8000a8a <HAL_RCC_OscConfig+0x52>
            return HAL_TIMEOUT;
 8000a9e:	2303      	movs	r3, #3
 8000aa0:	e23f      	b.n	8000f22 <HAL_RCC_OscConfig+0x4ea>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000aa2:	2e00      	cmp	r6, #0
 8000aa4:	d0dd      	beq.n	8000a62 <HAL_RCC_OscConfig+0x2a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000aa6:	4b8b      	ldr	r3, [pc, #556]	; (8000cd4 <HAL_RCC_OscConfig+0x29c>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000aae:	d003      	beq.n	8000ab8 <HAL_RCC_OscConfig+0x80>
 8000ab0:	6863      	ldr	r3, [r4, #4]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	f000 822e 	beq.w	8000f14 <HAL_RCC_OscConfig+0x4dc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ab8:	6823      	ldr	r3, [r4, #0]
 8000aba:	f013 0f02 	tst.w	r3, #2
 8000abe:	d059      	beq.n	8000b74 <HAL_RCC_OscConfig+0x13c>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000ac0:	2d04      	cmp	r5, #4
 8000ac2:	d045      	beq.n	8000b50 <HAL_RCC_OscConfig+0x118>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000ac4:	2d0c      	cmp	r5, #12
 8000ac6:	d041      	beq.n	8000b4c <HAL_RCC_OscConfig+0x114>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ac8:	68e3      	ldr	r3, [r4, #12]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	f000 80b8 	beq.w	8000c40 <HAL_RCC_OscConfig+0x208>
        __HAL_RCC_HSI_ENABLE();
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	4b81      	ldr	r3, [pc, #516]	; (8000cd8 <HAL_RCC_OscConfig+0x2a0>)
 8000ad4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000ad6:	f7ff fb95 	bl	8000204 <HAL_GetTick>
 8000ada:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000adc:	4b7d      	ldr	r3, [pc, #500]	; (8000cd4 <HAL_RCC_OscConfig+0x29c>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	f013 0f02 	tst.w	r3, #2
 8000ae4:	f040 80a3 	bne.w	8000c2e <HAL_RCC_OscConfig+0x1f6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ae8:	f7ff fb8c 	bl	8000204 <HAL_GetTick>
 8000aec:	1b80      	subs	r0, r0, r6
 8000aee:	2802      	cmp	r0, #2
 8000af0:	d9f4      	bls.n	8000adc <HAL_RCC_OscConfig+0xa4>
            return HAL_TIMEOUT;
 8000af2:	2303      	movs	r3, #3
 8000af4:	e215      	b.n	8000f22 <HAL_RCC_OscConfig+0x4ea>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000af6:	4a77      	ldr	r2, [pc, #476]	; (8000cd4 <HAL_RCC_OscConfig+0x29c>)
 8000af8:	6813      	ldr	r3, [r2, #0]
 8000afa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000afe:	6013      	str	r3, [r2, #0]
 8000b00:	e7bd      	b.n	8000a7e <HAL_RCC_OscConfig+0x46>
 8000b02:	2b05      	cmp	r3, #5
 8000b04:	d009      	beq.n	8000b1a <HAL_RCC_OscConfig+0xe2>
 8000b06:	4b73      	ldr	r3, [pc, #460]	; (8000cd4 <HAL_RCC_OscConfig+0x29c>)
 8000b08:	681a      	ldr	r2, [r3, #0]
 8000b0a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	681a      	ldr	r2, [r3, #0]
 8000b12:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000b16:	601a      	str	r2, [r3, #0]
 8000b18:	e7b1      	b.n	8000a7e <HAL_RCC_OscConfig+0x46>
 8000b1a:	4b6e      	ldr	r3, [pc, #440]	; (8000cd4 <HAL_RCC_OscConfig+0x29c>)
 8000b1c:	681a      	ldr	r2, [r3, #0]
 8000b1e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000b22:	601a      	str	r2, [r3, #0]
 8000b24:	681a      	ldr	r2, [r3, #0]
 8000b26:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	e7a7      	b.n	8000a7e <HAL_RCC_OscConfig+0x46>
        tickstart = HAL_GetTick();
 8000b2e:	f7ff fb69 	bl	8000204 <HAL_GetTick>
 8000b32:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000b34:	4b67      	ldr	r3, [pc, #412]	; (8000cd4 <HAL_RCC_OscConfig+0x29c>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000b3c:	d0bc      	beq.n	8000ab8 <HAL_RCC_OscConfig+0x80>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b3e:	f7ff fb61 	bl	8000204 <HAL_GetTick>
 8000b42:	1bc0      	subs	r0, r0, r7
 8000b44:	2864      	cmp	r0, #100	; 0x64
 8000b46:	d9f5      	bls.n	8000b34 <HAL_RCC_OscConfig+0xfc>
            return HAL_TIMEOUT;
 8000b48:	2303      	movs	r3, #3
 8000b4a:	e1ea      	b.n	8000f22 <HAL_RCC_OscConfig+0x4ea>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000b4c:	2e00      	cmp	r6, #0
 8000b4e:	d1bb      	bne.n	8000ac8 <HAL_RCC_OscConfig+0x90>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b50:	4b60      	ldr	r3, [pc, #384]	; (8000cd4 <HAL_RCC_OscConfig+0x29c>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	f013 0f02 	tst.w	r3, #2
 8000b58:	d004      	beq.n	8000b64 <HAL_RCC_OscConfig+0x12c>
 8000b5a:	68e3      	ldr	r3, [r4, #12]
 8000b5c:	2b01      	cmp	r3, #1
 8000b5e:	d001      	beq.n	8000b64 <HAL_RCC_OscConfig+0x12c>
        return HAL_ERROR;
 8000b60:	2301      	movs	r3, #1
 8000b62:	e1de      	b.n	8000f22 <HAL_RCC_OscConfig+0x4ea>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b64:	4a5b      	ldr	r2, [pc, #364]	; (8000cd4 <HAL_RCC_OscConfig+0x29c>)
 8000b66:	6853      	ldr	r3, [r2, #4]
 8000b68:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8000b6c:	6921      	ldr	r1, [r4, #16]
 8000b6e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8000b72:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000b74:	6823      	ldr	r3, [r4, #0]
 8000b76:	f013 0f10 	tst.w	r3, #16
 8000b7a:	d03c      	beq.n	8000bf6 <HAL_RCC_OscConfig+0x1be>
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8000b7c:	2d00      	cmp	r5, #0
 8000b7e:	f040 8085 	bne.w	8000c8c <HAL_RCC_OscConfig+0x254>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000b82:	4b54      	ldr	r3, [pc, #336]	; (8000cd4 <HAL_RCC_OscConfig+0x29c>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	f413 7f00 	tst.w	r3, #512	; 0x200
 8000b8a:	d003      	beq.n	8000b94 <HAL_RCC_OscConfig+0x15c>
 8000b8c:	69a3      	ldr	r3, [r4, #24]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	f000 81c2 	beq.w	8000f18 <HAL_RCC_OscConfig+0x4e0>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000b94:	6a20      	ldr	r0, [r4, #32]
 8000b96:	4b4f      	ldr	r3, [pc, #316]	; (8000cd4 <HAL_RCC_OscConfig+0x29c>)
 8000b98:	685b      	ldr	r3, [r3, #4]
 8000b9a:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000b9e:	4298      	cmp	r0, r3
 8000ba0:	d960      	bls.n	8000c64 <HAL_RCC_OscConfig+0x22c>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000ba2:	f7ff fefd 	bl	80009a0 <RCC_SetFlashLatencyFromMSIRange>
 8000ba6:	2800      	cmp	r0, #0
 8000ba8:	f040 81b8 	bne.w	8000f1c <HAL_RCC_OscConfig+0x4e4>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000bac:	4a49      	ldr	r2, [pc, #292]	; (8000cd4 <HAL_RCC_OscConfig+0x29c>)
 8000bae:	6853      	ldr	r3, [r2, #4]
 8000bb0:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000bb4:	6a21      	ldr	r1, [r4, #32]
 8000bb6:	430b      	orrs	r3, r1
 8000bb8:	6053      	str	r3, [r2, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000bba:	6853      	ldr	r3, [r2, #4]
 8000bbc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000bc0:	69e1      	ldr	r1, [r4, #28]
 8000bc2:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8000bc6:	6053      	str	r3, [r2, #4]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000bc8:	6a23      	ldr	r3, [r4, #32]
 8000bca:	0b5b      	lsrs	r3, r3, #13
 8000bcc:	1c5a      	adds	r2, r3, #1
 8000bce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000bd2:	4093      	lsls	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8000bd4:	4a3f      	ldr	r2, [pc, #252]	; (8000cd4 <HAL_RCC_OscConfig+0x29c>)
 8000bd6:	6892      	ldr	r2, [r2, #8]
 8000bd8:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8000bdc:	493f      	ldr	r1, [pc, #252]	; (8000cdc <HAL_RCC_OscConfig+0x2a4>)
 8000bde:	5c8a      	ldrb	r2, [r1, r2]
 8000be0:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000be2:	4a3f      	ldr	r2, [pc, #252]	; (8000ce0 <HAL_RCC_OscConfig+0x2a8>)
 8000be4:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick(uwTickPrio);
 8000be6:	4b3f      	ldr	r3, [pc, #252]	; (8000ce4 <HAL_RCC_OscConfig+0x2ac>)
 8000be8:	6818      	ldr	r0, [r3, #0]
 8000bea:	f7ff fac7 	bl	800017c <HAL_InitTick>
        if(status != HAL_OK)
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2800      	cmp	r0, #0
 8000bf2:	f040 8196 	bne.w	8000f22 <HAL_RCC_OscConfig+0x4ea>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000bf6:	6823      	ldr	r3, [r4, #0]
 8000bf8:	f013 0f08 	tst.w	r3, #8
 8000bfc:	f000 809d 	beq.w	8000d3a <HAL_RCC_OscConfig+0x302>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000c00:	6963      	ldr	r3, [r4, #20]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	f000 8087 	beq.w	8000d16 <HAL_RCC_OscConfig+0x2de>
      __HAL_RCC_LSI_ENABLE();
 8000c08:	2201      	movs	r2, #1
 8000c0a:	4b37      	ldr	r3, [pc, #220]	; (8000ce8 <HAL_RCC_OscConfig+0x2b0>)
 8000c0c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000c0e:	f7ff faf9 	bl	8000204 <HAL_GetTick>
 8000c12:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000c14:	4b2f      	ldr	r3, [pc, #188]	; (8000cd4 <HAL_RCC_OscConfig+0x29c>)
 8000c16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c18:	f013 0f02 	tst.w	r3, #2
 8000c1c:	f040 808d 	bne.w	8000d3a <HAL_RCC_OscConfig+0x302>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000c20:	f7ff faf0 	bl	8000204 <HAL_GetTick>
 8000c24:	1b80      	subs	r0, r0, r6
 8000c26:	2802      	cmp	r0, #2
 8000c28:	d9f4      	bls.n	8000c14 <HAL_RCC_OscConfig+0x1dc>
          return HAL_TIMEOUT;
 8000c2a:	2303      	movs	r3, #3
 8000c2c:	e179      	b.n	8000f22 <HAL_RCC_OscConfig+0x4ea>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c2e:	4a29      	ldr	r2, [pc, #164]	; (8000cd4 <HAL_RCC_OscConfig+0x29c>)
 8000c30:	6853      	ldr	r3, [r2, #4]
 8000c32:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8000c36:	6921      	ldr	r1, [r4, #16]
 8000c38:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8000c3c:	6053      	str	r3, [r2, #4]
 8000c3e:	e799      	b.n	8000b74 <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_HSI_DISABLE();
 8000c40:	2200      	movs	r2, #0
 8000c42:	4b25      	ldr	r3, [pc, #148]	; (8000cd8 <HAL_RCC_OscConfig+0x2a0>)
 8000c44:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000c46:	f7ff fadd 	bl	8000204 <HAL_GetTick>
 8000c4a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000c4c:	4b21      	ldr	r3, [pc, #132]	; (8000cd4 <HAL_RCC_OscConfig+0x29c>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f013 0f02 	tst.w	r3, #2
 8000c54:	d08e      	beq.n	8000b74 <HAL_RCC_OscConfig+0x13c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c56:	f7ff fad5 	bl	8000204 <HAL_GetTick>
 8000c5a:	1b80      	subs	r0, r0, r6
 8000c5c:	2802      	cmp	r0, #2
 8000c5e:	d9f5      	bls.n	8000c4c <HAL_RCC_OscConfig+0x214>
            return HAL_TIMEOUT;
 8000c60:	2303      	movs	r3, #3
 8000c62:	e15e      	b.n	8000f22 <HAL_RCC_OscConfig+0x4ea>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000c64:	4a1b      	ldr	r2, [pc, #108]	; (8000cd4 <HAL_RCC_OscConfig+0x29c>)
 8000c66:	6853      	ldr	r3, [r2, #4]
 8000c68:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000c6c:	4318      	orrs	r0, r3
 8000c6e:	6050      	str	r0, [r2, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000c70:	6853      	ldr	r3, [r2, #4]
 8000c72:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000c76:	69e1      	ldr	r1, [r4, #28]
 8000c78:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8000c7c:	6053      	str	r3, [r2, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000c7e:	6a20      	ldr	r0, [r4, #32]
 8000c80:	f7ff fe8e 	bl	80009a0 <RCC_SetFlashLatencyFromMSIRange>
 8000c84:	2800      	cmp	r0, #0
 8000c86:	d09f      	beq.n	8000bc8 <HAL_RCC_OscConfig+0x190>
            return HAL_ERROR;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	e14a      	b.n	8000f22 <HAL_RCC_OscConfig+0x4ea>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000c8c:	69a3      	ldr	r3, [r4, #24]
 8000c8e:	b37b      	cbz	r3, 8000cf0 <HAL_RCC_OscConfig+0x2b8>
        __HAL_RCC_MSI_ENABLE();
 8000c90:	2201      	movs	r2, #1
 8000c92:	4b16      	ldr	r3, [pc, #88]	; (8000cec <HAL_RCC_OscConfig+0x2b4>)
 8000c94:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000c96:	f7ff fab5 	bl	8000204 <HAL_GetTick>
 8000c9a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000c9c:	4b0d      	ldr	r3, [pc, #52]	; (8000cd4 <HAL_RCC_OscConfig+0x29c>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f413 7f00 	tst.w	r3, #512	; 0x200
 8000ca4:	d106      	bne.n	8000cb4 <HAL_RCC_OscConfig+0x27c>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000ca6:	f7ff faad 	bl	8000204 <HAL_GetTick>
 8000caa:	1b80      	subs	r0, r0, r6
 8000cac:	2802      	cmp	r0, #2
 8000cae:	d9f5      	bls.n	8000c9c <HAL_RCC_OscConfig+0x264>
            return HAL_TIMEOUT;
 8000cb0:	2303      	movs	r3, #3
 8000cb2:	e136      	b.n	8000f22 <HAL_RCC_OscConfig+0x4ea>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000cb4:	4a07      	ldr	r2, [pc, #28]	; (8000cd4 <HAL_RCC_OscConfig+0x29c>)
 8000cb6:	6853      	ldr	r3, [r2, #4]
 8000cb8:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000cbc:	6a21      	ldr	r1, [r4, #32]
 8000cbe:	430b      	orrs	r3, r1
 8000cc0:	6053      	str	r3, [r2, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000cc2:	6853      	ldr	r3, [r2, #4]
 8000cc4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000cc8:	69e1      	ldr	r1, [r4, #28]
 8000cca:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8000cce:	6053      	str	r3, [r2, #4]
 8000cd0:	e791      	b.n	8000bf6 <HAL_RCC_OscConfig+0x1be>
 8000cd2:	bf00      	nop
 8000cd4:	40023800 	.word	0x40023800
 8000cd8:	42470000 	.word	0x42470000
 8000cdc:	08001f30 	.word	0x08001f30
 8000ce0:	20000008 	.word	0x20000008
 8000ce4:	20000004 	.word	0x20000004
 8000ce8:	42470680 	.word	0x42470680
 8000cec:	42470020 	.word	0x42470020
        __HAL_RCC_MSI_DISABLE();
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	4b8f      	ldr	r3, [pc, #572]	; (8000f30 <HAL_RCC_OscConfig+0x4f8>)
 8000cf4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000cf6:	f7ff fa85 	bl	8000204 <HAL_GetTick>
 8000cfa:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8000cfc:	4b8d      	ldr	r3, [pc, #564]	; (8000f34 <HAL_RCC_OscConfig+0x4fc>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f413 7f00 	tst.w	r3, #512	; 0x200
 8000d04:	f43f af77 	beq.w	8000bf6 <HAL_RCC_OscConfig+0x1be>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000d08:	f7ff fa7c 	bl	8000204 <HAL_GetTick>
 8000d0c:	1b80      	subs	r0, r0, r6
 8000d0e:	2802      	cmp	r0, #2
 8000d10:	d9f4      	bls.n	8000cfc <HAL_RCC_OscConfig+0x2c4>
            return HAL_TIMEOUT;
 8000d12:	2303      	movs	r3, #3
 8000d14:	e105      	b.n	8000f22 <HAL_RCC_OscConfig+0x4ea>
      __HAL_RCC_LSI_DISABLE();
 8000d16:	2200      	movs	r2, #0
 8000d18:	4b87      	ldr	r3, [pc, #540]	; (8000f38 <HAL_RCC_OscConfig+0x500>)
 8000d1a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000d1c:	f7ff fa72 	bl	8000204 <HAL_GetTick>
 8000d20:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8000d22:	4b84      	ldr	r3, [pc, #528]	; (8000f34 <HAL_RCC_OscConfig+0x4fc>)
 8000d24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d26:	f013 0f02 	tst.w	r3, #2
 8000d2a:	d006      	beq.n	8000d3a <HAL_RCC_OscConfig+0x302>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d2c:	f7ff fa6a 	bl	8000204 <HAL_GetTick>
 8000d30:	1b80      	subs	r0, r0, r6
 8000d32:	2802      	cmp	r0, #2
 8000d34:	d9f5      	bls.n	8000d22 <HAL_RCC_OscConfig+0x2ea>
          return HAL_TIMEOUT;
 8000d36:	2303      	movs	r3, #3
 8000d38:	e0f3      	b.n	8000f22 <HAL_RCC_OscConfig+0x4ea>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d3a:	6823      	ldr	r3, [r4, #0]
 8000d3c:	f013 0f04 	tst.w	r3, #4
 8000d40:	d07a      	beq.n	8000e38 <HAL_RCC_OscConfig+0x400>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d42:	4b7c      	ldr	r3, [pc, #496]	; (8000f34 <HAL_RCC_OscConfig+0x4fc>)
 8000d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d46:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000d4a:	d131      	bne.n	8000db0 <HAL_RCC_OscConfig+0x378>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d4c:	4b79      	ldr	r3, [pc, #484]	; (8000f34 <HAL_RCC_OscConfig+0x4fc>)
 8000d4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d50:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000d54:	625a      	str	r2, [r3, #36]	; 0x24
 8000d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d5c:	9301      	str	r3, [sp, #4]
 8000d5e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000d60:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d62:	4b76      	ldr	r3, [pc, #472]	; (8000f3c <HAL_RCC_OscConfig+0x504>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000d6a:	d023      	beq.n	8000db4 <HAL_RCC_OscConfig+0x37c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d6c:	68a3      	ldr	r3, [r4, #8]
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	d034      	beq.n	8000ddc <HAL_RCC_OscConfig+0x3a4>
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d138      	bne.n	8000de8 <HAL_RCC_OscConfig+0x3b0>
 8000d76:	4b6f      	ldr	r3, [pc, #444]	; (8000f34 <HAL_RCC_OscConfig+0x4fc>)
 8000d78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d7a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000d7e:	635a      	str	r2, [r3, #52]	; 0x34
 8000d80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000d86:	635a      	str	r2, [r3, #52]	; 0x34
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000d88:	68a3      	ldr	r3, [r4, #8]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d042      	beq.n	8000e14 <HAL_RCC_OscConfig+0x3dc>
      tickstart = HAL_GetTick();
 8000d8e:	f7ff fa39 	bl	8000204 <HAL_GetTick>
 8000d92:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000d94:	4b67      	ldr	r3, [pc, #412]	; (8000f34 <HAL_RCC_OscConfig+0x4fc>)
 8000d96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d98:	f413 7f00 	tst.w	r3, #512	; 0x200
 8000d9c:	d14b      	bne.n	8000e36 <HAL_RCC_OscConfig+0x3fe>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d9e:	f7ff fa31 	bl	8000204 <HAL_GetTick>
 8000da2:	1bc0      	subs	r0, r0, r7
 8000da4:	f241 3388 	movw	r3, #5000	; 0x1388
 8000da8:	4298      	cmp	r0, r3
 8000daa:	d9f3      	bls.n	8000d94 <HAL_RCC_OscConfig+0x35c>
          return HAL_TIMEOUT;
 8000dac:	2303      	movs	r3, #3
 8000dae:	e0b8      	b.n	8000f22 <HAL_RCC_OscConfig+0x4ea>
    FlagStatus       pwrclkchanged = RESET;
 8000db0:	2600      	movs	r6, #0
 8000db2:	e7d6      	b.n	8000d62 <HAL_RCC_OscConfig+0x32a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000db4:	4a61      	ldr	r2, [pc, #388]	; (8000f3c <HAL_RCC_OscConfig+0x504>)
 8000db6:	6813      	ldr	r3, [r2, #0]
 8000db8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dbc:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8000dbe:	f7ff fa21 	bl	8000204 <HAL_GetTick>
 8000dc2:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000dc4:	4b5d      	ldr	r3, [pc, #372]	; (8000f3c <HAL_RCC_OscConfig+0x504>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000dcc:	d1ce      	bne.n	8000d6c <HAL_RCC_OscConfig+0x334>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000dce:	f7ff fa19 	bl	8000204 <HAL_GetTick>
 8000dd2:	1bc0      	subs	r0, r0, r7
 8000dd4:	2864      	cmp	r0, #100	; 0x64
 8000dd6:	d9f5      	bls.n	8000dc4 <HAL_RCC_OscConfig+0x38c>
          return HAL_TIMEOUT;
 8000dd8:	2303      	movs	r3, #3
 8000dda:	e0a2      	b.n	8000f22 <HAL_RCC_OscConfig+0x4ea>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ddc:	4a55      	ldr	r2, [pc, #340]	; (8000f34 <HAL_RCC_OscConfig+0x4fc>)
 8000dde:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8000de0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000de4:	6353      	str	r3, [r2, #52]	; 0x34
 8000de6:	e7cf      	b.n	8000d88 <HAL_RCC_OscConfig+0x350>
 8000de8:	2b05      	cmp	r3, #5
 8000dea:	d009      	beq.n	8000e00 <HAL_RCC_OscConfig+0x3c8>
 8000dec:	4b51      	ldr	r3, [pc, #324]	; (8000f34 <HAL_RCC_OscConfig+0x4fc>)
 8000dee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000df0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000df4:	635a      	str	r2, [r3, #52]	; 0x34
 8000df6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000df8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000dfc:	635a      	str	r2, [r3, #52]	; 0x34
 8000dfe:	e7c3      	b.n	8000d88 <HAL_RCC_OscConfig+0x350>
 8000e00:	4b4c      	ldr	r3, [pc, #304]	; (8000f34 <HAL_RCC_OscConfig+0x4fc>)
 8000e02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e04:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000e08:	635a      	str	r2, [r3, #52]	; 0x34
 8000e0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000e10:	635a      	str	r2, [r3, #52]	; 0x34
 8000e12:	e7b9      	b.n	8000d88 <HAL_RCC_OscConfig+0x350>
      tickstart = HAL_GetTick();
 8000e14:	f7ff f9f6 	bl	8000204 <HAL_GetTick>
 8000e18:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8000e1a:	4b46      	ldr	r3, [pc, #280]	; (8000f34 <HAL_RCC_OscConfig+0x4fc>)
 8000e1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e1e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8000e22:	d008      	beq.n	8000e36 <HAL_RCC_OscConfig+0x3fe>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e24:	f7ff f9ee 	bl	8000204 <HAL_GetTick>
 8000e28:	1bc0      	subs	r0, r0, r7
 8000e2a:	f241 3388 	movw	r3, #5000	; 0x1388
 8000e2e:	4298      	cmp	r0, r3
 8000e30:	d9f3      	bls.n	8000e1a <HAL_RCC_OscConfig+0x3e2>
          return HAL_TIMEOUT;
 8000e32:	2303      	movs	r3, #3
 8000e34:	e075      	b.n	8000f22 <HAL_RCC_OscConfig+0x4ea>
    if(pwrclkchanged == SET)
 8000e36:	b9c6      	cbnz	r6, 8000e6a <HAL_RCC_OscConfig+0x432>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000e38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d070      	beq.n	8000f20 <HAL_RCC_OscConfig+0x4e8>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000e3e:	2d0c      	cmp	r5, #12
 8000e40:	d04c      	beq.n	8000edc <HAL_RCC_OscConfig+0x4a4>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000e42:	2b02      	cmp	r3, #2
 8000e44:	d017      	beq.n	8000e76 <HAL_RCC_OscConfig+0x43e>
        __HAL_RCC_PLL_DISABLE();
 8000e46:	2200      	movs	r2, #0
 8000e48:	4b3d      	ldr	r3, [pc, #244]	; (8000f40 <HAL_RCC_OscConfig+0x508>)
 8000e4a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000e4c:	f7ff f9da 	bl	8000204 <HAL_GetTick>
 8000e50:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8000e52:	4b38      	ldr	r3, [pc, #224]	; (8000f34 <HAL_RCC_OscConfig+0x4fc>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000e5a:	d03d      	beq.n	8000ed8 <HAL_RCC_OscConfig+0x4a0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e5c:	f7ff f9d2 	bl	8000204 <HAL_GetTick>
 8000e60:	1b00      	subs	r0, r0, r4
 8000e62:	2802      	cmp	r0, #2
 8000e64:	d9f5      	bls.n	8000e52 <HAL_RCC_OscConfig+0x41a>
            return HAL_TIMEOUT;
 8000e66:	2303      	movs	r3, #3
 8000e68:	e05b      	b.n	8000f22 <HAL_RCC_OscConfig+0x4ea>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e6a:	4a32      	ldr	r2, [pc, #200]	; (8000f34 <HAL_RCC_OscConfig+0x4fc>)
 8000e6c:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000e6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000e72:	6253      	str	r3, [r2, #36]	; 0x24
 8000e74:	e7e0      	b.n	8000e38 <HAL_RCC_OscConfig+0x400>
        __HAL_RCC_PLL_DISABLE();
 8000e76:	2200      	movs	r2, #0
 8000e78:	4b31      	ldr	r3, [pc, #196]	; (8000f40 <HAL_RCC_OscConfig+0x508>)
 8000e7a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000e7c:	f7ff f9c2 	bl	8000204 <HAL_GetTick>
 8000e80:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8000e82:	4b2c      	ldr	r3, [pc, #176]	; (8000f34 <HAL_RCC_OscConfig+0x4fc>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000e8a:	d006      	beq.n	8000e9a <HAL_RCC_OscConfig+0x462>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e8c:	f7ff f9ba 	bl	8000204 <HAL_GetTick>
 8000e90:	1b40      	subs	r0, r0, r5
 8000e92:	2802      	cmp	r0, #2
 8000e94:	d9f5      	bls.n	8000e82 <HAL_RCC_OscConfig+0x44a>
            return HAL_TIMEOUT;
 8000e96:	2303      	movs	r3, #3
 8000e98:	e043      	b.n	8000f22 <HAL_RCC_OscConfig+0x4ea>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000e9a:	4926      	ldr	r1, [pc, #152]	; (8000f34 <HAL_RCC_OscConfig+0x4fc>)
 8000e9c:	688b      	ldr	r3, [r1, #8]
 8000e9e:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8000ea2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000ea4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8000ea6:	4302      	orrs	r2, r0
 8000ea8:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8000eaa:	4302      	orrs	r2, r0
 8000eac:	4313      	orrs	r3, r2
 8000eae:	608b      	str	r3, [r1, #8]
        __HAL_RCC_PLL_ENABLE();
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	4b23      	ldr	r3, [pc, #140]	; (8000f40 <HAL_RCC_OscConfig+0x508>)
 8000eb4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000eb6:	f7ff f9a5 	bl	8000204 <HAL_GetTick>
 8000eba:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8000ebc:	4b1d      	ldr	r3, [pc, #116]	; (8000f34 <HAL_RCC_OscConfig+0x4fc>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000ec4:	d106      	bne.n	8000ed4 <HAL_RCC_OscConfig+0x49c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ec6:	f7ff f99d 	bl	8000204 <HAL_GetTick>
 8000eca:	1b00      	subs	r0, r0, r4
 8000ecc:	2802      	cmp	r0, #2
 8000ece:	d9f5      	bls.n	8000ebc <HAL_RCC_OscConfig+0x484>
            return HAL_TIMEOUT;
 8000ed0:	2303      	movs	r3, #3
 8000ed2:	e026      	b.n	8000f22 <HAL_RCC_OscConfig+0x4ea>
  return HAL_OK;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	e024      	b.n	8000f22 <HAL_RCC_OscConfig+0x4ea>
 8000ed8:	2300      	movs	r3, #0
 8000eda:	e022      	b.n	8000f22 <HAL_RCC_OscConfig+0x4ea>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000edc:	2b01      	cmp	r3, #1
 8000ede:	d023      	beq.n	8000f28 <HAL_RCC_OscConfig+0x4f0>
        pll_config = RCC->CFGR;
 8000ee0:	4b14      	ldr	r3, [pc, #80]	; (8000f34 <HAL_RCC_OscConfig+0x4fc>)
 8000ee2:	689b      	ldr	r3, [r3, #8]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000ee4:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8000ee8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000eea:	4291      	cmp	r1, r2
 8000eec:	d001      	beq.n	8000ef2 <HAL_RCC_OscConfig+0x4ba>
          return HAL_ERROR;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	e017      	b.n	8000f22 <HAL_RCC_OscConfig+0x4ea>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8000ef2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000ef6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000ef8:	428a      	cmp	r2, r1
 8000efa:	d001      	beq.n	8000f00 <HAL_RCC_OscConfig+0x4c8>
          return HAL_ERROR;
 8000efc:	2301      	movs	r3, #1
 8000efe:	e010      	b.n	8000f22 <HAL_RCC_OscConfig+0x4ea>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8000f00:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000f04:	6b22      	ldr	r2, [r4, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d010      	beq.n	8000f2c <HAL_RCC_OscConfig+0x4f4>
          return HAL_ERROR;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e009      	b.n	8000f22 <HAL_RCC_OscConfig+0x4ea>
    return HAL_ERROR;
 8000f0e:	2301      	movs	r3, #1
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	4770      	bx	lr
        return HAL_ERROR;
 8000f14:	2301      	movs	r3, #1
 8000f16:	e004      	b.n	8000f22 <HAL_RCC_OscConfig+0x4ea>
        return HAL_ERROR;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	e002      	b.n	8000f22 <HAL_RCC_OscConfig+0x4ea>
            return HAL_ERROR;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	e000      	b.n	8000f22 <HAL_RCC_OscConfig+0x4ea>
  return HAL_OK;
 8000f20:	2300      	movs	r3, #0
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	b003      	add	sp, #12
 8000f26:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return HAL_ERROR;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	e7fa      	b.n	8000f22 <HAL_RCC_OscConfig+0x4ea>
  return HAL_OK;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	e7f8      	b.n	8000f22 <HAL_RCC_OscConfig+0x4ea>
 8000f30:	42470020 	.word	0x42470020
 8000f34:	40023800 	.word	0x40023800
 8000f38:	42470680 	.word	0x42470680
 8000f3c:	40007000 	.word	0x40007000
 8000f40:	42470060 	.word	0x42470060

08000f44 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8000f44:	4b17      	ldr	r3, [pc, #92]	; (8000fa4 <HAL_RCC_GetSysClockFreq+0x60>)
 8000f46:	6898      	ldr	r0, [r3, #8]
  switch (tmpreg & RCC_CFGR_SWS)
 8000f48:	f000 020c 	and.w	r2, r0, #12
 8000f4c:	2a08      	cmp	r2, #8
 8000f4e:	d026      	beq.n	8000f9e <HAL_RCC_GetSysClockFreq+0x5a>
 8000f50:	2a0c      	cmp	r2, #12
 8000f52:	d00c      	beq.n	8000f6e <HAL_RCC_GetSysClockFreq+0x2a>
 8000f54:	2a04      	cmp	r2, #4
 8000f56:	d008      	beq.n	8000f6a <HAL_RCC_GetSysClockFreq+0x26>
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8000f58:	4b12      	ldr	r3, [pc, #72]	; (8000fa4 <HAL_RCC_GetSysClockFreq+0x60>)
 8000f5a:	6858      	ldr	r0, [r3, #4]
 8000f5c:	f3c0 3042 	ubfx	r0, r0, #13, #3
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8000f60:	1c43      	adds	r3, r0, #1
 8000f62:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000f66:	4098      	lsls	r0, r3
      break;
 8000f68:	4770      	bx	lr
      sysclockfreq = HSI_VALUE;
 8000f6a:	480f      	ldr	r0, [pc, #60]	; (8000fa8 <HAL_RCC_GetSysClockFreq+0x64>)
 8000f6c:	4770      	bx	lr
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8000f6e:	f3c0 4283 	ubfx	r2, r0, #18, #4
 8000f72:	490e      	ldr	r1, [pc, #56]	; (8000fac <HAL_RCC_GetSysClockFreq+0x68>)
 8000f74:	5c8a      	ldrb	r2, [r1, r2]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8000f76:	f3c0 5081 	ubfx	r0, r0, #22, #2
 8000f7a:	3001      	adds	r0, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000f7c:	4b09      	ldr	r3, [pc, #36]	; (8000fa4 <HAL_RCC_GetSysClockFreq+0x60>)
 8000f7e:	689b      	ldr	r3, [r3, #8]
 8000f80:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000f84:	d005      	beq.n	8000f92 <HAL_RCC_GetSysClockFreq+0x4e>
        pllvco = (HSE_VALUE * pllm) / plld;
 8000f86:	4b0a      	ldr	r3, [pc, #40]	; (8000fb0 <HAL_RCC_GetSysClockFreq+0x6c>)
 8000f88:	fb03 f302 	mul.w	r3, r3, r2
 8000f8c:	fbb3 f0f0 	udiv	r0, r3, r0
 8000f90:	4770      	bx	lr
        pllvco = (HSI_VALUE * pllm) / plld;
 8000f92:	4b05      	ldr	r3, [pc, #20]	; (8000fa8 <HAL_RCC_GetSysClockFreq+0x64>)
 8000f94:	fb03 f302 	mul.w	r3, r3, r2
 8000f98:	fbb3 f0f0 	udiv	r0, r3, r0
 8000f9c:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8000f9e:	4804      	ldr	r0, [pc, #16]	; (8000fb0 <HAL_RCC_GetSysClockFreq+0x6c>)
}
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	40023800 	.word	0x40023800
 8000fa8:	00f42400 	.word	0x00f42400
 8000fac:	08001f40 	.word	0x08001f40
 8000fb0:	016e3600 	.word	0x016e3600

08000fb4 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8000fb4:	2800      	cmp	r0, #0
 8000fb6:	f000 80dc 	beq.w	8001172 <HAL_RCC_ClockConfig+0x1be>
{
 8000fba:	b570      	push	{r4, r5, r6, lr}
 8000fbc:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000fbe:	4b6f      	ldr	r3, [pc, #444]	; (800117c <HAL_RCC_ClockConfig+0x1c8>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f003 0301 	and.w	r3, r3, #1
 8000fc6:	428b      	cmp	r3, r1
 8000fc8:	d214      	bcs.n	8000ff4 <HAL_RCC_ClockConfig+0x40>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000fca:	2901      	cmp	r1, #1
 8000fcc:	d00c      	beq.n	8000fe8 <HAL_RCC_ClockConfig+0x34>
 8000fce:	4a6b      	ldr	r2, [pc, #428]	; (800117c <HAL_RCC_ClockConfig+0x1c8>)
 8000fd0:	6813      	ldr	r3, [r2, #0]
 8000fd2:	f023 0301 	bic.w	r3, r3, #1
 8000fd6:	430b      	orrs	r3, r1
 8000fd8:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000fda:	6813      	ldr	r3, [r2, #0]
 8000fdc:	f003 0301 	and.w	r3, r3, #1
 8000fe0:	4299      	cmp	r1, r3
 8000fe2:	d007      	beq.n	8000ff4 <HAL_RCC_ClockConfig+0x40>
      return HAL_ERROR;
 8000fe4:	2001      	movs	r0, #1
 8000fe6:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000fe8:	4a64      	ldr	r2, [pc, #400]	; (800117c <HAL_RCC_ClockConfig+0x1c8>)
 8000fea:	6813      	ldr	r3, [r2, #0]
 8000fec:	f043 0304 	orr.w	r3, r3, #4
 8000ff0:	6013      	str	r3, [r2, #0]
 8000ff2:	e7ec      	b.n	8000fce <HAL_RCC_ClockConfig+0x1a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000ff4:	6823      	ldr	r3, [r4, #0]
 8000ff6:	f013 0f02 	tst.w	r3, #2
 8000ffa:	d006      	beq.n	800100a <HAL_RCC_ClockConfig+0x56>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000ffc:	4a60      	ldr	r2, [pc, #384]	; (8001180 <HAL_RCC_ClockConfig+0x1cc>)
 8000ffe:	6893      	ldr	r3, [r2, #8]
 8001000:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001004:	68a0      	ldr	r0, [r4, #8]
 8001006:	4303      	orrs	r3, r0
 8001008:	6093      	str	r3, [r2, #8]
 800100a:	460e      	mov	r6, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800100c:	6823      	ldr	r3, [r4, #0]
 800100e:	f013 0f01 	tst.w	r3, #1
 8001012:	d06c      	beq.n	80010ee <HAL_RCC_ClockConfig+0x13a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001014:	6863      	ldr	r3, [r4, #4]
 8001016:	2b02      	cmp	r3, #2
 8001018:	d027      	beq.n	800106a <HAL_RCC_ClockConfig+0xb6>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800101a:	2b03      	cmp	r3, #3
 800101c:	d02c      	beq.n	8001078 <HAL_RCC_ClockConfig+0xc4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800101e:	2b01      	cmp	r3, #1
 8001020:	d031      	beq.n	8001086 <HAL_RCC_ClockConfig+0xd2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001022:	4a57      	ldr	r2, [pc, #348]	; (8001180 <HAL_RCC_ClockConfig+0x1cc>)
 8001024:	6812      	ldr	r2, [r2, #0]
 8001026:	f412 7f00 	tst.w	r2, #512	; 0x200
 800102a:	f000 80a4 	beq.w	8001176 <HAL_RCC_ClockConfig+0x1c2>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800102e:	4954      	ldr	r1, [pc, #336]	; (8001180 <HAL_RCC_ClockConfig+0x1cc>)
 8001030:	688a      	ldr	r2, [r1, #8]
 8001032:	f022 0203 	bic.w	r2, r2, #3
 8001036:	4313      	orrs	r3, r2
 8001038:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 800103a:	f7ff f8e3 	bl	8000204 <HAL_GetTick>
 800103e:	4605      	mov	r5, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001040:	6863      	ldr	r3, [r4, #4]
 8001042:	2b02      	cmp	r3, #2
 8001044:	d026      	beq.n	8001094 <HAL_RCC_ClockConfig+0xe0>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001046:	2b03      	cmp	r3, #3
 8001048:	d033      	beq.n	80010b2 <HAL_RCC_ClockConfig+0xfe>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800104a:	2b01      	cmp	r3, #1
 800104c:	d040      	beq.n	80010d0 <HAL_RCC_ClockConfig+0x11c>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800104e:	4b4c      	ldr	r3, [pc, #304]	; (8001180 <HAL_RCC_ClockConfig+0x1cc>)
 8001050:	689b      	ldr	r3, [r3, #8]
 8001052:	f013 0f0c 	tst.w	r3, #12
 8001056:	d04a      	beq.n	80010ee <HAL_RCC_ClockConfig+0x13a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001058:	f7ff f8d4 	bl	8000204 <HAL_GetTick>
 800105c:	1b40      	subs	r0, r0, r5
 800105e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001062:	4298      	cmp	r0, r3
 8001064:	d9f3      	bls.n	800104e <HAL_RCC_ClockConfig+0x9a>
          return HAL_TIMEOUT;
 8001066:	2003      	movs	r0, #3
 8001068:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800106a:	4a45      	ldr	r2, [pc, #276]	; (8001180 <HAL_RCC_ClockConfig+0x1cc>)
 800106c:	6812      	ldr	r2, [r2, #0]
 800106e:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8001072:	d1dc      	bne.n	800102e <HAL_RCC_ClockConfig+0x7a>
        return HAL_ERROR;
 8001074:	2001      	movs	r0, #1
 8001076:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001078:	4a41      	ldr	r2, [pc, #260]	; (8001180 <HAL_RCC_ClockConfig+0x1cc>)
 800107a:	6812      	ldr	r2, [r2, #0]
 800107c:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001080:	d1d5      	bne.n	800102e <HAL_RCC_ClockConfig+0x7a>
        return HAL_ERROR;
 8001082:	2001      	movs	r0, #1
 8001084:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001086:	4a3e      	ldr	r2, [pc, #248]	; (8001180 <HAL_RCC_ClockConfig+0x1cc>)
 8001088:	6812      	ldr	r2, [r2, #0]
 800108a:	f012 0f02 	tst.w	r2, #2
 800108e:	d1ce      	bne.n	800102e <HAL_RCC_ClockConfig+0x7a>
        return HAL_ERROR;
 8001090:	2001      	movs	r0, #1
 8001092:	bd70      	pop	{r4, r5, r6, pc}
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001094:	4b3a      	ldr	r3, [pc, #232]	; (8001180 <HAL_RCC_ClockConfig+0x1cc>)
 8001096:	689b      	ldr	r3, [r3, #8]
 8001098:	f003 030c 	and.w	r3, r3, #12
 800109c:	2b08      	cmp	r3, #8
 800109e:	d026      	beq.n	80010ee <HAL_RCC_ClockConfig+0x13a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010a0:	f7ff f8b0 	bl	8000204 <HAL_GetTick>
 80010a4:	1b40      	subs	r0, r0, r5
 80010a6:	f241 3388 	movw	r3, #5000	; 0x1388
 80010aa:	4298      	cmp	r0, r3
 80010ac:	d9f2      	bls.n	8001094 <HAL_RCC_ClockConfig+0xe0>
          return HAL_TIMEOUT;
 80010ae:	2003      	movs	r0, #3
 80010b0:	bd70      	pop	{r4, r5, r6, pc}
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010b2:	4b33      	ldr	r3, [pc, #204]	; (8001180 <HAL_RCC_ClockConfig+0x1cc>)
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	f003 030c 	and.w	r3, r3, #12
 80010ba:	2b0c      	cmp	r3, #12
 80010bc:	d017      	beq.n	80010ee <HAL_RCC_ClockConfig+0x13a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010be:	f7ff f8a1 	bl	8000204 <HAL_GetTick>
 80010c2:	1b40      	subs	r0, r0, r5
 80010c4:	f241 3388 	movw	r3, #5000	; 0x1388
 80010c8:	4298      	cmp	r0, r3
 80010ca:	d9f2      	bls.n	80010b2 <HAL_RCC_ClockConfig+0xfe>
          return HAL_TIMEOUT;
 80010cc:	2003      	movs	r0, #3
 80010ce:	bd70      	pop	{r4, r5, r6, pc}
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80010d0:	4b2b      	ldr	r3, [pc, #172]	; (8001180 <HAL_RCC_ClockConfig+0x1cc>)
 80010d2:	689b      	ldr	r3, [r3, #8]
 80010d4:	f003 030c 	and.w	r3, r3, #12
 80010d8:	2b04      	cmp	r3, #4
 80010da:	d008      	beq.n	80010ee <HAL_RCC_ClockConfig+0x13a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010dc:	f7ff f892 	bl	8000204 <HAL_GetTick>
 80010e0:	1b40      	subs	r0, r0, r5
 80010e2:	f241 3388 	movw	r3, #5000	; 0x1388
 80010e6:	4298      	cmp	r0, r3
 80010e8:	d9f2      	bls.n	80010d0 <HAL_RCC_ClockConfig+0x11c>
          return HAL_TIMEOUT;
 80010ea:	2003      	movs	r0, #3
 80010ec:	bd70      	pop	{r4, r5, r6, pc}
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80010ee:	4b23      	ldr	r3, [pc, #140]	; (800117c <HAL_RCC_ClockConfig+0x1c8>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f003 0301 	and.w	r3, r3, #1
 80010f6:	429e      	cmp	r6, r3
 80010f8:	d214      	bcs.n	8001124 <HAL_RCC_ClockConfig+0x170>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010fa:	2e01      	cmp	r6, #1
 80010fc:	d00c      	beq.n	8001118 <HAL_RCC_ClockConfig+0x164>
 80010fe:	4a1f      	ldr	r2, [pc, #124]	; (800117c <HAL_RCC_ClockConfig+0x1c8>)
 8001100:	6813      	ldr	r3, [r2, #0]
 8001102:	f023 0301 	bic.w	r3, r3, #1
 8001106:	4333      	orrs	r3, r6
 8001108:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800110a:	6813      	ldr	r3, [r2, #0]
 800110c:	f003 0301 	and.w	r3, r3, #1
 8001110:	429e      	cmp	r6, r3
 8001112:	d007      	beq.n	8001124 <HAL_RCC_ClockConfig+0x170>
      return HAL_ERROR;
 8001114:	2001      	movs	r0, #1
}
 8001116:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001118:	4a18      	ldr	r2, [pc, #96]	; (800117c <HAL_RCC_ClockConfig+0x1c8>)
 800111a:	6813      	ldr	r3, [r2, #0]
 800111c:	f043 0304 	orr.w	r3, r3, #4
 8001120:	6013      	str	r3, [r2, #0]
 8001122:	e7ec      	b.n	80010fe <HAL_RCC_ClockConfig+0x14a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001124:	6823      	ldr	r3, [r4, #0]
 8001126:	f013 0f04 	tst.w	r3, #4
 800112a:	d006      	beq.n	800113a <HAL_RCC_ClockConfig+0x186>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800112c:	4a14      	ldr	r2, [pc, #80]	; (8001180 <HAL_RCC_ClockConfig+0x1cc>)
 800112e:	6893      	ldr	r3, [r2, #8]
 8001130:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001134:	68e1      	ldr	r1, [r4, #12]
 8001136:	430b      	orrs	r3, r1
 8001138:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800113a:	6823      	ldr	r3, [r4, #0]
 800113c:	f013 0f08 	tst.w	r3, #8
 8001140:	d007      	beq.n	8001152 <HAL_RCC_ClockConfig+0x19e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001142:	4a0f      	ldr	r2, [pc, #60]	; (8001180 <HAL_RCC_ClockConfig+0x1cc>)
 8001144:	6893      	ldr	r3, [r2, #8]
 8001146:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800114a:	6921      	ldr	r1, [r4, #16]
 800114c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001150:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001152:	f7ff fef7 	bl	8000f44 <HAL_RCC_GetSysClockFreq>
 8001156:	4b0a      	ldr	r3, [pc, #40]	; (8001180 <HAL_RCC_ClockConfig+0x1cc>)
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800115e:	4a09      	ldr	r2, [pc, #36]	; (8001184 <HAL_RCC_ClockConfig+0x1d0>)
 8001160:	5cd3      	ldrb	r3, [r2, r3]
 8001162:	40d8      	lsrs	r0, r3
 8001164:	4b08      	ldr	r3, [pc, #32]	; (8001188 <HAL_RCC_ClockConfig+0x1d4>)
 8001166:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8001168:	4b08      	ldr	r3, [pc, #32]	; (800118c <HAL_RCC_ClockConfig+0x1d8>)
 800116a:	6818      	ldr	r0, [r3, #0]
 800116c:	f7ff f806 	bl	800017c <HAL_InitTick>
  return status;
 8001170:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001172:	2001      	movs	r0, #1
 8001174:	4770      	bx	lr
        return HAL_ERROR;
 8001176:	2001      	movs	r0, #1
 8001178:	bd70      	pop	{r4, r5, r6, pc}
 800117a:	bf00      	nop
 800117c:	40023c00 	.word	0x40023c00
 8001180:	40023800 	.word	0x40023800
 8001184:	08001f30 	.word	0x08001f30
 8001188:	20000008 	.word	0x20000008
 800118c:	20000004 	.word	0x20000004

08001190 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001190:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001192:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001196:	d02c      	beq.n	80011f2 <TIM_Base_SetConfig+0x62>
 8001198:	4a18      	ldr	r2, [pc, #96]	; (80011fc <TIM_Base_SetConfig+0x6c>)
 800119a:	4290      	cmp	r0, r2
 800119c:	d029      	beq.n	80011f2 <TIM_Base_SetConfig+0x62>
 800119e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80011a2:	4290      	cmp	r0, r2
 80011a4:	d025      	beq.n	80011f2 <TIM_Base_SetConfig+0x62>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80011a6:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80011aa:	d012      	beq.n	80011d2 <TIM_Base_SetConfig+0x42>
 80011ac:	4a13      	ldr	r2, [pc, #76]	; (80011fc <TIM_Base_SetConfig+0x6c>)
 80011ae:	4290      	cmp	r0, r2
 80011b0:	d00f      	beq.n	80011d2 <TIM_Base_SetConfig+0x42>
 80011b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80011b6:	4290      	cmp	r0, r2
 80011b8:	d00b      	beq.n	80011d2 <TIM_Base_SetConfig+0x42>
 80011ba:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 80011be:	4290      	cmp	r0, r2
 80011c0:	d007      	beq.n	80011d2 <TIM_Base_SetConfig+0x42>
 80011c2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80011c6:	4290      	cmp	r0, r2
 80011c8:	d003      	beq.n	80011d2 <TIM_Base_SetConfig+0x42>
 80011ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80011ce:	4290      	cmp	r0, r2
 80011d0:	d103      	bne.n	80011da <TIM_Base_SetConfig+0x4a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80011d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80011d6:	68ca      	ldr	r2, [r1, #12]
 80011d8:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80011da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80011de:	690a      	ldr	r2, [r1, #16]
 80011e0:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80011e2:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80011e4:	688b      	ldr	r3, [r1, #8]
 80011e6:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80011e8:	680b      	ldr	r3, [r1, #0]
 80011ea:	6283      	str	r3, [r0, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80011ec:	2301      	movs	r3, #1
 80011ee:	6143      	str	r3, [r0, #20]
 80011f0:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80011f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80011f6:	684a      	ldr	r2, [r1, #4]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	e7d4      	b.n	80011a6 <TIM_Base_SetConfig+0x16>
 80011fc:	40000400 	.word	0x40000400

08001200 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001200:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001202:	6a03      	ldr	r3, [r0, #32]
 8001204:	f023 0301 	bic.w	r3, r3, #1
 8001208:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800120a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800120c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800120e:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001210:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001214:	680d      	ldr	r5, [r1, #0]
 8001216:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001218:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800121c:	688d      	ldr	r5, [r1, #8]
 800121e:	432b      	orrs	r3, r5

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001220:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001222:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001224:	684a      	ldr	r2, [r1, #4]
 8001226:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001228:	6203      	str	r3, [r0, #32]
}
 800122a:	bc30      	pop	{r4, r5}
 800122c:	4770      	bx	lr

0800122e <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800122e:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001230:	6a03      	ldr	r3, [r0, #32]
 8001232:	f023 0310 	bic.w	r3, r3, #16
 8001236:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001238:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800123a:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800123c:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800123e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001242:	680d      	ldr	r5, [r1, #0]
 8001244:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001248:	f023 0320 	bic.w	r3, r3, #32
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800124c:	688d      	ldr	r5, [r1, #8]
 800124e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001252:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001254:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001256:	684a      	ldr	r2, [r1, #4]
 8001258:	6382      	str	r2, [r0, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800125a:	6203      	str	r3, [r0, #32]
}
 800125c:	bc30      	pop	{r4, r5}
 800125e:	4770      	bx	lr

08001260 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001260:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001262:	6a03      	ldr	r3, [r0, #32]
 8001264:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001268:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800126a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800126c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800126e:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001270:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001274:	680d      	ldr	r5, [r1, #0]
 8001276:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001278:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800127c:	688d      	ldr	r5, [r1, #8]
 800127e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001282:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001284:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001286:	684a      	ldr	r2, [r1, #4]
 8001288:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800128a:	6203      	str	r3, [r0, #32]
}
 800128c:	bc30      	pop	{r4, r5}
 800128e:	4770      	bx	lr

08001290 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001290:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001292:	6a03      	ldr	r3, [r0, #32]
 8001294:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001298:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800129a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800129c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800129e:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80012a0:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80012a4:	680d      	ldr	r5, [r1, #0]
 80012a6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80012aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80012ae:	688d      	ldr	r5, [r1, #8]
 80012b0:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80012b4:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80012b6:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80012b8:	684a      	ldr	r2, [r1, #4]
 80012ba:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80012bc:	6203      	str	r3, [r0, #32]
}
 80012be:	bc30      	pop	{r4, r5}
 80012c0:	4770      	bx	lr

080012c2 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80012c2:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80012c4:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80012c6:	6a04      	ldr	r4, [r0, #32]
 80012c8:	f024 0401 	bic.w	r4, r4, #1
 80012cc:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80012ce:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80012d0:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80012d4:	ea44 1202 	orr.w	r2, r4, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80012d8:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 80012dc:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80012de:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80012e0:	6203      	str	r3, [r0, #32]
}
 80012e2:	bc10      	pop	{r4}
 80012e4:	4770      	bx	lr

080012e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80012e6:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80012e8:	6a03      	ldr	r3, [r0, #32]
 80012ea:	f023 0310 	bic.w	r3, r3, #16
 80012ee:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80012f0:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 80012f2:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80012f4:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80012f8:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80012fc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8001300:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001304:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001306:	6203      	str	r3, [r0, #32]
}
 8001308:	bc10      	pop	{r4}
 800130a:	4770      	bx	lr

0800130c <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800130c:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800130e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001312:	4319      	orrs	r1, r3
 8001314:	f041 0107 	orr.w	r1, r1, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001318:	6081      	str	r1, [r0, #8]
 800131a:	4770      	bx	lr

0800131c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800131c:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800131e:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001320:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001324:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8001328:	4319      	orrs	r1, r3
 800132a:	430c      	orrs	r4, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800132c:	6084      	str	r4, [r0, #8]
}
 800132e:	bc10      	pop	{r4}
 8001330:	4770      	bx	lr

08001332 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8001332:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001334:	f001 011f 	and.w	r1, r1, #31
 8001338:	2301      	movs	r3, #1
 800133a:	fa03 f401 	lsl.w	r4, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800133e:	6a03      	ldr	r3, [r0, #32]
 8001340:	ea23 0304 	bic.w	r3, r3, r4
 8001344:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001346:	6a03      	ldr	r3, [r0, #32]
 8001348:	408a      	lsls	r2, r1
 800134a:	4313      	orrs	r3, r2
 800134c:	6203      	str	r3, [r0, #32]
}
 800134e:	bc10      	pop	{r4}
 8001350:	4770      	bx	lr

08001352 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8001352:	b1a8      	cbz	r0, 8001380 <HAL_TIM_Base_Init+0x2e>
{
 8001354:	b510      	push	{r4, lr}
 8001356:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8001358:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800135c:	b15b      	cbz	r3, 8001376 <HAL_TIM_Base_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 800135e:	2302      	movs	r3, #2
 8001360:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001364:	1d21      	adds	r1, r4, #4
 8001366:	6820      	ldr	r0, [r4, #0]
 8001368:	f7ff ff12 	bl	8001190 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800136c:	2301      	movs	r3, #1
 800136e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8001372:	2000      	movs	r0, #0
 8001374:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8001376:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 800137a:	f000 fcdf 	bl	8001d3c <HAL_TIM_Base_MspInit>
 800137e:	e7ee      	b.n	800135e <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8001380:	2001      	movs	r0, #1
 8001382:	4770      	bx	lr

08001384 <HAL_TIM_PWM_MspInit>:
{
 8001384:	4770      	bx	lr

08001386 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8001386:	b1a8      	cbz	r0, 80013b4 <HAL_TIM_PWM_Init+0x2e>
{
 8001388:	b510      	push	{r4, lr}
 800138a:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800138c:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001390:	b15b      	cbz	r3, 80013aa <HAL_TIM_PWM_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 8001392:	2302      	movs	r3, #2
 8001394:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001398:	1d21      	adds	r1, r4, #4
 800139a:	6820      	ldr	r0, [r4, #0]
 800139c:	f7ff fef8 	bl	8001190 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80013a0:	2301      	movs	r3, #1
 80013a2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 80013a6:	2000      	movs	r0, #0
 80013a8:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80013aa:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_TIM_PWM_MspInit(htim);
 80013ae:	f7ff ffe9 	bl	8001384 <HAL_TIM_PWM_MspInit>
 80013b2:	e7ee      	b.n	8001392 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 80013b4:	2001      	movs	r0, #1
 80013b6:	4770      	bx	lr

080013b8 <HAL_TIM_PWM_Start>:
{
 80013b8:	b510      	push	{r4, lr}
 80013ba:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80013bc:	2201      	movs	r2, #1
 80013be:	6800      	ldr	r0, [r0, #0]
 80013c0:	f7ff ffb7 	bl	8001332 <TIM_CCxChannelCmd>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80013c4:	6822      	ldr	r2, [r4, #0]
 80013c6:	6893      	ldr	r3, [r2, #8]
 80013c8:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80013cc:	2b06      	cmp	r3, #6
 80013ce:	d003      	beq.n	80013d8 <HAL_TIM_PWM_Start+0x20>
    __HAL_TIM_ENABLE(htim);
 80013d0:	6813      	ldr	r3, [r2, #0]
 80013d2:	f043 0301 	orr.w	r3, r3, #1
 80013d6:	6013      	str	r3, [r2, #0]
}
 80013d8:	2000      	movs	r0, #0
 80013da:	bd10      	pop	{r4, pc}

080013dc <HAL_TIM_PWM_ConfigChannel>:
{
 80013dc:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80013de:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d066      	beq.n	80014b4 <HAL_TIM_PWM_ConfigChannel+0xd8>
 80013e6:	460d      	mov	r5, r1
 80013e8:	4604      	mov	r4, r0
 80013ea:	2301      	movs	r3, #1
 80013ec:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 80013f0:	2302      	movs	r3, #2
 80013f2:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  switch (Channel)
 80013f6:	2a0c      	cmp	r2, #12
 80013f8:	d81a      	bhi.n	8001430 <HAL_TIM_PWM_ConfigChannel+0x54>
 80013fa:	e8df f002 	tbb	[pc, r2]
 80013fe:	1907      	.short	0x1907
 8001400:	19201919 	.word	0x19201919
 8001404:	19341919 	.word	0x19341919
 8001408:	1919      	.short	0x1919
 800140a:	47          	.byte	0x47
 800140b:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800140c:	6800      	ldr	r0, [r0, #0]
 800140e:	f7ff fef7 	bl	8001200 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001412:	6822      	ldr	r2, [r4, #0]
 8001414:	6993      	ldr	r3, [r2, #24]
 8001416:	f043 0308 	orr.w	r3, r3, #8
 800141a:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800141c:	6822      	ldr	r2, [r4, #0]
 800141e:	6993      	ldr	r3, [r2, #24]
 8001420:	f023 0304 	bic.w	r3, r3, #4
 8001424:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001426:	6822      	ldr	r2, [r4, #0]
 8001428:	6993      	ldr	r3, [r2, #24]
 800142a:	68e9      	ldr	r1, [r5, #12]
 800142c:	430b      	orrs	r3, r1
 800142e:	6193      	str	r3, [r2, #24]
  htim->State = HAL_TIM_STATE_READY;
 8001430:	2301      	movs	r3, #1
 8001432:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);
 8001436:	2000      	movs	r0, #0
 8001438:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  return HAL_OK;
 800143c:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800143e:	6800      	ldr	r0, [r0, #0]
 8001440:	f7ff fef5 	bl	800122e <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001444:	6822      	ldr	r2, [r4, #0]
 8001446:	6993      	ldr	r3, [r2, #24]
 8001448:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800144c:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800144e:	6822      	ldr	r2, [r4, #0]
 8001450:	6993      	ldr	r3, [r2, #24]
 8001452:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001456:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001458:	6822      	ldr	r2, [r4, #0]
 800145a:	6993      	ldr	r3, [r2, #24]
 800145c:	68e9      	ldr	r1, [r5, #12]
 800145e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001462:	6193      	str	r3, [r2, #24]
      break;
 8001464:	e7e4      	b.n	8001430 <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001466:	6800      	ldr	r0, [r0, #0]
 8001468:	f7ff fefa 	bl	8001260 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800146c:	6822      	ldr	r2, [r4, #0]
 800146e:	69d3      	ldr	r3, [r2, #28]
 8001470:	f043 0308 	orr.w	r3, r3, #8
 8001474:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001476:	6822      	ldr	r2, [r4, #0]
 8001478:	69d3      	ldr	r3, [r2, #28]
 800147a:	f023 0304 	bic.w	r3, r3, #4
 800147e:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001480:	6822      	ldr	r2, [r4, #0]
 8001482:	69d3      	ldr	r3, [r2, #28]
 8001484:	68e9      	ldr	r1, [r5, #12]
 8001486:	430b      	orrs	r3, r1
 8001488:	61d3      	str	r3, [r2, #28]
      break;
 800148a:	e7d1      	b.n	8001430 <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800148c:	6800      	ldr	r0, [r0, #0]
 800148e:	f7ff feff 	bl	8001290 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001492:	6822      	ldr	r2, [r4, #0]
 8001494:	69d3      	ldr	r3, [r2, #28]
 8001496:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800149a:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800149c:	6822      	ldr	r2, [r4, #0]
 800149e:	69d3      	ldr	r3, [r2, #28]
 80014a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80014a4:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80014a6:	6822      	ldr	r2, [r4, #0]
 80014a8:	69d3      	ldr	r3, [r2, #28]
 80014aa:	68e9      	ldr	r1, [r5, #12]
 80014ac:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80014b0:	61d3      	str	r3, [r2, #28]
      break;
 80014b2:	e7bd      	b.n	8001430 <HAL_TIM_PWM_ConfigChannel+0x54>
  __HAL_LOCK(htim);
 80014b4:	2002      	movs	r0, #2
}
 80014b6:	bd38      	pop	{r3, r4, r5, pc}

080014b8 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80014b8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d066      	beq.n	800158e <HAL_TIM_ConfigClockSource+0xd6>
{
 80014c0:	b510      	push	{r4, lr}
 80014c2:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80014c4:	2301      	movs	r3, #1
 80014c6:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 80014ca:	2302      	movs	r3, #2
 80014cc:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  tmpsmcr = htim->Instance->SMCR;
 80014d0:	6802      	ldr	r2, [r0, #0]
 80014d2:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80014d4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80014d8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80014dc:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80014de:	680b      	ldr	r3, [r1, #0]
 80014e0:	2b40      	cmp	r3, #64	; 0x40
 80014e2:	d04a      	beq.n	800157a <HAL_TIM_ConfigClockSource+0xc2>
 80014e4:	d913      	bls.n	800150e <HAL_TIM_ConfigClockSource+0x56>
 80014e6:	2b60      	cmp	r3, #96	; 0x60
 80014e8:	d03d      	beq.n	8001566 <HAL_TIM_ConfigClockSource+0xae>
 80014ea:	d91e      	bls.n	800152a <HAL_TIM_ConfigClockSource+0x72>
 80014ec:	2b70      	cmp	r3, #112	; 0x70
 80014ee:	d028      	beq.n	8001542 <HAL_TIM_ConfigClockSource+0x8a>
 80014f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80014f4:	d130      	bne.n	8001558 <HAL_TIM_ConfigClockSource+0xa0>
      TIM_ETR_SetConfig(htim->Instance,
 80014f6:	68cb      	ldr	r3, [r1, #12]
 80014f8:	684a      	ldr	r2, [r1, #4]
 80014fa:	6889      	ldr	r1, [r1, #8]
 80014fc:	6800      	ldr	r0, [r0, #0]
 80014fe:	f7ff ff0d 	bl	800131c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001502:	6822      	ldr	r2, [r4, #0]
 8001504:	6893      	ldr	r3, [r2, #8]
 8001506:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800150a:	6093      	str	r3, [r2, #8]
      break;
 800150c:	e024      	b.n	8001558 <HAL_TIM_ConfigClockSource+0xa0>
  switch (sClockSourceConfig->ClockSource)
 800150e:	2b10      	cmp	r3, #16
 8001510:	d006      	beq.n	8001520 <HAL_TIM_ConfigClockSource+0x68>
 8001512:	d904      	bls.n	800151e <HAL_TIM_ConfigClockSource+0x66>
 8001514:	2b20      	cmp	r3, #32
 8001516:	d003      	beq.n	8001520 <HAL_TIM_ConfigClockSource+0x68>
 8001518:	2b30      	cmp	r3, #48	; 0x30
 800151a:	d001      	beq.n	8001520 <HAL_TIM_ConfigClockSource+0x68>
 800151c:	e01c      	b.n	8001558 <HAL_TIM_ConfigClockSource+0xa0>
 800151e:	b9db      	cbnz	r3, 8001558 <HAL_TIM_ConfigClockSource+0xa0>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001520:	4619      	mov	r1, r3
 8001522:	6820      	ldr	r0, [r4, #0]
 8001524:	f7ff fef2 	bl	800130c <TIM_ITRx_SetConfig>
      break;
 8001528:	e016      	b.n	8001558 <HAL_TIM_ConfigClockSource+0xa0>
  switch (sClockSourceConfig->ClockSource)
 800152a:	2b50      	cmp	r3, #80	; 0x50
 800152c:	d114      	bne.n	8001558 <HAL_TIM_ConfigClockSource+0xa0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800152e:	68ca      	ldr	r2, [r1, #12]
 8001530:	6849      	ldr	r1, [r1, #4]
 8001532:	6800      	ldr	r0, [r0, #0]
 8001534:	f7ff fec5 	bl	80012c2 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001538:	2150      	movs	r1, #80	; 0x50
 800153a:	6820      	ldr	r0, [r4, #0]
 800153c:	f7ff fee6 	bl	800130c <TIM_ITRx_SetConfig>
      break;
 8001540:	e00a      	b.n	8001558 <HAL_TIM_ConfigClockSource+0xa0>
      TIM_ETR_SetConfig(htim->Instance,
 8001542:	68cb      	ldr	r3, [r1, #12]
 8001544:	684a      	ldr	r2, [r1, #4]
 8001546:	6889      	ldr	r1, [r1, #8]
 8001548:	6800      	ldr	r0, [r0, #0]
 800154a:	f7ff fee7 	bl	800131c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800154e:	6822      	ldr	r2, [r4, #0]
 8001550:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001552:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8001556:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8001558:	2301      	movs	r3, #1
 800155a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);
 800155e:	2000      	movs	r0, #0
 8001560:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  return HAL_OK;
 8001564:	bd10      	pop	{r4, pc}
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001566:	68ca      	ldr	r2, [r1, #12]
 8001568:	6849      	ldr	r1, [r1, #4]
 800156a:	6800      	ldr	r0, [r0, #0]
 800156c:	f7ff febb 	bl	80012e6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001570:	2160      	movs	r1, #96	; 0x60
 8001572:	6820      	ldr	r0, [r4, #0]
 8001574:	f7ff feca 	bl	800130c <TIM_ITRx_SetConfig>
      break;
 8001578:	e7ee      	b.n	8001558 <HAL_TIM_ConfigClockSource+0xa0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800157a:	68ca      	ldr	r2, [r1, #12]
 800157c:	6849      	ldr	r1, [r1, #4]
 800157e:	6800      	ldr	r0, [r0, #0]
 8001580:	f7ff fe9f 	bl	80012c2 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001584:	2140      	movs	r1, #64	; 0x40
 8001586:	6820      	ldr	r0, [r4, #0]
 8001588:	f7ff fec0 	bl	800130c <TIM_ITRx_SetConfig>
      break;
 800158c:	e7e4      	b.n	8001558 <HAL_TIM_ConfigClockSource+0xa0>
  __HAL_LOCK(htim);
 800158e:	2002      	movs	r0, #2
 8001590:	4770      	bx	lr

08001592 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001592:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001596:	2b01      	cmp	r3, #1
 8001598:	d01c      	beq.n	80015d4 <HAL_TIMEx_MasterConfigSynchronization+0x42>
{
 800159a:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(htim);
 800159c:	2501      	movs	r5, #1
 800159e:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80015a2:	2302      	movs	r3, #2
 80015a4:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80015a8:	6804      	ldr	r4, [r0, #0]
 80015aa:	6862      	ldr	r2, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80015ac:	68a3      	ldr	r3, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80015ae:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80015b2:	680e      	ldr	r6, [r1, #0]
 80015b4:	4332      	orrs	r2, r6

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80015b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80015ba:	6849      	ldr	r1, [r1, #4]
 80015bc:	430b      	orrs	r3, r1

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80015be:	6062      	str	r2, [r4, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80015c0:	6802      	ldr	r2, [r0, #0]
 80015c2:	6093      	str	r3, [r2, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80015c4:	f880 5039 	strb.w	r5, [r0, #57]	; 0x39

  __HAL_UNLOCK(htim);
 80015c8:	2300      	movs	r3, #0
 80015ca:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

  return HAL_OK;
 80015ce:	4618      	mov	r0, r3
}
 80015d0:	bc70      	pop	{r4, r5, r6}
 80015d2:	4770      	bx	lr
  __HAL_LOCK(htim);
 80015d4:	2002      	movs	r0, #2
 80015d6:	4770      	bx	lr

080015d8 <CheckIfEnabled>:
		user_pwm_setvalue(0);
		NewTurretState = REVERSE;
	}
}
void CheckIfEnabled( void )
{
 80015d8:	b508      	push	{r3, lr}
	GPIO_PinState state;

	state = HAL_GPIO_ReadPin(ENABLE_GPIO_Port, ENABLE_Pin);
 80015da:	2180      	movs	r1, #128	; 0x80
 80015dc:	4807      	ldr	r0, [pc, #28]	; (80015fc <CheckIfEnabled+0x24>)
 80015de:	f7ff f9d1 	bl	8000984 <HAL_GPIO_ReadPin>
	if(state == GPIO_PIN_RESET)
 80015e2:	b130      	cbz	r0, 80015f2 <CheckIfEnabled+0x1a>
	{
		NewTurretState = IDLE;
	}
	else
	{
		if(TurretState == IDLE)
 80015e4:	4b06      	ldr	r3, [pc, #24]	; (8001600 <CheckIfEnabled+0x28>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	b913      	cbnz	r3, 80015f0 <CheckIfEnabled+0x18>
		{
			NewTurretState = LOCK;
 80015ea:	2203      	movs	r2, #3
 80015ec:	4b05      	ldr	r3, [pc, #20]	; (8001604 <CheckIfEnabled+0x2c>)
 80015ee:	701a      	strb	r2, [r3, #0]
 80015f0:	bd08      	pop	{r3, pc}
		NewTurretState = IDLE;
 80015f2:	2200      	movs	r2, #0
 80015f4:	4b03      	ldr	r3, [pc, #12]	; (8001604 <CheckIfEnabled+0x2c>)
 80015f6:	701a      	strb	r2, [r3, #0]
 80015f8:	bd08      	pop	{r3, pc}
 80015fa:	bf00      	nop
 80015fc:	40020800 	.word	0x40020800
 8001600:	2000006c 	.word	0x2000006c
 8001604:	2000006d 	.word	0x2000006d

08001608 <GetCurrentTool>:
		}
	}
}

uint8_t GetCurrentTool( void )
{
 8001608:	b510      	push	{r4, lr}
	*/

	uint8_t value = 0;
	uint8_t toolNo = 0;

	if(HAL_GPIO_ReadPin(ENC_1_GPIO_Port, ENC_1_Pin))
 800160a:	2101      	movs	r1, #1
 800160c:	481c      	ldr	r0, [pc, #112]	; (8001680 <GetCurrentTool+0x78>)
 800160e:	f7ff f9b9 	bl	8000984 <HAL_GPIO_ReadPin>
 8001612:	bb00      	cbnz	r0, 8001656 <GetCurrentTool+0x4e>
	uint8_t value = 0;
 8001614:	2400      	movs	r4, #0
	{
		value = value + 1;
	}
	if(HAL_GPIO_ReadPin(ENC_2_GPIO_Port, ENC_2_Pin))
 8001616:	2102      	movs	r1, #2
 8001618:	4819      	ldr	r0, [pc, #100]	; (8001680 <GetCurrentTool+0x78>)
 800161a:	f7ff f9b3 	bl	8000984 <HAL_GPIO_ReadPin>
 800161e:	b108      	cbz	r0, 8001624 <GetCurrentTool+0x1c>
	{
		value = value + 2;
 8001620:	3402      	adds	r4, #2
 8001622:	b2e4      	uxtb	r4, r4
	}
	if(HAL_GPIO_ReadPin(ENC_3_GPIO_Port, ENC_3_Pin))
 8001624:	2104      	movs	r1, #4
 8001626:	4816      	ldr	r0, [pc, #88]	; (8001680 <GetCurrentTool+0x78>)
 8001628:	f7ff f9ac 	bl	8000984 <HAL_GPIO_ReadPin>
 800162c:	b108      	cbz	r0, 8001632 <GetCurrentTool+0x2a>
	{
		value = value + 4;
 800162e:	3404      	adds	r4, #4
 8001630:	b2e4      	uxtb	r4, r4
	}
	if(HAL_GPIO_ReadPin(ENC_4_GPIO_Port, ENC_4_Pin))
 8001632:	2108      	movs	r1, #8
 8001634:	4812      	ldr	r0, [pc, #72]	; (8001680 <GetCurrentTool+0x78>)
 8001636:	f7ff f9a5 	bl	8000984 <HAL_GPIO_ReadPin>
 800163a:	b108      	cbz	r0, 8001640 <GetCurrentTool+0x38>
	{
		value = value + 8;
 800163c:	3408      	adds	r4, #8
 800163e:	b2e4      	uxtb	r4, r4
	}

	switch (value)
 8001640:	3c01      	subs	r4, #1
 8001642:	2c0b      	cmp	r4, #11
 8001644:	d809      	bhi.n	800165a <GetCurrentTool+0x52>
 8001646:	e8df f004 	tbb	[pc, r4]
 800164a:	1814      	.short	0x1814
 800164c:	0a080c16 	.word	0x0a080c16
 8001650:	08121008 	.word	0x08121008
 8001654:	0e08      	.short	0x0e08
		value = value + 1;
 8001656:	2401      	movs	r4, #1
 8001658:	e7dd      	b.n	8001616 <GetCurrentTool+0xe>
	uint8_t toolNo = 0;
 800165a:	2000      	movs	r0, #0
 800165c:	bd10      	pop	{r4, pc}
	{
		case 2:
			toolNo = 1;
			break;
		case 6:
			toolNo = 2;
 800165e:	2002      	movs	r0, #2
			break;
 8001660:	bd10      	pop	{r4, pc}
		case 4:
			toolNo = 3;
 8001662:	2003      	movs	r0, #3
			break;
 8001664:	bd10      	pop	{r4, pc}
		case 12:
			toolNo = 4;
 8001666:	2004      	movs	r0, #4
			break;
 8001668:	bd10      	pop	{r4, pc}
		case 8:
			toolNo = 5;
 800166a:	2005      	movs	r0, #5
			break;
 800166c:	bd10      	pop	{r4, pc}
		case 9:
			toolNo = 6;
 800166e:	2006      	movs	r0, #6
			break;
 8001670:	bd10      	pop	{r4, pc}
		case 1:
			toolNo = 7;
 8001672:	2007      	movs	r0, #7
			break;
 8001674:	bd10      	pop	{r4, pc}
		case 3:
			toolNo = 8;
 8001676:	2008      	movs	r0, #8
			break;
 8001678:	bd10      	pop	{r4, pc}
			toolNo = 1;
 800167a:	2001      	movs	r0, #1
	}

	return toolNo;
}
 800167c:	bd10      	pop	{r4, pc}
 800167e:	bf00      	nop
 8001680:	40020800 	.word	0x40020800

08001684 <GetSelectedTool>:

uint8_t GetSelectedTool( void )
{
 8001684:	b508      	push	{r3, lr}
	uint8_t toolNo = 0;


	if(HAL_GPIO_ReadPin(TOOL_SEL_1_GPIO_Port, TOOL_SEL_1_Pin))
 8001686:	f44f 7180 	mov.w	r1, #256	; 0x100
 800168a:	4822      	ldr	r0, [pc, #136]	; (8001714 <GetSelectedTool+0x90>)
 800168c:	f7ff f97a 	bl	8000984 <HAL_GPIO_ReadPin>
 8001690:	b108      	cbz	r0, 8001696 <GetSelectedTool+0x12>
	{
		toolNo = 1;
 8001692:	2001      	movs	r0, #1
 8001694:	bd08      	pop	{r3, pc}
	}
	else if(HAL_GPIO_ReadPin(TOOL_SEL_2_GPIO_Port, TOOL_SEL_2_Pin))
 8001696:	f44f 7100 	mov.w	r1, #512	; 0x200
 800169a:	481e      	ldr	r0, [pc, #120]	; (8001714 <GetSelectedTool+0x90>)
 800169c:	f7ff f972 	bl	8000984 <HAL_GPIO_ReadPin>
 80016a0:	b108      	cbz	r0, 80016a6 <GetSelectedTool+0x22>
	{
		toolNo = 2;
 80016a2:	2002      	movs	r0, #2
 80016a4:	bd08      	pop	{r3, pc}
	}
	else if(HAL_GPIO_ReadPin(TOOL_SEL_3_GPIO_Port, TOOL_SEL_3_Pin))
 80016a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016aa:	481a      	ldr	r0, [pc, #104]	; (8001714 <GetSelectedTool+0x90>)
 80016ac:	f7ff f96a 	bl	8000984 <HAL_GPIO_ReadPin>
 80016b0:	b108      	cbz	r0, 80016b6 <GetSelectedTool+0x32>
	{
		toolNo = 3;
 80016b2:	2003      	movs	r0, #3
 80016b4:	bd08      	pop	{r3, pc}
	}
	else if(HAL_GPIO_ReadPin(TOOL_SEL_4_GPIO_Port, TOOL_SEL_4_Pin))
 80016b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016ba:	4816      	ldr	r0, [pc, #88]	; (8001714 <GetSelectedTool+0x90>)
 80016bc:	f7ff f962 	bl	8000984 <HAL_GPIO_ReadPin>
 80016c0:	b108      	cbz	r0, 80016c6 <GetSelectedTool+0x42>
	{
		toolNo = 4;
 80016c2:	2004      	movs	r0, #4
 80016c4:	bd08      	pop	{r3, pc}
	}
	else if(HAL_GPIO_ReadPin(TOOL_SEL_5_GPIO_Port, TOOL_SEL_5_Pin))
 80016c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016ca:	4812      	ldr	r0, [pc, #72]	; (8001714 <GetSelectedTool+0x90>)
 80016cc:	f7ff f95a 	bl	8000984 <HAL_GPIO_ReadPin>
 80016d0:	b108      	cbz	r0, 80016d6 <GetSelectedTool+0x52>
	{
		toolNo = 5;
 80016d2:	2005      	movs	r0, #5
 80016d4:	bd08      	pop	{r3, pc}
	}
	else if(HAL_GPIO_ReadPin(TOOL_SEL_6_GPIO_Port, TOOL_SEL_6_Pin))
 80016d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016da:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 80016de:	f500 3002 	add.w	r0, r0, #133120	; 0x20800
 80016e2:	f7ff f94f 	bl	8000984 <HAL_GPIO_ReadPin>
 80016e6:	b108      	cbz	r0, 80016ec <GetSelectedTool+0x68>
	{
		toolNo = 6;
 80016e8:	2006      	movs	r0, #6
 80016ea:	bd08      	pop	{r3, pc}
	}
	else if(HAL_GPIO_ReadPin(TOOL_SEL_7_GPIO_Port, TOOL_SEL_7_Pin))
 80016ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016f0:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 80016f4:	f500 3002 	add.w	r0, r0, #133120	; 0x20800
 80016f8:	f7ff f944 	bl	8000984 <HAL_GPIO_ReadPin>
 80016fc:	b108      	cbz	r0, 8001702 <GetSelectedTool+0x7e>
	{
		toolNo = 7;
 80016fe:	2007      	movs	r0, #7
 8001700:	bd08      	pop	{r3, pc}
	}
	else if(HAL_GPIO_ReadPin(TOOL_SEL_8_GPIO_Port, TOOL_SEL_8_Pin))
 8001702:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001706:	4803      	ldr	r0, [pc, #12]	; (8001714 <GetSelectedTool+0x90>)
 8001708:	f7ff f93c 	bl	8000984 <HAL_GPIO_ReadPin>
 800170c:	b900      	cbnz	r0, 8001710 <GetSelectedTool+0x8c>
 800170e:	bd08      	pop	{r3, pc}
	{
		toolNo = 8;
 8001710:	2008      	movs	r0, #8
	}

	return toolNo;
}
 8001712:	bd08      	pop	{r3, pc}
 8001714:	40020000 	.word	0x40020000

08001718 <SetTurretStatusLocked>:
	SetTurretStatusLocked(false);
	user_pwm_setvalue(0);
}

void SetTurretStatusLocked(uint8_t locked)
{
 8001718:	b508      	push	{r3, lr}
	if(!locked)
 800171a:	b158      	cbz	r0, 8001734 <SetTurretStatusLocked+0x1c>
		HAL_GPIO_WritePin(LED_LOCK_GPIO_Port, LED_LOCK_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(TOOL_CHANGE_READY_GPIO_Port, TOOL_CHANGE_READY_Pin, GPIO_PIN_RESET);
	}
	else
	{
		HAL_GPIO_WritePin(LED_LOCK_GPIO_Port, LED_LOCK_Pin, GPIO_PIN_SET);
 800171c:	2201      	movs	r2, #1
 800171e:	2140      	movs	r1, #64	; 0x40
 8001720:	480c      	ldr	r0, [pc, #48]	; (8001754 <SetTurretStatusLocked+0x3c>)
 8001722:	f7ff f936 	bl	8000992 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TOOL_CHANGE_READY_GPIO_Port, TOOL_CHANGE_READY_Pin, GPIO_PIN_SET);
 8001726:	2201      	movs	r2, #1
 8001728:	f44f 7180 	mov.w	r1, #256	; 0x100
 800172c:	480a      	ldr	r0, [pc, #40]	; (8001758 <SetTurretStatusLocked+0x40>)
 800172e:	f7ff f930 	bl	8000992 <HAL_GPIO_WritePin>
 8001732:	bd08      	pop	{r3, pc}
		HAL_GPIO_WritePin(LED_LOCK_GPIO_Port, LED_LOCK_Pin, GPIO_PIN_RESET);
 8001734:	2200      	movs	r2, #0
 8001736:	2140      	movs	r1, #64	; 0x40
 8001738:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 800173c:	f500 3001 	add.w	r0, r0, #132096	; 0x20400
 8001740:	f7ff f927 	bl	8000992 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TOOL_CHANGE_READY_GPIO_Port, TOOL_CHANGE_READY_Pin, GPIO_PIN_RESET);
 8001744:	2200      	movs	r2, #0
 8001746:	f44f 7180 	mov.w	r1, #256	; 0x100
 800174a:	4803      	ldr	r0, [pc, #12]	; (8001758 <SetTurretStatusLocked+0x40>)
 800174c:	f7ff f921 	bl	8000992 <HAL_GPIO_WritePin>
 8001750:	bd08      	pop	{r3, pc}
 8001752:	bf00      	nop
 8001754:	40020400 	.word	0x40020400
 8001758:	40020800 	.word	0x40020800

0800175c <CheckNewTool>:
{
 800175c:	b508      	push	{r3, lr}
	if((TurretState == IDLE) || (TurretState == LOCK) )
 800175e:	4b0a      	ldr	r3, [pc, #40]	; (8001788 <CheckNewTool+0x2c>)
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	b10b      	cbz	r3, 8001768 <CheckNewTool+0xc>
 8001764:	2b03      	cmp	r3, #3
 8001766:	d106      	bne.n	8001776 <CheckNewTool+0x1a>
		state = HAL_GPIO_ReadPin(TOOL_CHANGE_GPIO_Port, TOOL_CHANGE_Pin);
 8001768:	f44f 7100 	mov.w	r1, #512	; 0x200
 800176c:	4807      	ldr	r0, [pc, #28]	; (800178c <CheckNewTool+0x30>)
 800176e:	f7ff f909 	bl	8000984 <HAL_GPIO_ReadPin>
		if(state == GPIO_PIN_SET)
 8001772:	2801      	cmp	r0, #1
 8001774:	d000      	beq.n	8001778 <CheckNewTool+0x1c>
 8001776:	bd08      	pop	{r3, pc}
			NewTurretState = FORWARD;
 8001778:	2201      	movs	r2, #1
 800177a:	4b05      	ldr	r3, [pc, #20]	; (8001790 <CheckNewTool+0x34>)
 800177c:	701a      	strb	r2, [r3, #0]
			SetTurretStatusLocked(false);
 800177e:	2000      	movs	r0, #0
 8001780:	f7ff ffca 	bl	8001718 <SetTurretStatusLocked>
}
 8001784:	e7f7      	b.n	8001776 <CheckNewTool+0x1a>
 8001786:	bf00      	nop
 8001788:	2000006c 	.word	0x2000006c
 800178c:	40020800 	.word	0x40020800
 8001790:	2000006d 	.word	0x2000006d

08001794 <user_pwm_setvalue>:
	}
}

void user_pwm_setvalue(uint16_t value)
{
 8001794:	b530      	push	{r4, r5, lr}
 8001796:	b085      	sub	sp, #20
    TIM_OC_InitTypeDef sConfigOC;

    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001798:	2360      	movs	r3, #96	; 0x60
 800179a:	9300      	str	r3, [sp, #0]
    sConfigOC.Pulse = value;
 800179c:	9001      	str	r0, [sp, #4]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800179e:	2400      	movs	r4, #0
 80017a0:	9402      	str	r4, [sp, #8]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017a2:	9403      	str	r4, [sp, #12]

    HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2);
 80017a4:	4d0a      	ldr	r5, [pc, #40]	; (80017d0 <user_pwm_setvalue+0x3c>)
 80017a6:	2204      	movs	r2, #4
 80017a8:	4669      	mov	r1, sp
 80017aa:	4628      	mov	r0, r5
 80017ac:	f7ff fe16 	bl	80013dc <HAL_TIM_PWM_ConfigChannel>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80017b0:	2104      	movs	r1, #4
 80017b2:	4628      	mov	r0, r5
 80017b4:	f7ff fe00 	bl	80013b8 <HAL_TIM_PWM_Start>

    HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1);
 80017b8:	4d06      	ldr	r5, [pc, #24]	; (80017d4 <user_pwm_setvalue+0x40>)
 80017ba:	4622      	mov	r2, r4
 80017bc:	4669      	mov	r1, sp
 80017be:	4628      	mov	r0, r5
 80017c0:	f7ff fe0c 	bl	80013dc <HAL_TIM_PWM_ConfigChannel>
    HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
 80017c4:	4621      	mov	r1, r4
 80017c6:	4628      	mov	r0, r5
 80017c8:	f7ff fdf6 	bl	80013b8 <HAL_TIM_PWM_Start>

}
 80017cc:	b005      	add	sp, #20
 80017ce:	bd30      	pop	{r4, r5, pc}
 80017d0:	2000002c 	.word	0x2000002c
 80017d4:	20000070 	.word	0x20000070

080017d8 <WaitOverTravel>:
{
 80017d8:	b508      	push	{r3, lr}
	DelayTurret ++;
 80017da:	4a08      	ldr	r2, [pc, #32]	; (80017fc <WaitOverTravel+0x24>)
 80017dc:	6813      	ldr	r3, [r2, #0]
 80017de:	3301      	adds	r3, #1
 80017e0:	6013      	str	r3, [r2, #0]
	if(DelayTurret > 20000)
 80017e2:	f644 6220 	movw	r2, #20000	; 0x4e20
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d800      	bhi.n	80017ec <WaitOverTravel+0x14>
 80017ea:	bd08      	pop	{r3, pc}
		user_pwm_setvalue(0);
 80017ec:	2000      	movs	r0, #0
 80017ee:	f7ff ffd1 	bl	8001794 <user_pwm_setvalue>
		NewTurretState = REVERSE;
 80017f2:	2202      	movs	r2, #2
 80017f4:	4b02      	ldr	r3, [pc, #8]	; (8001800 <WaitOverTravel+0x28>)
 80017f6:	701a      	strb	r2, [r3, #0]
}
 80017f8:	e7f7      	b.n	80017ea <WaitOverTravel+0x12>
 80017fa:	bf00      	nop
 80017fc:	20000068 	.word	0x20000068
 8001800:	2000006d 	.word	0x2000006d

08001804 <ForwardTurret>:
{
 8001804:	b510      	push	{r4, lr}
 8001806:	b082      	sub	sp, #8
	CurrentTool = GetCurrentTool();
 8001808:	f7ff fefe 	bl	8001608 <GetCurrentTool>
 800180c:	4604      	mov	r4, r0
	SelectedTool = GetSelectedTool();
 800180e:	f7ff ff39 	bl	8001684 <GetSelectedTool>
 8001812:	f88d 0007 	strb.w	r0, [sp, #7]
	if(SelectedTool != CurrentTool)
 8001816:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800181a:	b2db      	uxtb	r3, r3
 800181c:	429c      	cmp	r4, r3
 800181e:	d01c      	beq.n	800185a <ForwardTurret+0x56>
		HAL_GPIO_WritePin(MOTOR_DIR_GPIO_Port, MOTOR_DIR_Pin, TURRET_FORWARD_DIR);
 8001820:	2200      	movs	r2, #0
 8001822:	2102      	movs	r1, #2
 8001824:	480f      	ldr	r0, [pc, #60]	; (8001864 <ForwardTurret+0x60>)
 8001826:	f7ff f8b4 	bl	8000992 <HAL_GPIO_WritePin>
		user_pwm_setvalue(TURRET_FORWARD_POWER);
 800182a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800182e:	f7ff ffb1 	bl	8001794 <user_pwm_setvalue>
		SetTurretStatusLocked(false);
 8001832:	2000      	movs	r0, #0
 8001834:	f7ff ff70 	bl	8001718 <SetTurretStatusLocked>
		while(SelectedTool != CurrentTool)
 8001838:	e002      	b.n	8001840 <ForwardTurret+0x3c>
			CurrentTool = GetCurrentTool();
 800183a:	f7ff fee5 	bl	8001608 <GetCurrentTool>
 800183e:	4604      	mov	r4, r0
		while(SelectedTool != CurrentTool)
 8001840:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001844:	b2db      	uxtb	r3, r3
 8001846:	429c      	cmp	r4, r3
 8001848:	d1f7      	bne.n	800183a <ForwardTurret+0x36>
		NewTurretState = WAIT;
 800184a:	2204      	movs	r2, #4
 800184c:	4b06      	ldr	r3, [pc, #24]	; (8001868 <ForwardTurret+0x64>)
 800184e:	701a      	strb	r2, [r3, #0]
		DelayTurret = 0;
 8001850:	2200      	movs	r2, #0
 8001852:	4b06      	ldr	r3, [pc, #24]	; (800186c <ForwardTurret+0x68>)
 8001854:	601a      	str	r2, [r3, #0]
}
 8001856:	b002      	add	sp, #8
 8001858:	bd10      	pop	{r4, pc}
		NewTurretState = LOCK;
 800185a:	2203      	movs	r2, #3
 800185c:	4b02      	ldr	r3, [pc, #8]	; (8001868 <ForwardTurret+0x64>)
 800185e:	701a      	strb	r2, [r3, #0]
}
 8001860:	e7f9      	b.n	8001856 <ForwardTurret+0x52>
 8001862:	bf00      	nop
 8001864:	40020000 	.word	0x40020000
 8001868:	2000006d 	.word	0x2000006d
 800186c:	20000068 	.word	0x20000068

08001870 <ReverseTurret>:
{
 8001870:	b510      	push	{r4, lr}
 8001872:	b082      	sub	sp, #8
	__IO uint32_t ADCValue=0;
 8001874:	2300      	movs	r3, #0
 8001876:	9301      	str	r3, [sp, #4]
	HAL_GPIO_WritePin(MOTOR_DIR_GPIO_Port, MOTOR_DIR_Pin, TURRET_REVERSE_DIR);
 8001878:	2201      	movs	r2, #1
 800187a:	2102      	movs	r1, #2
 800187c:	4813      	ldr	r0, [pc, #76]	; (80018cc <ReverseTurret+0x5c>)
 800187e:	f7ff f888 	bl	8000992 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001882:	2064      	movs	r0, #100	; 0x64
 8001884:	f7fe fcc4 	bl	8000210 <HAL_Delay>
	user_pwm_setvalue(TURRET_REVERSE_POWER);
 8001888:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800188c:	f7ff ff82 	bl	8001794 <user_pwm_setvalue>
	HAL_Delay(100);
 8001890:	2064      	movs	r0, #100	; 0x64
 8001892:	f7fe fcbd 	bl	8000210 <HAL_Delay>
	while(ADCValue < LOCKTHRESHOLD)
 8001896:	e00b      	b.n	80018b0 <ReverseTurret+0x40>
		HAL_ADC_Start(&hadc);
 8001898:	4c0d      	ldr	r4, [pc, #52]	; (80018d0 <ReverseTurret+0x60>)
 800189a:	4620      	mov	r0, r4
 800189c:	f7fe ff08 	bl	80006b0 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc, 5);
 80018a0:	2105      	movs	r1, #5
 80018a2:	4620      	mov	r0, r4
 80018a4:	f7fe fd98 	bl	80003d8 <HAL_ADC_PollForConversion>
		ADCValue = HAL_ADC_GetValue(&hadc);
 80018a8:	4620      	mov	r0, r4
 80018aa:	f7fe fdf3 	bl	8000494 <HAL_ADC_GetValue>
 80018ae:	9001      	str	r0, [sp, #4]
	while(ADCValue < LOCKTHRESHOLD)
 80018b0:	9a01      	ldr	r2, [sp, #4]
 80018b2:	f640 33b7 	movw	r3, #2999	; 0xbb7
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d9ee      	bls.n	8001898 <ReverseTurret+0x28>
	user_pwm_setvalue(TURRET_LOCK_POWER);
 80018ba:	2096      	movs	r0, #150	; 0x96
 80018bc:	f7ff ff6a 	bl	8001794 <user_pwm_setvalue>
	NewTurretState = LOCK;
 80018c0:	2203      	movs	r2, #3
 80018c2:	4b04      	ldr	r3, [pc, #16]	; (80018d4 <ReverseTurret+0x64>)
 80018c4:	701a      	strb	r2, [r3, #0]
}
 80018c6:	b002      	add	sp, #8
 80018c8:	bd10      	pop	{r4, pc}
 80018ca:	bf00      	nop
 80018cc:	40020000 	.word	0x40020000
 80018d0:	200000ac 	.word	0x200000ac
 80018d4:	2000006d 	.word	0x2000006d

080018d8 <LockTurret>:
{
 80018d8:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(MOTOR_DIR_GPIO_Port, MOTOR_DIR_Pin, TURRET_REVERSE_DIR);
 80018da:	2201      	movs	r2, #1
 80018dc:	2102      	movs	r1, #2
 80018de:	4805      	ldr	r0, [pc, #20]	; (80018f4 <LockTurret+0x1c>)
 80018e0:	f7ff f857 	bl	8000992 <HAL_GPIO_WritePin>
	user_pwm_setvalue(TURRET_LOCK_POWER);
 80018e4:	2096      	movs	r0, #150	; 0x96
 80018e6:	f7ff ff55 	bl	8001794 <user_pwm_setvalue>
	SetTurretStatusLocked(true);
 80018ea:	2001      	movs	r0, #1
 80018ec:	f7ff ff14 	bl	8001718 <SetTurretStatusLocked>
 80018f0:	bd08      	pop	{r3, pc}
 80018f2:	bf00      	nop
 80018f4:	40020000 	.word	0x40020000

080018f8 <UnlockTurret>:
{
 80018f8:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(MOTOR_DIR_GPIO_Port, MOTOR_DIR_Pin, TURRET_REVERSE_DIR);
 80018fa:	2201      	movs	r2, #1
 80018fc:	2102      	movs	r1, #2
 80018fe:	4805      	ldr	r0, [pc, #20]	; (8001914 <UnlockTurret+0x1c>)
 8001900:	f7ff f847 	bl	8000992 <HAL_GPIO_WritePin>
	SetTurretStatusLocked(false);
 8001904:	2000      	movs	r0, #0
 8001906:	f7ff ff07 	bl	8001718 <SetTurretStatusLocked>
	user_pwm_setvalue(0);
 800190a:	2000      	movs	r0, #0
 800190c:	f7ff ff42 	bl	8001794 <user_pwm_setvalue>
 8001910:	bd08      	pop	{r3, pc}
 8001912:	bf00      	nop
 8001914:	40020000 	.word	0x40020000

08001918 <InitApp>:
{
 8001918:	b508      	push	{r3, lr}
	TurretState = IDLE;
 800191a:	2300      	movs	r3, #0
 800191c:	4a04      	ldr	r2, [pc, #16]	; (8001930 <InitApp+0x18>)
 800191e:	7013      	strb	r3, [r2, #0]
	NewTurretState = IDLE;
 8001920:	4a04      	ldr	r2, [pc, #16]	; (8001934 <InitApp+0x1c>)
 8001922:	7013      	strb	r3, [r2, #0]
	HAL_ADC_Start(&hadc);
 8001924:	4804      	ldr	r0, [pc, #16]	; (8001938 <InitApp+0x20>)
 8001926:	f7fe fec3 	bl	80006b0 <HAL_ADC_Start>
	UnlockTurret();
 800192a:	f7ff ffe5 	bl	80018f8 <UnlockTurret>
 800192e:	bd08      	pop	{r3, pc}
 8001930:	2000006c 	.word	0x2000006c
 8001934:	2000006d 	.word	0x2000006d
 8001938:	200000ac 	.word	0x200000ac

0800193c <MainLoop>:
{
 800193c:	b508      	push	{r3, lr}
	CheckIfEnabled();
 800193e:	f7ff fe4b 	bl	80015d8 <CheckIfEnabled>
	CheckNewTool();
 8001942:	f7ff ff0b 	bl	800175c <CheckNewTool>
	if(TurretState != NewTurretState)
 8001946:	4b14      	ldr	r3, [pc, #80]	; (8001998 <MainLoop+0x5c>)
 8001948:	781a      	ldrb	r2, [r3, #0]
 800194a:	4b14      	ldr	r3, [pc, #80]	; (800199c <MainLoop+0x60>)
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	429a      	cmp	r2, r3
 8001950:	d020      	beq.n	8001994 <MainLoop+0x58>
	  switch (NewTurretState) {
 8001952:	2b04      	cmp	r3, #4
 8001954:	d81e      	bhi.n	8001994 <MainLoop+0x58>
 8001956:	e8df f003 	tbb	[pc, r3]
 800195a:	0903      	.short	0x0903
 800195c:	150f      	.short	0x150f
 800195e:	1b          	.byte	0x1b
 800195f:	00          	.byte	0x00
			UnlockTurret();
 8001960:	f7ff ffca 	bl	80018f8 <UnlockTurret>
			TurretState = IDLE;
 8001964:	2200      	movs	r2, #0
 8001966:	4b0c      	ldr	r3, [pc, #48]	; (8001998 <MainLoop+0x5c>)
 8001968:	701a      	strb	r2, [r3, #0]
			break;
 800196a:	bd08      	pop	{r3, pc}
			ForwardTurret();
 800196c:	f7ff ff4a 	bl	8001804 <ForwardTurret>
			TurretState = FORWARD;
 8001970:	2201      	movs	r2, #1
 8001972:	4b09      	ldr	r3, [pc, #36]	; (8001998 <MainLoop+0x5c>)
 8001974:	701a      	strb	r2, [r3, #0]
			break;
 8001976:	bd08      	pop	{r3, pc}
			ReverseTurret();
 8001978:	f7ff ff7a 	bl	8001870 <ReverseTurret>
			TurretState = REVERSE;
 800197c:	2202      	movs	r2, #2
 800197e:	4b06      	ldr	r3, [pc, #24]	; (8001998 <MainLoop+0x5c>)
 8001980:	701a      	strb	r2, [r3, #0]
			break;
 8001982:	bd08      	pop	{r3, pc}
			LockTurret();
 8001984:	f7ff ffa8 	bl	80018d8 <LockTurret>
			TurretState = LOCK;
 8001988:	2203      	movs	r2, #3
 800198a:	4b03      	ldr	r3, [pc, #12]	; (8001998 <MainLoop+0x5c>)
 800198c:	701a      	strb	r2, [r3, #0]
			break;
 800198e:	bd08      	pop	{r3, pc}
			WaitOverTravel();
 8001990:	f7ff ff22 	bl	80017d8 <WaitOverTravel>
 8001994:	bd08      	pop	{r3, pc}
 8001996:	bf00      	nop
 8001998:	2000006c 	.word	0x2000006c
 800199c:	2000006d 	.word	0x2000006d

080019a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80019a4:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a6:	2400      	movs	r4, #0
 80019a8:	9403      	str	r4, [sp, #12]
 80019aa:	9404      	str	r4, [sp, #16]
 80019ac:	9405      	str	r4, [sp, #20]
 80019ae:	9406      	str	r4, [sp, #24]
 80019b0:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019b2:	4b3e      	ldr	r3, [pc, #248]	; (8001aac <MX_GPIO_Init+0x10c>)
 80019b4:	69da      	ldr	r2, [r3, #28]
 80019b6:	f042 0204 	orr.w	r2, r2, #4
 80019ba:	61da      	str	r2, [r3, #28]
 80019bc:	69da      	ldr	r2, [r3, #28]
 80019be:	f002 0204 	and.w	r2, r2, #4
 80019c2:	9200      	str	r2, [sp, #0]
 80019c4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019c6:	69da      	ldr	r2, [r3, #28]
 80019c8:	f042 0201 	orr.w	r2, r2, #1
 80019cc:	61da      	str	r2, [r3, #28]
 80019ce:	69da      	ldr	r2, [r3, #28]
 80019d0:	f002 0201 	and.w	r2, r2, #1
 80019d4:	9201      	str	r2, [sp, #4]
 80019d6:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019d8:	69da      	ldr	r2, [r3, #28]
 80019da:	f042 0202 	orr.w	r2, r2, #2
 80019de:	61da      	str	r2, [r3, #28]
 80019e0:	69db      	ldr	r3, [r3, #28]
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	9302      	str	r3, [sp, #8]
 80019e8:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_DIR_GPIO_Port, MOTOR_DIR_Pin, GPIO_PIN_RESET);
 80019ea:	4f31      	ldr	r7, [pc, #196]	; (8001ab0 <MX_GPIO_Init+0x110>)
 80019ec:	4622      	mov	r2, r4
 80019ee:	2102      	movs	r1, #2
 80019f0:	4638      	mov	r0, r7
 80019f2:	f7fe ffce 	bl	8000992 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOOL_CHANGE_READY_GPIO_Port, TOOL_CHANGE_READY_Pin, GPIO_PIN_RESET);
 80019f6:	4e2f      	ldr	r6, [pc, #188]	; (8001ab4 <MX_GPIO_Init+0x114>)
 80019f8:	4622      	mov	r2, r4
 80019fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019fe:	4630      	mov	r0, r6
 8001a00:	f7fe ffc7 	bl	8000992 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_LOCK_GPIO_Port, LED_LOCK_Pin, GPIO_PIN_RESET);
 8001a04:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8001ab8 <MX_GPIO_Init+0x118>
 8001a08:	4622      	mov	r2, r4
 8001a0a:	2140      	movs	r1, #64	; 0x40
 8001a0c:	4640      	mov	r0, r8
 8001a0e:	f7fe ffc0 	bl	8000992 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ENC_1_Pin ENC_2_Pin ENC_3_Pin ENC_4_Pin */
  GPIO_InitStruct.Pin = ENC_1_Pin|ENC_2_Pin|ENC_3_Pin|ENC_4_Pin;
 8001a12:	230f      	movs	r3, #15
 8001a14:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a16:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a18:	2501      	movs	r5, #1
 8001a1a:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a1c:	a903      	add	r1, sp, #12
 8001a1e:	4630      	mov	r0, r6
 8001a20:	f7fe fee0 	bl	80007e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_Pin TOOL_SEL_1_Pin TOOL_SEL_2_Pin TOOL_SEL_3_Pin 
                           TOOL_SEL_4_Pin TOOL_SEL_5_Pin TOOL_SEL_8_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin|TOOL_SEL_1_Pin|TOOL_SEL_2_Pin|TOOL_SEL_3_Pin 
 8001a24:	f649 7301 	movw	r3, #40705	; 0x9f01
 8001a28:	9303      	str	r3, [sp, #12]
                          |TOOL_SEL_4_Pin|TOOL_SEL_5_Pin|TOOL_SEL_8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a2a:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2c:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a2e:	a903      	add	r1, sp, #12
 8001a30:	4638      	mov	r0, r7
 8001a32:	f7fe fed7 	bl	80007e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MOTOR_DIR_Pin */
  GPIO_InitStruct.Pin = MOTOR_DIR_Pin;
 8001a36:	2302      	movs	r3, #2
 8001a38:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a3a:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3c:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a3e:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(MOTOR_DIR_GPIO_Port, &GPIO_InitStruct);
 8001a40:	a903      	add	r1, sp, #12
 8001a42:	4638      	mov	r0, r7
 8001a44:	f7fe fece 	bl	80007e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MOTOR_CURENT_Pin */
  GPIO_InitStruct.Pin = MOTOR_CURENT_Pin;
 8001a48:	2308      	movs	r3, #8
 8001a4a:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a50:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a52:	a903      	add	r1, sp, #12
 8001a54:	4638      	mov	r0, r7
 8001a56:	f7fe fec5 	bl	80007e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : TURRET_P1_Pin TURRET_P2_Pin TURRET_P3_Pin TURRET_P4_Pin */
  GPIO_InitStruct.Pin = TURRET_P1_Pin|TURRET_P2_Pin|TURRET_P3_Pin|TURRET_P4_Pin;
 8001a5a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8001a5e:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a60:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a62:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a64:	a903      	add	r1, sp, #12
 8001a66:	4640      	mov	r0, r8
 8001a68:	f7fe febc 	bl	80007e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENABLE_Pin TOOL_CHANGE_Pin TOOL_SEL_7_Pin TOOL_SEL_6_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin|TOOL_CHANGE_Pin|TOOL_SEL_7_Pin|TOOL_SEL_6_Pin;
 8001a6c:	f44f 6368 	mov.w	r3, #3712	; 0xe80
 8001a70:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a72:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a74:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a76:	a903      	add	r1, sp, #12
 8001a78:	4630      	mov	r0, r6
 8001a7a:	f7fe feb3 	bl	80007e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOOL_CHANGE_READY_Pin */
  GPIO_InitStruct.Pin = TOOL_CHANGE_READY_Pin;
 8001a7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a82:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a84:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a86:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a88:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(TOOL_CHANGE_READY_GPIO_Port, &GPIO_InitStruct);
 8001a8a:	a903      	add	r1, sp, #12
 8001a8c:	4630      	mov	r0, r6
 8001a8e:	f7fe fea9 	bl	80007e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_LOCK_Pin */
  GPIO_InitStruct.Pin = LED_LOCK_Pin;
 8001a92:	2340      	movs	r3, #64	; 0x40
 8001a94:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a96:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a98:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a9a:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(LED_LOCK_GPIO_Port, &GPIO_InitStruct);
 8001a9c:	a903      	add	r1, sp, #12
 8001a9e:	4640      	mov	r0, r8
 8001aa0:	f7fe fea0 	bl	80007e4 <HAL_GPIO_Init>

}
 8001aa4:	b008      	add	sp, #32
 8001aa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001aaa:	bf00      	nop
 8001aac:	40023800 	.word	0x40023800
 8001ab0:	40020000 	.word	0x40020000
 8001ab4:	40020800 	.word	0x40020800
 8001ab8:	40020400 	.word	0x40020400

08001abc <MX_TIM9_Init>:
{
 8001abc:	b530      	push	{r4, r5, lr}
 8001abe:	b08b      	sub	sp, #44	; 0x2c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ac0:	2400      	movs	r4, #0
 8001ac2:	9406      	str	r4, [sp, #24]
 8001ac4:	9407      	str	r4, [sp, #28]
 8001ac6:	9408      	str	r4, [sp, #32]
 8001ac8:	9409      	str	r4, [sp, #36]	; 0x24
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aca:	9404      	str	r4, [sp, #16]
 8001acc:	9405      	str	r4, [sp, #20]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ace:	9400      	str	r4, [sp, #0]
 8001ad0:	9401      	str	r4, [sp, #4]
 8001ad2:	9402      	str	r4, [sp, #8]
 8001ad4:	9403      	str	r4, [sp, #12]
  htim9.Instance = TIM9;
 8001ad6:	4d17      	ldr	r5, [pc, #92]	; (8001b34 <MX_TIM9_Init+0x78>)
 8001ad8:	4b17      	ldr	r3, [pc, #92]	; (8001b38 <MX_TIM9_Init+0x7c>)
 8001ada:	602b      	str	r3, [r5, #0]
  htim9.Init.Prescaler = 160-1;
 8001adc:	239f      	movs	r3, #159	; 0x9f
 8001ade:	606b      	str	r3, [r5, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ae0:	60ac      	str	r4, [r5, #8]
  htim9.Init.Period = 2000-1;
 8001ae2:	f240 73cf 	movw	r3, #1999	; 0x7cf
 8001ae6:	60eb      	str	r3, [r5, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ae8:	612c      	str	r4, [r5, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001aea:	2380      	movs	r3, #128	; 0x80
 8001aec:	616b      	str	r3, [r5, #20]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001aee:	4628      	mov	r0, r5
 8001af0:	f7ff fc2f 	bl	8001352 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001af4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001af8:	9306      	str	r3, [sp, #24]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001afa:	a906      	add	r1, sp, #24
 8001afc:	4628      	mov	r0, r5
 8001afe:	f7ff fcdb 	bl	80014b8 <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8001b02:	4628      	mov	r0, r5
 8001b04:	f7ff fc3f 	bl	8001386 <HAL_TIM_PWM_Init>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b08:	9404      	str	r4, [sp, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b0a:	9405      	str	r4, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim9, &sMasterConfig) != HAL_OK)
 8001b0c:	a904      	add	r1, sp, #16
 8001b0e:	4628      	mov	r0, r5
 8001b10:	f7ff fd3f 	bl	8001592 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b14:	2360      	movs	r3, #96	; 0x60
 8001b16:	9300      	str	r3, [sp, #0]
  sConfigOC.Pulse = 0;
 8001b18:	9401      	str	r4, [sp, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b1a:	9402      	str	r4, [sp, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001b1c:	2304      	movs	r3, #4
 8001b1e:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b20:	4622      	mov	r2, r4
 8001b22:	4669      	mov	r1, sp
 8001b24:	4628      	mov	r0, r5
 8001b26:	f7ff fc59 	bl	80013dc <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim9);
 8001b2a:	4628      	mov	r0, r5
 8001b2c:	f000 f92c 	bl	8001d88 <HAL_TIM_MspPostInit>
}
 8001b30:	b00b      	add	sp, #44	; 0x2c
 8001b32:	bd30      	pop	{r4, r5, pc}
 8001b34:	20000070 	.word	0x20000070
 8001b38:	40010800 	.word	0x40010800

08001b3c <MX_TIM4_Init>:
{
 8001b3c:	b530      	push	{r4, r5, lr}
 8001b3e:	b08b      	sub	sp, #44	; 0x2c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b40:	2400      	movs	r4, #0
 8001b42:	9406      	str	r4, [sp, #24]
 8001b44:	9407      	str	r4, [sp, #28]
 8001b46:	9408      	str	r4, [sp, #32]
 8001b48:	9409      	str	r4, [sp, #36]	; 0x24
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b4a:	9404      	str	r4, [sp, #16]
 8001b4c:	9405      	str	r4, [sp, #20]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b4e:	9400      	str	r4, [sp, #0]
 8001b50:	9401      	str	r4, [sp, #4]
 8001b52:	9402      	str	r4, [sp, #8]
 8001b54:	9403      	str	r4, [sp, #12]
  htim4.Instance = TIM4;
 8001b56:	4d17      	ldr	r5, [pc, #92]	; (8001bb4 <MX_TIM4_Init+0x78>)
 8001b58:	4b17      	ldr	r3, [pc, #92]	; (8001bb8 <MX_TIM4_Init+0x7c>)
 8001b5a:	602b      	str	r3, [r5, #0]
  htim4.Init.Prescaler = 160-1;
 8001b5c:	239f      	movs	r3, #159	; 0x9f
 8001b5e:	606b      	str	r3, [r5, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b60:	60ac      	str	r4, [r5, #8]
  htim4.Init.Period = 2000-1;
 8001b62:	f240 73cf 	movw	r3, #1999	; 0x7cf
 8001b66:	60eb      	str	r3, [r5, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b68:	612c      	str	r4, [r5, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b6a:	2380      	movs	r3, #128	; 0x80
 8001b6c:	616b      	str	r3, [r5, #20]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001b6e:	4628      	mov	r0, r5
 8001b70:	f7ff fbef 	bl	8001352 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b78:	9306      	str	r3, [sp, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001b7a:	a906      	add	r1, sp, #24
 8001b7c:	4628      	mov	r0, r5
 8001b7e:	f7ff fc9b 	bl	80014b8 <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001b82:	4628      	mov	r0, r5
 8001b84:	f7ff fbff 	bl	8001386 <HAL_TIM_PWM_Init>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b88:	9404      	str	r4, [sp, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b8a:	9405      	str	r4, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001b8c:	a904      	add	r1, sp, #16
 8001b8e:	4628      	mov	r0, r5
 8001b90:	f7ff fcff 	bl	8001592 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b94:	2360      	movs	r3, #96	; 0x60
 8001b96:	9300      	str	r3, [sp, #0]
  sConfigOC.Pulse = 0;
 8001b98:	9401      	str	r4, [sp, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b9a:	9402      	str	r4, [sp, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001b9c:	2204      	movs	r2, #4
 8001b9e:	9203      	str	r2, [sp, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ba0:	4669      	mov	r1, sp
 8001ba2:	4628      	mov	r0, r5
 8001ba4:	f7ff fc1a 	bl	80013dc <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim4);
 8001ba8:	4628      	mov	r0, r5
 8001baa:	f000 f8ed 	bl	8001d88 <HAL_TIM_MspPostInit>
}
 8001bae:	b00b      	add	sp, #44	; 0x2c
 8001bb0:	bd30      	pop	{r4, r5, pc}
 8001bb2:	bf00      	nop
 8001bb4:	2000002c 	.word	0x2000002c
 8001bb8:	40000800 	.word	0x40000800

08001bbc <MX_ADC_Init>:
{
 8001bbc:	b570      	push	{r4, r5, r6, lr}
 8001bbe:	b084      	sub	sp, #16
  ADC_ChannelConfTypeDef sConfig = {0};
 8001bc0:	2500      	movs	r5, #0
 8001bc2:	9501      	str	r5, [sp, #4]
 8001bc4:	9502      	str	r5, [sp, #8]
 8001bc6:	9503      	str	r5, [sp, #12]
  hadc.Instance = ADC1;
 8001bc8:	4c12      	ldr	r4, [pc, #72]	; (8001c14 <MX_ADC_Init+0x58>)
 8001bca:	4b13      	ldr	r3, [pc, #76]	; (8001c18 <MX_ADC_Init+0x5c>)
 8001bcc:	6023      	str	r3, [r4, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001bce:	6065      	str	r5, [r4, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001bd0:	60a5      	str	r5, [r4, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001bd2:	60e5      	str	r5, [r4, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001bd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bd8:	6123      	str	r3, [r4, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001bda:	6165      	str	r5, [r4, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8001bdc:	61a5      	str	r5, [r4, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 8001bde:	61e5      	str	r5, [r4, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8001be0:	6225      	str	r5, [r4, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 8001be2:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
  hadc.Init.NbrOfConversion = 1;
 8001be6:	2601      	movs	r6, #1
 8001be8:	62a6      	str	r6, [r4, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = ENABLE;
 8001bea:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
  hadc.Init.NbrOfDiscConversion = 1;
 8001bee:	6326      	str	r6, [r4, #48]	; 0x30
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001bf0:	2310      	movs	r3, #16
 8001bf2:	6363      	str	r3, [r4, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001bf4:	63a5      	str	r5, [r4, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = ENABLE;
 8001bf6:	f884 603c 	strb.w	r6, [r4, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001bfa:	4620      	mov	r0, r4
 8001bfc:	f7fe fb1c 	bl	8000238 <HAL_ADC_Init>
  sConfig.Channel = ADC_CHANNEL_3;
 8001c00:	2303      	movs	r3, #3
 8001c02:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c04:	9602      	str	r6, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 8001c06:	9503      	str	r5, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001c08:	a901      	add	r1, sp, #4
 8001c0a:	4620      	mov	r0, r4
 8001c0c:	f7fe fc46 	bl	800049c <HAL_ADC_ConfigChannel>
}
 8001c10:	b004      	add	sp, #16
 8001c12:	bd70      	pop	{r4, r5, r6, pc}
 8001c14:	200000ac 	.word	0x200000ac
 8001c18:	40012400 	.word	0x40012400

08001c1c <SystemClock_Config>:
{
 8001c1c:	b530      	push	{r4, r5, lr}
 8001c1e:	b093      	sub	sp, #76	; 0x4c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c20:	2234      	movs	r2, #52	; 0x34
 8001c22:	2100      	movs	r1, #0
 8001c24:	a805      	add	r0, sp, #20
 8001c26:	f000 f96f 	bl	8001f08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c2a:	2400      	movs	r4, #0
 8001c2c:	9400      	str	r4, [sp, #0]
 8001c2e:	9401      	str	r4, [sp, #4]
 8001c30:	9402      	str	r4, [sp, #8]
 8001c32:	9403      	str	r4, [sp, #12]
 8001c34:	9404      	str	r4, [sp, #16]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c36:	4a0e      	ldr	r2, [pc, #56]	; (8001c70 <SystemClock_Config+0x54>)
 8001c38:	6813      	ldr	r3, [r2, #0]
 8001c3a:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8001c3e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c42:	6013      	str	r3, [r2, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c44:	2302      	movs	r3, #2
 8001c46:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c48:	2501      	movs	r5, #1
 8001c4a:	9508      	str	r5, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c4c:	2310      	movs	r3, #16
 8001c4e:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001c50:	940e      	str	r4, [sp, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c52:	a805      	add	r0, sp, #20
 8001c54:	f7fe fef0 	bl	8000a38 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c58:	230f      	movs	r3, #15
 8001c5a:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001c5c:	9501      	str	r5, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c5e:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c60:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c62:	9404      	str	r4, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001c64:	4621      	mov	r1, r4
 8001c66:	4668      	mov	r0, sp
 8001c68:	f7ff f9a4 	bl	8000fb4 <HAL_RCC_ClockConfig>
}
 8001c6c:	b013      	add	sp, #76	; 0x4c
 8001c6e:	bd30      	pop	{r4, r5, pc}
 8001c70:	40007000 	.word	0x40007000

08001c74 <main>:
{
 8001c74:	b508      	push	{r3, lr}
  HAL_Init();
 8001c76:	f7fe faa9 	bl	80001cc <HAL_Init>
  SystemClock_Config();
 8001c7a:	f7ff ffcf 	bl	8001c1c <SystemClock_Config>
  MX_GPIO_Init();
 8001c7e:	f7ff fe8f 	bl	80019a0 <MX_GPIO_Init>
  MX_TIM9_Init();
 8001c82:	f7ff ff1b 	bl	8001abc <MX_TIM9_Init>
  MX_TIM4_Init();
 8001c86:	f7ff ff59 	bl	8001b3c <MX_TIM4_Init>
  MX_ADC_Init();
 8001c8a:	f7ff ff97 	bl	8001bbc <MX_ADC_Init>
  InitApp();
 8001c8e:	f7ff fe43 	bl	8001918 <InitApp>
	  MainLoop();
 8001c92:	f7ff fe53 	bl	800193c <MainLoop>
 8001c96:	e7fc      	b.n	8001c92 <main+0x1e>

08001c98 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c98:	b084      	sub	sp, #16
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8001c9a:	4b0f      	ldr	r3, [pc, #60]	; (8001cd8 <HAL_MspInit+0x40>)
 8001c9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c9e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001ca2:	625a      	str	r2, [r3, #36]	; 0x24
 8001ca4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ca6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001caa:	9201      	str	r2, [sp, #4]
 8001cac:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cae:	6a1a      	ldr	r2, [r3, #32]
 8001cb0:	f042 0201 	orr.w	r2, r2, #1
 8001cb4:	621a      	str	r2, [r3, #32]
 8001cb6:	6a1a      	ldr	r2, [r3, #32]
 8001cb8:	f002 0201 	and.w	r2, r2, #1
 8001cbc:	9202      	str	r2, [sp, #8]
 8001cbe:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cc0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cc2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001cc6:	625a      	str	r2, [r3, #36]	; 0x24
 8001cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cce:	9303      	str	r3, [sp, #12]
 8001cd0:	9b03      	ldr	r3, [sp, #12]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cd2:	b004      	add	sp, #16
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	40023800 	.word	0x40023800

08001cdc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001cdc:	b500      	push	{lr}
 8001cde:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	9303      	str	r3, [sp, #12]
 8001ce4:	9304      	str	r3, [sp, #16]
 8001ce6:	9305      	str	r3, [sp, #20]
 8001ce8:	9306      	str	r3, [sp, #24]
 8001cea:	9307      	str	r3, [sp, #28]
  if(hadc->Instance==ADC1)
 8001cec:	6802      	ldr	r2, [r0, #0]
 8001cee:	4b11      	ldr	r3, [pc, #68]	; (8001d34 <HAL_ADC_MspInit+0x58>)
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d002      	beq.n	8001cfa <HAL_ADC_MspInit+0x1e>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001cf4:	b009      	add	sp, #36	; 0x24
 8001cf6:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001cfa:	f503 338a 	add.w	r3, r3, #70656	; 0x11400
 8001cfe:	6a1a      	ldr	r2, [r3, #32]
 8001d00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d04:	621a      	str	r2, [r3, #32]
 8001d06:	6a1a      	ldr	r2, [r3, #32]
 8001d08:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8001d0c:	9201      	str	r2, [sp, #4]
 8001d0e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d10:	69da      	ldr	r2, [r3, #28]
 8001d12:	f042 0201 	orr.w	r2, r2, #1
 8001d16:	61da      	str	r2, [r3, #28]
 8001d18:	69db      	ldr	r3, [r3, #28]
 8001d1a:	f003 0301 	and.w	r3, r3, #1
 8001d1e:	9302      	str	r3, [sp, #8]
 8001d20:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = MOTOR_CURENT_Pin;
 8001d22:	2308      	movs	r3, #8
 8001d24:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d26:	2303      	movs	r3, #3
 8001d28:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(MOTOR_CURENT_GPIO_Port, &GPIO_InitStruct);
 8001d2a:	a903      	add	r1, sp, #12
 8001d2c:	4802      	ldr	r0, [pc, #8]	; (8001d38 <HAL_ADC_MspInit+0x5c>)
 8001d2e:	f7fe fd59 	bl	80007e4 <HAL_GPIO_Init>
}
 8001d32:	e7df      	b.n	8001cf4 <HAL_ADC_MspInit+0x18>
 8001d34:	40012400 	.word	0x40012400
 8001d38:	40020000 	.word	0x40020000

08001d3c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d3c:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM4)
 8001d3e:	6803      	ldr	r3, [r0, #0]
 8001d40:	4a0e      	ldr	r2, [pc, #56]	; (8001d7c <HAL_TIM_Base_MspInit+0x40>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d004      	beq.n	8001d50 <HAL_TIM_Base_MspInit+0x14>
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
  else if(htim_base->Instance==TIM9)
 8001d46:	4a0e      	ldr	r2, [pc, #56]	; (8001d80 <HAL_TIM_Base_MspInit+0x44>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d00c      	beq.n	8001d66 <HAL_TIM_Base_MspInit+0x2a>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8001d4c:	b002      	add	sp, #8
 8001d4e:	4770      	bx	lr
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001d50:	4b0c      	ldr	r3, [pc, #48]	; (8001d84 <HAL_TIM_Base_MspInit+0x48>)
 8001d52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d54:	f042 0204 	orr.w	r2, r2, #4
 8001d58:	625a      	str	r2, [r3, #36]	; 0x24
 8001d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5c:	f003 0304 	and.w	r3, r3, #4
 8001d60:	9300      	str	r3, [sp, #0]
 8001d62:	9b00      	ldr	r3, [sp, #0]
 8001d64:	e7f2      	b.n	8001d4c <HAL_TIM_Base_MspInit+0x10>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001d66:	4b07      	ldr	r3, [pc, #28]	; (8001d84 <HAL_TIM_Base_MspInit+0x48>)
 8001d68:	6a1a      	ldr	r2, [r3, #32]
 8001d6a:	f042 0204 	orr.w	r2, r2, #4
 8001d6e:	621a      	str	r2, [r3, #32]
 8001d70:	6a1b      	ldr	r3, [r3, #32]
 8001d72:	f003 0304 	and.w	r3, r3, #4
 8001d76:	9301      	str	r3, [sp, #4]
 8001d78:	9b01      	ldr	r3, [sp, #4]
}
 8001d7a:	e7e7      	b.n	8001d4c <HAL_TIM_Base_MspInit+0x10>
 8001d7c:	40000800 	.word	0x40000800
 8001d80:	40010800 	.word	0x40010800
 8001d84:	40023800 	.word	0x40023800

08001d88 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d88:	b500      	push	{lr}
 8001d8a:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	9303      	str	r3, [sp, #12]
 8001d90:	9304      	str	r3, [sp, #16]
 8001d92:	9305      	str	r3, [sp, #20]
 8001d94:	9306      	str	r3, [sp, #24]
 8001d96:	9307      	str	r3, [sp, #28]
  if(htim->Instance==TIM4)
 8001d98:	6803      	ldr	r3, [r0, #0]
 8001d9a:	4a19      	ldr	r2, [pc, #100]	; (8001e00 <HAL_TIM_MspPostInit+0x78>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d005      	beq.n	8001dac <HAL_TIM_MspPostInit+0x24>

  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }
  else if(htim->Instance==TIM9)
 8001da0:	4a18      	ldr	r2, [pc, #96]	; (8001e04 <HAL_TIM_MspPostInit+0x7c>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d016      	beq.n	8001dd4 <HAL_TIM_MspPostInit+0x4c>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8001da6:	b009      	add	sp, #36	; 0x24
 8001da8:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dac:	4b16      	ldr	r3, [pc, #88]	; (8001e08 <HAL_TIM_MspPostInit+0x80>)
 8001dae:	69da      	ldr	r2, [r3, #28]
 8001db0:	f042 0202 	orr.w	r2, r2, #2
 8001db4:	61da      	str	r2, [r3, #28]
 8001db6:	69db      	ldr	r3, [r3, #28]
 8001db8:	f003 0302 	and.w	r3, r3, #2
 8001dbc:	9301      	str	r3, [sp, #4]
 8001dbe:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = LED_PWM_Pin;
 8001dc0:	2380      	movs	r3, #128	; 0x80
 8001dc2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001dc8:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(LED_PWM_GPIO_Port, &GPIO_InitStruct);
 8001dca:	a903      	add	r1, sp, #12
 8001dcc:	480f      	ldr	r0, [pc, #60]	; (8001e0c <HAL_TIM_MspPostInit+0x84>)
 8001dce:	f7fe fd09 	bl	80007e4 <HAL_GPIO_Init>
 8001dd2:	e7e8      	b.n	8001da6 <HAL_TIM_MspPostInit+0x1e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dd4:	4b0c      	ldr	r3, [pc, #48]	; (8001e08 <HAL_TIM_MspPostInit+0x80>)
 8001dd6:	69da      	ldr	r2, [r3, #28]
 8001dd8:	f042 0201 	orr.w	r2, r2, #1
 8001ddc:	61da      	str	r2, [r3, #28]
 8001dde:	69db      	ldr	r3, [r3, #28]
 8001de0:	f003 0301 	and.w	r3, r3, #1
 8001de4:	9302      	str	r3, [sp, #8]
 8001de6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = MOTOR_PWM_Pin;
 8001de8:	2304      	movs	r3, #4
 8001dea:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dec:	2302      	movs	r3, #2
 8001dee:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8001df0:	2303      	movs	r3, #3
 8001df2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(MOTOR_PWM_GPIO_Port, &GPIO_InitStruct);
 8001df4:	a903      	add	r1, sp, #12
 8001df6:	4806      	ldr	r0, [pc, #24]	; (8001e10 <HAL_TIM_MspPostInit+0x88>)
 8001df8:	f7fe fcf4 	bl	80007e4 <HAL_GPIO_Init>
}
 8001dfc:	e7d3      	b.n	8001da6 <HAL_TIM_MspPostInit+0x1e>
 8001dfe:	bf00      	nop
 8001e00:	40000800 	.word	0x40000800
 8001e04:	40010800 	.word	0x40010800
 8001e08:	40023800 	.word	0x40023800
 8001e0c:	40020400 	.word	0x40020400
 8001e10:	40020000 	.word	0x40020000

08001e14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e14:	4770      	bx	lr

08001e16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e16:	e7fe      	b.n	8001e16 <HardFault_Handler>

08001e18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e18:	e7fe      	b.n	8001e18 <MemManage_Handler>

08001e1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e1a:	e7fe      	b.n	8001e1a <BusFault_Handler>

08001e1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e1c:	e7fe      	b.n	8001e1c <UsageFault_Handler>

08001e1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e1e:	4770      	bx	lr

08001e20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e20:	4770      	bx	lr

08001e22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e22:	4770      	bx	lr

08001e24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e24:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e26:	f7fe f9e1 	bl	80001ec <HAL_IncTick>
 8001e2a:	bd08      	pop	{r3, pc}

08001e2c <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8001e2c:	4b0e      	ldr	r3, [pc, #56]	; (8001e68 <SystemInit+0x3c>)
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e34:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 8001e36:	6899      	ldr	r1, [r3, #8]
 8001e38:	4a0c      	ldr	r2, [pc, #48]	; (8001e6c <SystemInit+0x40>)
 8001e3a:	400a      	ands	r2, r1
 8001e3c:	609a      	str	r2, [r3, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	f022 5288 	bic.w	r2, r2, #285212672	; 0x11000000
 8001e44:	f022 1201 	bic.w	r2, r2, #65537	; 0x10001
 8001e48:	601a      	str	r2, [r3, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001e50:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 8001e52:	689a      	ldr	r2, [r3, #8]
 8001e54:	f422 027d 	bic.w	r2, r2, #16580608	; 0xfd0000
 8001e58:	609a      	str	r2, [r3, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001e5e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e62:	4b03      	ldr	r3, [pc, #12]	; (8001e70 <SystemInit+0x44>)
 8001e64:	609a      	str	r2, [r3, #8]
 8001e66:	4770      	bx	lr
 8001e68:	40023800 	.word	0x40023800
 8001e6c:	88ffc00c 	.word	0x88ffc00c
 8001e70:	e000ed00 	.word	0xe000ed00

08001e74 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001e74:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001e76:	e003      	b.n	8001e80 <LoopCopyDataInit>

08001e78 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001e78:	4b0b      	ldr	r3, [pc, #44]	; (8001ea8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001e7a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001e7c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001e7e:	3104      	adds	r1, #4

08001e80 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001e80:	480a      	ldr	r0, [pc, #40]	; (8001eac <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001e82:	4b0b      	ldr	r3, [pc, #44]	; (8001eb0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001e84:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001e86:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001e88:	d3f6      	bcc.n	8001e78 <CopyDataInit>
  ldr r2, =_sbss
 8001e8a:	4a0a      	ldr	r2, [pc, #40]	; (8001eb4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001e8c:	e002      	b.n	8001e94 <LoopFillZerobss>

08001e8e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001e8e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001e90:	f842 3b04 	str.w	r3, [r2], #4

08001e94 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001e94:	4b08      	ldr	r3, [pc, #32]	; (8001eb8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001e96:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001e98:	d3f9      	bcc.n	8001e8e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001e9a:	f7ff ffc7 	bl	8001e2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e9e:	f000 f80f 	bl	8001ec0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ea2:	f7ff fee7 	bl	8001c74 <main>
  bx lr
 8001ea6:	4770      	bx	lr
  ldr r3, =_sidata
 8001ea8:	08001f54 	.word	0x08001f54
  ldr r0, =_sdata
 8001eac:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001eb0:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8001eb4:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8001eb8:	20000100 	.word	0x20000100

08001ebc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ebc:	e7fe      	b.n	8001ebc <ADC1_IRQHandler>
	...

08001ec0 <__libc_init_array>:
 8001ec0:	b570      	push	{r4, r5, r6, lr}
 8001ec2:	2500      	movs	r5, #0
 8001ec4:	4e0c      	ldr	r6, [pc, #48]	; (8001ef8 <__libc_init_array+0x38>)
 8001ec6:	4c0d      	ldr	r4, [pc, #52]	; (8001efc <__libc_init_array+0x3c>)
 8001ec8:	1ba4      	subs	r4, r4, r6
 8001eca:	10a4      	asrs	r4, r4, #2
 8001ecc:	42a5      	cmp	r5, r4
 8001ece:	d109      	bne.n	8001ee4 <__libc_init_array+0x24>
 8001ed0:	f000 f822 	bl	8001f18 <_init>
 8001ed4:	2500      	movs	r5, #0
 8001ed6:	4e0a      	ldr	r6, [pc, #40]	; (8001f00 <__libc_init_array+0x40>)
 8001ed8:	4c0a      	ldr	r4, [pc, #40]	; (8001f04 <__libc_init_array+0x44>)
 8001eda:	1ba4      	subs	r4, r4, r6
 8001edc:	10a4      	asrs	r4, r4, #2
 8001ede:	42a5      	cmp	r5, r4
 8001ee0:	d105      	bne.n	8001eee <__libc_init_array+0x2e>
 8001ee2:	bd70      	pop	{r4, r5, r6, pc}
 8001ee4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001ee8:	4798      	blx	r3
 8001eea:	3501      	adds	r5, #1
 8001eec:	e7ee      	b.n	8001ecc <__libc_init_array+0xc>
 8001eee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001ef2:	4798      	blx	r3
 8001ef4:	3501      	adds	r5, #1
 8001ef6:	e7f2      	b.n	8001ede <__libc_init_array+0x1e>
 8001ef8:	08001f4c 	.word	0x08001f4c
 8001efc:	08001f4c 	.word	0x08001f4c
 8001f00:	08001f4c 	.word	0x08001f4c
 8001f04:	08001f50 	.word	0x08001f50

08001f08 <memset>:
 8001f08:	4603      	mov	r3, r0
 8001f0a:	4402      	add	r2, r0
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d100      	bne.n	8001f12 <memset+0xa>
 8001f10:	4770      	bx	lr
 8001f12:	f803 1b01 	strb.w	r1, [r3], #1
 8001f16:	e7f9      	b.n	8001f0c <memset+0x4>

08001f18 <_init>:
 8001f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f1a:	bf00      	nop
 8001f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f1e:	bc08      	pop	{r3}
 8001f20:	469e      	mov	lr, r3
 8001f22:	4770      	bx	lr

08001f24 <_fini>:
 8001f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f26:	bf00      	nop
 8001f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f2a:	bc08      	pop	{r3}
 8001f2c:	469e      	mov	lr, r3
 8001f2e:	4770      	bx	lr
