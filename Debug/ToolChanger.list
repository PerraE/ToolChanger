
ToolChanger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000012bc  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080013f8  080013f8  000113f8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001414  08001414  00011414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001418  08001418  00011418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  0800141c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000098  2000000c  08001428  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200000a4  08001428  000200a4  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000846c  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000015a9  00000000  00000000  000284a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003fc0  00000000  00000000  00029a4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000005d0  00000000  00000000  0002da10  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000878  00000000  00000000  0002dfe0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00002fed  00000000  00000000  0002e858  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000025fd  00000000  00000000  00031845  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00033e42  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001064  00000000  00000000  00033ec0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000000c 	.word	0x2000000c
 8000158:	00000000 	.word	0x00000000
 800015c:	080013e0 	.word	0x080013e0

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000010 	.word	0x20000010
 8000178:	080013e0 	.word	0x080013e0

0800017c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800017c:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 800017e:	4b0f      	ldr	r3, [pc, #60]	; (80001bc <HAL_InitTick+0x40>)
{
 8000180:	4605      	mov	r5, r0
  if (uwTickFreq != 0U)
 8000182:	6818      	ldr	r0, [r3, #0]
 8000184:	b908      	cbnz	r0, 800018a <HAL_InitTick+0xe>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8000186:	2001      	movs	r0, #1
 8000188:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800018a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800018e:	fbb3 f3f0 	udiv	r3, r3, r0
 8000192:	4a0b      	ldr	r2, [pc, #44]	; (80001c0 <HAL_InitTick+0x44>)
 8000194:	6810      	ldr	r0, [r2, #0]
 8000196:	fbb0 f0f3 	udiv	r0, r0, r3
 800019a:	f000 f88f 	bl	80002bc <HAL_SYSTICK_Config>
 800019e:	4604      	mov	r4, r0
 80001a0:	2800      	cmp	r0, #0
 80001a2:	d1f0      	bne.n	8000186 <HAL_InitTick+0xa>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001a4:	2d0f      	cmp	r5, #15
 80001a6:	d8ee      	bhi.n	8000186 <HAL_InitTick+0xa>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001a8:	4602      	mov	r2, r0
 80001aa:	4629      	mov	r1, r5
 80001ac:	f04f 30ff 	mov.w	r0, #4294967295
 80001b0:	f000 f850 	bl	8000254 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80001b4:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <HAL_InitTick+0x48>)
 80001b6:	4620      	mov	r0, r4
 80001b8:	601d      	str	r5, [r3, #0]
  }

  /* Return function status */
  return status;
}
 80001ba:	bd38      	pop	{r3, r4, r5, pc}
 80001bc:	20000000 	.word	0x20000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	20000004 	.word	0x20000004

080001c8 <HAL_Init>:
{
 80001c8:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001ca:	2003      	movs	r0, #3
 80001cc:	f000 f830 	bl	8000230 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80001d0:	2000      	movs	r0, #0
 80001d2:	f7ff ffd3 	bl	800017c <HAL_InitTick>
 80001d6:	4604      	mov	r4, r0
 80001d8:	b918      	cbnz	r0, 80001e2 <HAL_Init+0x1a>
    HAL_MspInit();
 80001da:	f000 fff7 	bl	80011cc <HAL_MspInit>
}
 80001de:	4620      	mov	r0, r4
 80001e0:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 80001e2:	2401      	movs	r4, #1
 80001e4:	e7fb      	b.n	80001de <HAL_Init+0x16>
	...

080001e8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001e8:	4a03      	ldr	r2, [pc, #12]	; (80001f8 <HAL_IncTick+0x10>)
 80001ea:	4904      	ldr	r1, [pc, #16]	; (80001fc <HAL_IncTick+0x14>)
 80001ec:	6813      	ldr	r3, [r2, #0]
 80001ee:	6809      	ldr	r1, [r1, #0]
 80001f0:	440b      	add	r3, r1
 80001f2:	6013      	str	r3, [r2, #0]
 80001f4:	4770      	bx	lr
 80001f6:	bf00      	nop
 80001f8:	20000028 	.word	0x20000028
 80001fc:	20000000 	.word	0x20000000

08000200 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000200:	4b01      	ldr	r3, [pc, #4]	; (8000208 <HAL_GetTick+0x8>)
 8000202:	6818      	ldr	r0, [r3, #0]
}
 8000204:	4770      	bx	lr
 8000206:	bf00      	nop
 8000208:	20000028 	.word	0x20000028

0800020c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800020c:	b538      	push	{r3, r4, r5, lr}
 800020e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000210:	f7ff fff6 	bl	8000200 <HAL_GetTick>
 8000214:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000216:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000218:	bf1e      	ittt	ne
 800021a:	4b04      	ldrne	r3, [pc, #16]	; (800022c <HAL_Delay+0x20>)
 800021c:	681b      	ldrne	r3, [r3, #0]
 800021e:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000220:	f7ff ffee 	bl	8000200 <HAL_GetTick>
 8000224:	1b40      	subs	r0, r0, r5
 8000226:	4284      	cmp	r4, r0
 8000228:	d8fa      	bhi.n	8000220 <HAL_Delay+0x14>
  {
  }
}
 800022a:	bd38      	pop	{r3, r4, r5, pc}
 800022c:	20000000 	.word	0x20000000

08000230 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000230:	4a07      	ldr	r2, [pc, #28]	; (8000250 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000232:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000234:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000236:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800023a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800023e:	041b      	lsls	r3, r3, #16
 8000240:	0c1b      	lsrs	r3, r3, #16
 8000242:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000246:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800024a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800024c:	60d3      	str	r3, [r2, #12]
 800024e:	4770      	bx	lr
 8000250:	e000ed00 	.word	0xe000ed00

08000254 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000254:	4b17      	ldr	r3, [pc, #92]	; (80002b4 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000256:	b530      	push	{r4, r5, lr}
 8000258:	68dc      	ldr	r4, [r3, #12]
 800025a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800025e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000262:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000264:	2b04      	cmp	r3, #4
 8000266:	bf28      	it	cs
 8000268:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800026a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800026c:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000270:	bf98      	it	ls
 8000272:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000274:	fa05 f303 	lsl.w	r3, r5, r3
 8000278:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800027c:	bf88      	it	hi
 800027e:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000280:	4019      	ands	r1, r3
 8000282:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000284:	fa05 f404 	lsl.w	r4, r5, r4
 8000288:	3c01      	subs	r4, #1
 800028a:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 800028c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800028e:	ea42 0201 	orr.w	r2, r2, r1
 8000292:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000296:	bfa9      	itett	ge
 8000298:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800029c:	4b06      	ldrlt	r3, [pc, #24]	; (80002b8 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800029e:	b2d2      	uxtbge	r2, r2
 80002a0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002a4:	bfbb      	ittet	lt
 80002a6:	f000 000f 	andlt.w	r0, r0, #15
 80002aa:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002ac:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002b0:	541a      	strblt	r2, [r3, r0]
 80002b2:	bd30      	pop	{r4, r5, pc}
 80002b4:	e000ed00 	.word	0xe000ed00
 80002b8:	e000ed14 	.word	0xe000ed14

080002bc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80002bc:	3801      	subs	r0, #1
 80002be:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002c2:	d20a      	bcs.n	80002da <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c4:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002c6:	4b06      	ldr	r3, [pc, #24]	; (80002e0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c8:	4a06      	ldr	r2, [pc, #24]	; (80002e4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002ca:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002cc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002d0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002d2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002d4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002d6:	601a      	str	r2, [r3, #0]
 80002d8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80002da:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop
 80002e0:	e000e010 	.word	0xe000e010
 80002e4:	e000ed00 	.word	0xe000ed00

080002e8 <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
  uint32_t position = 0x00;
 80002e8:	2300      	movs	r3, #0
{ 
 80002ea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80002ee:	4a62      	ldr	r2, [pc, #392]	; (8000478 <HAL_GPIO_Init+0x190>)
  while (((GPIO_Init->Pin) >> position) != 0)
 80002f0:	f8d1 8000 	ldr.w	r8, [r1]
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80002f4:	f8df 9188 	ldr.w	r9, [pc, #392]	; 8000480 <HAL_GPIO_Init+0x198>
{ 
 80002f8:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0)
 80002fa:	fa38 f403 	lsrs.w	r4, r8, r3
 80002fe:	d102      	bne.n	8000306 <HAL_GPIO_Init+0x1e>
      }
    }
    
    position++;
  } 
}
 8000300:	b005      	add	sp, #20
 8000302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000306:	2401      	movs	r4, #1
 8000308:	409c      	lsls	r4, r3
    if(iocurrent)
 800030a:	ea18 0604 	ands.w	r6, r8, r4
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800030e:	9401      	str	r4, [sp, #4]
    if(iocurrent)
 8000310:	f000 80a7 	beq.w	8000462 <HAL_GPIO_Init+0x17a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000314:	684c      	ldr	r4, [r1, #4]
 8000316:	f024 0a10 	bic.w	sl, r4, #16
 800031a:	f1ba 0f02 	cmp.w	sl, #2
 800031e:	d116      	bne.n	800034e <HAL_GPIO_Init+0x66>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 8000320:	f04f 0e0f 	mov.w	lr, #15
        temp = GPIOx->AFR[position >> 3];
 8000324:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 8000328:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 800032c:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8000330:	f8dc 5020 	ldr.w	r5, [ip, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 8000334:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000338:	fa0e fe0b 	lsl.w	lr, lr, fp
 800033c:	ea25 0e0e 	bic.w	lr, r5, lr
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));       
 8000340:	690d      	ldr	r5, [r1, #16]
 8000342:	fa05 f50b 	lsl.w	r5, r5, fp
 8000346:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3] = temp;
 800034a:	f8cc 5020 	str.w	r5, [ip, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 800034e:	2503      	movs	r5, #3
 8000350:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000354:	fa05 f50c 	lsl.w	r5, r5, ip
 8000358:	43ed      	mvns	r5, r5
      temp = GPIOx->MODER;
 800035a:	f8d0 b000 	ldr.w	fp, [r0]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800035e:	f004 0e03 	and.w	lr, r4, #3
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8000362:	ea0b 0b05 	and.w	fp, fp, r5
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000366:	fa0e fe0c 	lsl.w	lr, lr, ip
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800036a:	f10a 3aff 	add.w	sl, sl, #4294967295
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800036e:	ea4e 0e0b 	orr.w	lr, lr, fp
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000372:	f1ba 0f01 	cmp.w	sl, #1
      GPIOx->MODER = temp;
 8000376:	f8c0 e000 	str.w	lr, [r0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800037a:	d816      	bhi.n	80003aa <HAL_GPIO_Init+0xc2>
        temp = GPIOx->OSPEEDR; 
 800037c:	f8d0 e008 	ldr.w	lr, [r0, #8]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8000380:	68cf      	ldr	r7, [r1, #12]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000382:	ea05 0e0e 	and.w	lr, r5, lr
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8000386:	fa07 fa0c 	lsl.w	sl, r7, ip
 800038a:	ea4a 0e0e 	orr.w	lr, sl, lr
        GPIOx->OSPEEDR = temp;
 800038e:	f8c0 e008 	str.w	lr, [r0, #8]
        temp = GPIOx->OTYPER;
 8000392:	f8d0 e004 	ldr.w	lr, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000396:	9f01      	ldr	r7, [sp, #4]
 8000398:	ea2e 0707 	bic.w	r7, lr, r7
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800039c:	f3c4 1e00 	ubfx	lr, r4, #4, #1
 80003a0:	fa0e fe03 	lsl.w	lr, lr, r3
 80003a4:	ea4e 0707 	orr.w	r7, lr, r7
        GPIOx->OTYPER = temp;
 80003a8:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80003aa:	68c7      	ldr	r7, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80003ac:	403d      	ands	r5, r7
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80003ae:	688f      	ldr	r7, [r1, #8]
 80003b0:	fa07 f70c 	lsl.w	r7, r7, ip
 80003b4:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80003b6:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80003b8:	00e5      	lsls	r5, r4, #3
 80003ba:	d552      	bpl.n	8000462 <HAL_GPIO_Init+0x17a>
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80003bc:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003c0:	f8d9 5020 	ldr.w	r5, [r9, #32]
 80003c4:	f023 0703 	bic.w	r7, r3, #3
 80003c8:	f045 0501 	orr.w	r5, r5, #1
 80003cc:	f8c9 5020 	str.w	r5, [r9, #32]
 80003d0:	f8d9 5020 	ldr.w	r5, [r9, #32]
 80003d4:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80003d8:	f005 0501 	and.w	r5, r5, #1
 80003dc:	9503      	str	r5, [sp, #12]
 80003de:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80003e2:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003e6:	9d03      	ldr	r5, [sp, #12]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80003e8:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        temp = SYSCFG->EXTICR[position >> 2];
 80003ec:	68bd      	ldr	r5, [r7, #8]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80003ee:	fa0e fe0c 	lsl.w	lr, lr, ip
 80003f2:	ea25 0e0e 	bic.w	lr, r5, lr
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80003f6:	4d21      	ldr	r5, [pc, #132]	; (800047c <HAL_GPIO_Init+0x194>)
 80003f8:	42a8      	cmp	r0, r5
 80003fa:	d034      	beq.n	8000466 <HAL_GPIO_Init+0x17e>
 80003fc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000400:	42a8      	cmp	r0, r5
 8000402:	d032      	beq.n	800046a <HAL_GPIO_Init+0x182>
 8000404:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000408:	42a8      	cmp	r0, r5
 800040a:	d030      	beq.n	800046e <HAL_GPIO_Init+0x186>
 800040c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000410:	42a8      	cmp	r0, r5
 8000412:	d02e      	beq.n	8000472 <HAL_GPIO_Init+0x18a>
 8000414:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000418:	42a8      	cmp	r0, r5
 800041a:	bf14      	ite	ne
 800041c:	2505      	movne	r5, #5
 800041e:	2504      	moveq	r5, #4
 8000420:	fa05 f50c 	lsl.w	r5, r5, ip
 8000424:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8000428:	60bd      	str	r5, [r7, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800042a:	43f7      	mvns	r7, r6
        temp = EXTI->IMR;
 800042c:	6815      	ldr	r5, [r2, #0]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800042e:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000432:	bf0c      	ite	eq
 8000434:	403d      	andeq	r5, r7
          SET_BIT(temp, iocurrent); 
 8000436:	4335      	orrne	r5, r6
        EXTI->IMR = temp;
 8000438:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 800043a:	6855      	ldr	r5, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800043c:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8000440:	bf0c      	ite	eq
 8000442:	403d      	andeq	r5, r7
          SET_BIT(temp, iocurrent); 
 8000444:	4335      	orrne	r5, r6
        EXTI->EMR = temp;
 8000446:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8000448:	6895      	ldr	r5, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800044a:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 800044e:	bf0c      	ite	eq
 8000450:	403d      	andeq	r5, r7
          SET_BIT(temp, iocurrent); 
 8000452:	4335      	orrne	r5, r6
        EXTI->RTSR = temp;
 8000454:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8000456:	68d5      	ldr	r5, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000458:	02a4      	lsls	r4, r4, #10
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 800045a:	bf54      	ite	pl
 800045c:	403d      	andpl	r5, r7
          SET_BIT(temp, iocurrent); 
 800045e:	4335      	orrmi	r5, r6
        EXTI->FTSR = temp;
 8000460:	60d5      	str	r5, [r2, #12]
    position++;
 8000462:	3301      	adds	r3, #1
 8000464:	e749      	b.n	80002fa <HAL_GPIO_Init+0x12>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000466:	2500      	movs	r5, #0
 8000468:	e7da      	b.n	8000420 <HAL_GPIO_Init+0x138>
 800046a:	2501      	movs	r5, #1
 800046c:	e7d8      	b.n	8000420 <HAL_GPIO_Init+0x138>
 800046e:	2502      	movs	r5, #2
 8000470:	e7d6      	b.n	8000420 <HAL_GPIO_Init+0x138>
 8000472:	2503      	movs	r5, #3
 8000474:	e7d4      	b.n	8000420 <HAL_GPIO_Init+0x138>
 8000476:	bf00      	nop
 8000478:	40010400 	.word	0x40010400
 800047c:	40020000 	.word	0x40020000
 8000480:	40023800 	.word	0x40023800

08000484 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000484:	b10a      	cbz	r2, 800048a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8000486:	6181      	str	r1, [r0, #24]
 8000488:	4770      	bx	lr
 800048a:	0409      	lsls	r1, r1, #16
 800048c:	e7fb      	b.n	8000486 <HAL_GPIO_WritePin+0x2>
	...

08000490 <RCC_SetFlashLatencyFromMSIRange>:
{
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8000490:	4b1c      	ldr	r3, [pc, #112]	; (8000504 <RCC_SetFlashLatencyFromMSIRange+0x74>)
{
 8000492:	b082      	sub	sp, #8
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8000494:	689a      	ldr	r2, [r3, #8]
 8000496:	f012 0ff0 	tst.w	r2, #240	; 0xf0
 800049a:	d00c      	beq.n	80004b6 <RCC_SetFlashLatencyFromMSIRange+0x26>
{
 800049c:	2200      	movs	r2, #0
    {
      latency = FLASH_LATENCY_1; /* 1WS */
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800049e:	491a      	ldr	r1, [pc, #104]	; (8000508 <RCC_SetFlashLatencyFromMSIRange+0x78>)
 80004a0:	680b      	ldr	r3, [r1, #0]
 80004a2:	f023 0301 	bic.w	r3, r3, #1
 80004a6:	4313      	orrs	r3, r2
 80004a8:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80004aa:	6808      	ldr	r0, [r1, #0]
 80004ac:	f000 0001 	and.w	r0, r0, #1
 80004b0:	4050      	eors	r0, r2
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 80004b2:	b002      	add	sp, #8
 80004b4:	4770      	bx	lr
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80004b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80004b8:	4914      	ldr	r1, [pc, #80]	; (800050c <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 80004ba:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 80004be:	d00f      	beq.n	80004e0 <RCC_SetFlashLatencyFromMSIRange+0x50>
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80004c0:	680a      	ldr	r2, [r1, #0]
 80004c2:	f402 52c0 	and.w	r2, r2, #6144	; 0x1800
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80004c6:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
 80004ca:	d1e7      	bne.n	800049c <RCC_SetFlashLatencyFromMSIRange+0xc>
 80004cc:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
 80004d0:	d1e4      	bne.n	800049c <RCC_SetFlashLatencyFromMSIRange+0xc>
  __HAL_FLASH_SET_LATENCY(latency);
 80004d2:	4a0d      	ldr	r2, [pc, #52]	; (8000508 <RCC_SetFlashLatencyFromMSIRange+0x78>)
 80004d4:	6813      	ldr	r3, [r2, #0]
 80004d6:	f043 0304 	orr.w	r3, r3, #4
 80004da:	6013      	str	r3, [r2, #0]
      latency = FLASH_LATENCY_1; /* 1WS */
 80004dc:	2201      	movs	r2, #1
 80004de:	e7de      	b.n	800049e <RCC_SetFlashLatencyFromMSIRange+0xe>
      __HAL_RCC_PWR_CLK_ENABLE();
 80004e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80004e2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80004e6:	625a      	str	r2, [r3, #36]	; 0x24
 80004e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80004ea:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80004ee:	9201      	str	r2, [sp, #4]
 80004f0:	9a01      	ldr	r2, [sp, #4]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80004f2:	680a      	ldr	r2, [r1, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
 80004f4:	6a59      	ldr	r1, [r3, #36]	; 0x24
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80004f6:	f402 52c0 	and.w	r2, r2, #6144	; 0x1800
      __HAL_RCC_PWR_CLK_DISABLE();
 80004fa:	f021 5180 	bic.w	r1, r1, #268435456	; 0x10000000
 80004fe:	6259      	str	r1, [r3, #36]	; 0x24
 8000500:	e7e1      	b.n	80004c6 <RCC_SetFlashLatencyFromMSIRange+0x36>
 8000502:	bf00      	nop
 8000504:	40023800 	.word	0x40023800
 8000508:	40023c00 	.word	0x40023c00
 800050c:	40007000 	.word	0x40007000

08000510 <HAL_RCC_OscConfig>:
{
 8000510:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8000514:	4604      	mov	r4, r0
 8000516:	b908      	cbnz	r0, 800051c <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000518:	2001      	movs	r0, #1
 800051a:	e077      	b.n	800060c <HAL_RCC_OscConfig+0xfc>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800051c:	4ba0      	ldr	r3, [pc, #640]	; (80007a0 <HAL_RCC_OscConfig+0x290>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800051e:	6802      	ldr	r2, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000520:	689e      	ldr	r6, [r3, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000522:	689f      	ldr	r7, [r3, #8]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000524:	07d0      	lsls	r0, r2, #31
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000526:	f006 060c 	and.w	r6, r6, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800052a:	f407 3780 	and.w	r7, r7, #65536	; 0x10000
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800052e:	d44b      	bmi.n	80005c8 <HAL_RCC_OscConfig+0xb8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000530:	6823      	ldr	r3, [r4, #0]
 8000532:	0799      	lsls	r1, r3, #30
 8000534:	f100 8092 	bmi.w	800065c <HAL_RCC_OscConfig+0x14c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000538:	6823      	ldr	r3, [r4, #0]
 800053a:	06d8      	lsls	r0, r3, #27
 800053c:	d536      	bpl.n	80005ac <HAL_RCC_OscConfig+0x9c>
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 800053e:	2e00      	cmp	r6, #0
 8000540:	f040 80dc 	bne.w	80006fc <HAL_RCC_OscConfig+0x1ec>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000544:	4d96      	ldr	r5, [pc, #600]	; (80007a0 <HAL_RCC_OscConfig+0x290>)
 8000546:	682b      	ldr	r3, [r5, #0]
 8000548:	0599      	lsls	r1, r3, #22
 800054a:	d502      	bpl.n	8000552 <HAL_RCC_OscConfig+0x42>
 800054c:	69a3      	ldr	r3, [r4, #24]
 800054e:	2b00      	cmp	r3, #0
 8000550:	d0e2      	beq.n	8000518 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000552:	686b      	ldr	r3, [r5, #4]
 8000554:	6a20      	ldr	r0, [r4, #32]
 8000556:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800055a:	4298      	cmp	r0, r3
 800055c:	f240 80bc 	bls.w	80006d8 <HAL_RCC_OscConfig+0x1c8>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000560:	f7ff ff96 	bl	8000490 <RCC_SetFlashLatencyFromMSIRange>
 8000564:	2800      	cmp	r0, #0
 8000566:	d1d7      	bne.n	8000518 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000568:	686b      	ldr	r3, [r5, #4]
 800056a:	6a22      	ldr	r2, [r4, #32]
 800056c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000570:	4313      	orrs	r3, r2
 8000572:	606b      	str	r3, [r5, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000574:	686b      	ldr	r3, [r5, #4]
 8000576:	69e2      	ldr	r2, [r4, #28]
 8000578:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800057c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000580:	606b      	str	r3, [r5, #4]
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8000582:	4b87      	ldr	r3, [pc, #540]	; (80007a0 <HAL_RCC_OscConfig+0x290>)
 8000584:	6899      	ldr	r1, [r3, #8]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000586:	6a23      	ldr	r3, [r4, #32]
 8000588:	0b5b      	lsrs	r3, r3, #13
 800058a:	1c5a      	adds	r2, r3, #1
 800058c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000590:	4093      	lsls	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8000592:	f3c1 1203 	ubfx	r2, r1, #4, #4
 8000596:	4983      	ldr	r1, [pc, #524]	; (80007a4 <HAL_RCC_OscConfig+0x294>)
 8000598:	5c8a      	ldrb	r2, [r1, r2]
 800059a:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800059c:	4a82      	ldr	r2, [pc, #520]	; (80007a8 <HAL_RCC_OscConfig+0x298>)
 800059e:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick(uwTickPrio);
 80005a0:	4b82      	ldr	r3, [pc, #520]	; (80007ac <HAL_RCC_OscConfig+0x29c>)
 80005a2:	6818      	ldr	r0, [r3, #0]
 80005a4:	f7ff fdea 	bl	800017c <HAL_InitTick>
        if(status != HAL_OK)
 80005a8:	2800      	cmp	r0, #0
 80005aa:	d12f      	bne.n	800060c <HAL_RCC_OscConfig+0xfc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80005ac:	6823      	ldr	r3, [r4, #0]
 80005ae:	0718      	lsls	r0, r3, #28
 80005b0:	f100 80d3 	bmi.w	800075a <HAL_RCC_OscConfig+0x24a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80005b4:	6823      	ldr	r3, [r4, #0]
 80005b6:	0759      	lsls	r1, r3, #29
 80005b8:	f100 8100 	bmi.w	80007bc <HAL_RCC_OscConfig+0x2ac>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80005bc:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80005be:	2800      	cmp	r0, #0
 80005c0:	f040 816a 	bne.w	8000898 <HAL_RCC_OscConfig+0x388>
  return HAL_OK;
 80005c4:	2000      	movs	r0, #0
 80005c6:	e021      	b.n	800060c <HAL_RCC_OscConfig+0xfc>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80005c8:	2e08      	cmp	r6, #8
 80005ca:	d002      	beq.n	80005d2 <HAL_RCC_OscConfig+0xc2>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80005cc:	2e0c      	cmp	r6, #12
 80005ce:	d107      	bne.n	80005e0 <HAL_RCC_OscConfig+0xd0>
 80005d0:	b137      	cbz	r7, 80005e0 <HAL_RCC_OscConfig+0xd0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	039a      	lsls	r2, r3, #14
 80005d6:	d5ab      	bpl.n	8000530 <HAL_RCC_OscConfig+0x20>
 80005d8:	6863      	ldr	r3, [r4, #4]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d1a8      	bne.n	8000530 <HAL_RCC_OscConfig+0x20>
 80005de:	e79b      	b.n	8000518 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005e0:	6863      	ldr	r3, [r4, #4]
 80005e2:	4d6f      	ldr	r5, [pc, #444]	; (80007a0 <HAL_RCC_OscConfig+0x290>)
 80005e4:	2b01      	cmp	r3, #1
 80005e6:	d114      	bne.n	8000612 <HAL_RCC_OscConfig+0x102>
 80005e8:	682b      	ldr	r3, [r5, #0]
 80005ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005ee:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80005f0:	f7ff fe06 	bl	8000200 <HAL_GetTick>
 80005f4:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80005f6:	4d6a      	ldr	r5, [pc, #424]	; (80007a0 <HAL_RCC_OscConfig+0x290>)
 80005f8:	682b      	ldr	r3, [r5, #0]
 80005fa:	039b      	lsls	r3, r3, #14
 80005fc:	d498      	bmi.n	8000530 <HAL_RCC_OscConfig+0x20>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80005fe:	f7ff fdff 	bl	8000200 <HAL_GetTick>
 8000602:	eba0 0008 	sub.w	r0, r0, r8
 8000606:	2864      	cmp	r0, #100	; 0x64
 8000608:	d9f6      	bls.n	80005f8 <HAL_RCC_OscConfig+0xe8>
            return HAL_TIMEOUT;
 800060a:	2003      	movs	r0, #3
}
 800060c:	b003      	add	sp, #12
 800060e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000612:	b9ab      	cbnz	r3, 8000640 <HAL_RCC_OscConfig+0x130>
 8000614:	682b      	ldr	r3, [r5, #0]
 8000616:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800061a:	602b      	str	r3, [r5, #0]
 800061c:	682b      	ldr	r3, [r5, #0]
 800061e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000622:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000624:	f7ff fdec 	bl	8000200 <HAL_GetTick>
 8000628:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800062a:	682b      	ldr	r3, [r5, #0]
 800062c:	0398      	lsls	r0, r3, #14
 800062e:	f57f af7f 	bpl.w	8000530 <HAL_RCC_OscConfig+0x20>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000632:	f7ff fde5 	bl	8000200 <HAL_GetTick>
 8000636:	eba0 0008 	sub.w	r0, r0, r8
 800063a:	2864      	cmp	r0, #100	; 0x64
 800063c:	d9f5      	bls.n	800062a <HAL_RCC_OscConfig+0x11a>
 800063e:	e7e4      	b.n	800060a <HAL_RCC_OscConfig+0xfa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000640:	2b05      	cmp	r3, #5
 8000642:	682b      	ldr	r3, [r5, #0]
 8000644:	d103      	bne.n	800064e <HAL_RCC_OscConfig+0x13e>
 8000646:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800064a:	602b      	str	r3, [r5, #0]
 800064c:	e7cc      	b.n	80005e8 <HAL_RCC_OscConfig+0xd8>
 800064e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000652:	602b      	str	r3, [r5, #0]
 8000654:	682b      	ldr	r3, [r5, #0]
 8000656:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800065a:	e7c8      	b.n	80005ee <HAL_RCC_OscConfig+0xde>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800065c:	2e04      	cmp	r6, #4
 800065e:	d002      	beq.n	8000666 <HAL_RCC_OscConfig+0x156>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000660:	2e0c      	cmp	r6, #12
 8000662:	d110      	bne.n	8000686 <HAL_RCC_OscConfig+0x176>
 8000664:	b97f      	cbnz	r7, 8000686 <HAL_RCC_OscConfig+0x176>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000666:	4b4e      	ldr	r3, [pc, #312]	; (80007a0 <HAL_RCC_OscConfig+0x290>)
 8000668:	681a      	ldr	r2, [r3, #0]
 800066a:	0791      	lsls	r1, r2, #30
 800066c:	d503      	bpl.n	8000676 <HAL_RCC_OscConfig+0x166>
 800066e:	68e2      	ldr	r2, [r4, #12]
 8000670:	2a01      	cmp	r2, #1
 8000672:	f47f af51 	bne.w	8000518 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000676:	685a      	ldr	r2, [r3, #4]
 8000678:	6921      	ldr	r1, [r4, #16]
 800067a:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 800067e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000682:	605a      	str	r2, [r3, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000684:	e758      	b.n	8000538 <HAL_RCC_OscConfig+0x28>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000686:	68e2      	ldr	r2, [r4, #12]
 8000688:	4b49      	ldr	r3, [pc, #292]	; (80007b0 <HAL_RCC_OscConfig+0x2a0>)
 800068a:	b1b2      	cbz	r2, 80006ba <HAL_RCC_OscConfig+0x1aa>
        __HAL_RCC_HSI_ENABLE();
 800068c:	2201      	movs	r2, #1
 800068e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000690:	f7ff fdb6 	bl	8000200 <HAL_GetTick>
 8000694:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000696:	4d42      	ldr	r5, [pc, #264]	; (80007a0 <HAL_RCC_OscConfig+0x290>)
 8000698:	682b      	ldr	r3, [r5, #0]
 800069a:	079a      	lsls	r2, r3, #30
 800069c:	d507      	bpl.n	80006ae <HAL_RCC_OscConfig+0x19e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800069e:	686b      	ldr	r3, [r5, #4]
 80006a0:	6922      	ldr	r2, [r4, #16]
 80006a2:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80006a6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80006aa:	606b      	str	r3, [r5, #4]
 80006ac:	e744      	b.n	8000538 <HAL_RCC_OscConfig+0x28>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80006ae:	f7ff fda7 	bl	8000200 <HAL_GetTick>
 80006b2:	1bc0      	subs	r0, r0, r7
 80006b4:	2802      	cmp	r0, #2
 80006b6:	d9ef      	bls.n	8000698 <HAL_RCC_OscConfig+0x188>
 80006b8:	e7a7      	b.n	800060a <HAL_RCC_OscConfig+0xfa>
        __HAL_RCC_HSI_DISABLE();
 80006ba:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80006bc:	f7ff fda0 	bl	8000200 <HAL_GetTick>
 80006c0:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80006c2:	4d37      	ldr	r5, [pc, #220]	; (80007a0 <HAL_RCC_OscConfig+0x290>)
 80006c4:	682b      	ldr	r3, [r5, #0]
 80006c6:	079b      	lsls	r3, r3, #30
 80006c8:	f57f af36 	bpl.w	8000538 <HAL_RCC_OscConfig+0x28>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80006cc:	f7ff fd98 	bl	8000200 <HAL_GetTick>
 80006d0:	1bc0      	subs	r0, r0, r7
 80006d2:	2802      	cmp	r0, #2
 80006d4:	d9f6      	bls.n	80006c4 <HAL_RCC_OscConfig+0x1b4>
 80006d6:	e798      	b.n	800060a <HAL_RCC_OscConfig+0xfa>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80006d8:	686b      	ldr	r3, [r5, #4]
 80006da:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80006de:	4303      	orrs	r3, r0
 80006e0:	606b      	str	r3, [r5, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80006e2:	686b      	ldr	r3, [r5, #4]
 80006e4:	69e2      	ldr	r2, [r4, #28]
 80006e6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80006ea:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80006ee:	606b      	str	r3, [r5, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80006f0:	f7ff fece 	bl	8000490 <RCC_SetFlashLatencyFromMSIRange>
 80006f4:	2800      	cmp	r0, #0
 80006f6:	f43f af44 	beq.w	8000582 <HAL_RCC_OscConfig+0x72>
 80006fa:	e70d      	b.n	8000518 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80006fc:	69a2      	ldr	r2, [r4, #24]
 80006fe:	4b2d      	ldr	r3, [pc, #180]	; (80007b4 <HAL_RCC_OscConfig+0x2a4>)
 8000700:	b1e2      	cbz	r2, 800073c <HAL_RCC_OscConfig+0x22c>
        __HAL_RCC_MSI_ENABLE();
 8000702:	2201      	movs	r2, #1
 8000704:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000706:	f7ff fd7b 	bl	8000200 <HAL_GetTick>
 800070a:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800070c:	4d24      	ldr	r5, [pc, #144]	; (80007a0 <HAL_RCC_OscConfig+0x290>)
 800070e:	682b      	ldr	r3, [r5, #0]
 8000710:	059a      	lsls	r2, r3, #22
 8000712:	d50d      	bpl.n	8000730 <HAL_RCC_OscConfig+0x220>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000714:	686b      	ldr	r3, [r5, #4]
 8000716:	6a22      	ldr	r2, [r4, #32]
 8000718:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800071c:	4313      	orrs	r3, r2
 800071e:	606b      	str	r3, [r5, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000720:	686b      	ldr	r3, [r5, #4]
 8000722:	69e2      	ldr	r2, [r4, #28]
 8000724:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000728:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800072c:	606b      	str	r3, [r5, #4]
 800072e:	e73d      	b.n	80005ac <HAL_RCC_OscConfig+0x9c>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000730:	f7ff fd66 	bl	8000200 <HAL_GetTick>
 8000734:	1bc0      	subs	r0, r0, r7
 8000736:	2802      	cmp	r0, #2
 8000738:	d9e9      	bls.n	800070e <HAL_RCC_OscConfig+0x1fe>
 800073a:	e766      	b.n	800060a <HAL_RCC_OscConfig+0xfa>
        __HAL_RCC_MSI_DISABLE();
 800073c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800073e:	f7ff fd5f 	bl	8000200 <HAL_GetTick>
 8000742:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8000744:	4d16      	ldr	r5, [pc, #88]	; (80007a0 <HAL_RCC_OscConfig+0x290>)
 8000746:	682b      	ldr	r3, [r5, #0]
 8000748:	059b      	lsls	r3, r3, #22
 800074a:	f57f af2f 	bpl.w	80005ac <HAL_RCC_OscConfig+0x9c>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800074e:	f7ff fd57 	bl	8000200 <HAL_GetTick>
 8000752:	1bc0      	subs	r0, r0, r7
 8000754:	2802      	cmp	r0, #2
 8000756:	d9f6      	bls.n	8000746 <HAL_RCC_OscConfig+0x236>
 8000758:	e757      	b.n	800060a <HAL_RCC_OscConfig+0xfa>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800075a:	6962      	ldr	r2, [r4, #20]
 800075c:	4b16      	ldr	r3, [pc, #88]	; (80007b8 <HAL_RCC_OscConfig+0x2a8>)
 800075e:	b17a      	cbz	r2, 8000780 <HAL_RCC_OscConfig+0x270>
      __HAL_RCC_LSI_ENABLE();
 8000760:	2201      	movs	r2, #1
 8000762:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000764:	f7ff fd4c 	bl	8000200 <HAL_GetTick>
 8000768:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800076a:	4d0d      	ldr	r5, [pc, #52]	; (80007a0 <HAL_RCC_OscConfig+0x290>)
 800076c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800076e:	079a      	lsls	r2, r3, #30
 8000770:	f53f af20 	bmi.w	80005b4 <HAL_RCC_OscConfig+0xa4>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000774:	f7ff fd44 	bl	8000200 <HAL_GetTick>
 8000778:	1bc0      	subs	r0, r0, r7
 800077a:	2802      	cmp	r0, #2
 800077c:	d9f6      	bls.n	800076c <HAL_RCC_OscConfig+0x25c>
 800077e:	e744      	b.n	800060a <HAL_RCC_OscConfig+0xfa>
      __HAL_RCC_LSI_DISABLE();
 8000780:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000782:	f7ff fd3d 	bl	8000200 <HAL_GetTick>
 8000786:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8000788:	4d05      	ldr	r5, [pc, #20]	; (80007a0 <HAL_RCC_OscConfig+0x290>)
 800078a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800078c:	079b      	lsls	r3, r3, #30
 800078e:	f57f af11 	bpl.w	80005b4 <HAL_RCC_OscConfig+0xa4>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000792:	f7ff fd35 	bl	8000200 <HAL_GetTick>
 8000796:	1bc0      	subs	r0, r0, r7
 8000798:	2802      	cmp	r0, #2
 800079a:	d9f6      	bls.n	800078a <HAL_RCC_OscConfig+0x27a>
 800079c:	e735      	b.n	800060a <HAL_RCC_OscConfig+0xfa>
 800079e:	bf00      	nop
 80007a0:	40023800 	.word	0x40023800
 80007a4:	080013f8 	.word	0x080013f8
 80007a8:	20000008 	.word	0x20000008
 80007ac:	20000004 	.word	0x20000004
 80007b0:	42470000 	.word	0x42470000
 80007b4:	42470020 	.word	0x42470020
 80007b8:	42470680 	.word	0x42470680
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80007bc:	4b60      	ldr	r3, [pc, #384]	; (8000940 <HAL_RCC_OscConfig+0x430>)
 80007be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80007c0:	00d0      	lsls	r0, r2, #3
 80007c2:	d429      	bmi.n	8000818 <HAL_RCC_OscConfig+0x308>
      pwrclkchanged = SET;
 80007c4:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80007c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80007c8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80007cc:	625a      	str	r2, [r3, #36]	; 0x24
 80007ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007d4:	9301      	str	r3, [sp, #4]
 80007d6:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80007d8:	4d5a      	ldr	r5, [pc, #360]	; (8000944 <HAL_RCC_OscConfig+0x434>)
 80007da:	682b      	ldr	r3, [r5, #0]
 80007dc:	05d9      	lsls	r1, r3, #23
 80007de:	d51d      	bpl.n	800081c <HAL_RCC_OscConfig+0x30c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80007e0:	68a3      	ldr	r3, [r4, #8]
 80007e2:	4d57      	ldr	r5, [pc, #348]	; (8000940 <HAL_RCC_OscConfig+0x430>)
 80007e4:	2b01      	cmp	r3, #1
 80007e6:	d12a      	bne.n	800083e <HAL_RCC_OscConfig+0x32e>
 80007e8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80007ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007ee:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 80007f0:	f7ff fd06 	bl	8000200 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80007f4:	f241 3588 	movw	r5, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80007f8:	4681      	mov	r9, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80007fa:	f8df 8144 	ldr.w	r8, [pc, #324]	; 8000940 <HAL_RCC_OscConfig+0x430>
 80007fe:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
 8000802:	059b      	lsls	r3, r3, #22
 8000804:	d541      	bpl.n	800088a <HAL_RCC_OscConfig+0x37a>
    if(pwrclkchanged == SET)
 8000806:	2f00      	cmp	r7, #0
 8000808:	f43f aed8 	beq.w	80005bc <HAL_RCC_OscConfig+0xac>
      __HAL_RCC_PWR_CLK_DISABLE();
 800080c:	4a4c      	ldr	r2, [pc, #304]	; (8000940 <HAL_RCC_OscConfig+0x430>)
 800080e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000810:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000814:	6253      	str	r3, [r2, #36]	; 0x24
 8000816:	e6d1      	b.n	80005bc <HAL_RCC_OscConfig+0xac>
    FlagStatus       pwrclkchanged = RESET;
 8000818:	2700      	movs	r7, #0
 800081a:	e7dd      	b.n	80007d8 <HAL_RCC_OscConfig+0x2c8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800081c:	682b      	ldr	r3, [r5, #0]
 800081e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000822:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000824:	f7ff fcec 	bl	8000200 <HAL_GetTick>
 8000828:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800082a:	682b      	ldr	r3, [r5, #0]
 800082c:	05da      	lsls	r2, r3, #23
 800082e:	d4d7      	bmi.n	80007e0 <HAL_RCC_OscConfig+0x2d0>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000830:	f7ff fce6 	bl	8000200 <HAL_GetTick>
 8000834:	eba0 0008 	sub.w	r0, r0, r8
 8000838:	2864      	cmp	r0, #100	; 0x64
 800083a:	d9f6      	bls.n	800082a <HAL_RCC_OscConfig+0x31a>
 800083c:	e6e5      	b.n	800060a <HAL_RCC_OscConfig+0xfa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800083e:	b9b3      	cbnz	r3, 800086e <HAL_RCC_OscConfig+0x35e>
 8000840:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000842:	f241 3988 	movw	r9, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000846:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800084a:	636b      	str	r3, [r5, #52]	; 0x34
 800084c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800084e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000852:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000854:	f7ff fcd4 	bl	8000200 <HAL_GetTick>
 8000858:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800085a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800085c:	0598      	lsls	r0, r3, #22
 800085e:	d5d2      	bpl.n	8000806 <HAL_RCC_OscConfig+0x2f6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000860:	f7ff fcce 	bl	8000200 <HAL_GetTick>
 8000864:	eba0 0008 	sub.w	r0, r0, r8
 8000868:	4548      	cmp	r0, r9
 800086a:	d9f6      	bls.n	800085a <HAL_RCC_OscConfig+0x34a>
 800086c:	e6cd      	b.n	800060a <HAL_RCC_OscConfig+0xfa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800086e:	2b05      	cmp	r3, #5
 8000870:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000872:	d103      	bne.n	800087c <HAL_RCC_OscConfig+0x36c>
 8000874:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000878:	636b      	str	r3, [r5, #52]	; 0x34
 800087a:	e7b5      	b.n	80007e8 <HAL_RCC_OscConfig+0x2d8>
 800087c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000880:	636b      	str	r3, [r5, #52]	; 0x34
 8000882:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000884:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000888:	e7b1      	b.n	80007ee <HAL_RCC_OscConfig+0x2de>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800088a:	f7ff fcb9 	bl	8000200 <HAL_GetTick>
 800088e:	eba0 0009 	sub.w	r0, r0, r9
 8000892:	42a8      	cmp	r0, r5
 8000894:	d9b3      	bls.n	80007fe <HAL_RCC_OscConfig+0x2ee>
 8000896:	e6b8      	b.n	800060a <HAL_RCC_OscConfig+0xfa>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000898:	2e0c      	cmp	r6, #12
 800089a:	d039      	beq.n	8000910 <HAL_RCC_OscConfig+0x400>
 800089c:	2300      	movs	r3, #0
 800089e:	4d2a      	ldr	r5, [pc, #168]	; (8000948 <HAL_RCC_OscConfig+0x438>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80008a0:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80008a2:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80008a4:	d126      	bne.n	80008f4 <HAL_RCC_OscConfig+0x3e4>
        tickstart = HAL_GetTick();
 80008a6:	f7ff fcab 	bl	8000200 <HAL_GetTick>
 80008aa:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80008ac:	4e24      	ldr	r6, [pc, #144]	; (8000940 <HAL_RCC_OscConfig+0x430>)
 80008ae:	6833      	ldr	r3, [r6, #0]
 80008b0:	0199      	lsls	r1, r3, #6
 80008b2:	d419      	bmi.n	80008e8 <HAL_RCC_OscConfig+0x3d8>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80008b4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80008b6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80008b8:	68b2      	ldr	r2, [r6, #8]
 80008ba:	430b      	orrs	r3, r1
 80008bc:	f422 027d 	bic.w	r2, r2, #16580608	; 0xfd0000
 80008c0:	4313      	orrs	r3, r2
 80008c2:	6b22      	ldr	r2, [r4, #48]	; 0x30
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80008c4:	4c1e      	ldr	r4, [pc, #120]	; (8000940 <HAL_RCC_OscConfig+0x430>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80008c6:	4313      	orrs	r3, r2
 80008c8:	60b3      	str	r3, [r6, #8]
        __HAL_RCC_PLL_ENABLE();
 80008ca:	2301      	movs	r3, #1
 80008cc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80008ce:	f7ff fc97 	bl	8000200 <HAL_GetTick>
 80008d2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80008d4:	6823      	ldr	r3, [r4, #0]
 80008d6:	019a      	lsls	r2, r3, #6
 80008d8:	f53f ae74 	bmi.w	80005c4 <HAL_RCC_OscConfig+0xb4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80008dc:	f7ff fc90 	bl	8000200 <HAL_GetTick>
 80008e0:	1b40      	subs	r0, r0, r5
 80008e2:	2802      	cmp	r0, #2
 80008e4:	d9f6      	bls.n	80008d4 <HAL_RCC_OscConfig+0x3c4>
 80008e6:	e690      	b.n	800060a <HAL_RCC_OscConfig+0xfa>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80008e8:	f7ff fc8a 	bl	8000200 <HAL_GetTick>
 80008ec:	1bc0      	subs	r0, r0, r7
 80008ee:	2802      	cmp	r0, #2
 80008f0:	d9dd      	bls.n	80008ae <HAL_RCC_OscConfig+0x39e>
 80008f2:	e68a      	b.n	800060a <HAL_RCC_OscConfig+0xfa>
        tickstart = HAL_GetTick();
 80008f4:	f7ff fc84 	bl	8000200 <HAL_GetTick>
 80008f8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80008fa:	4c11      	ldr	r4, [pc, #68]	; (8000940 <HAL_RCC_OscConfig+0x430>)
 80008fc:	6823      	ldr	r3, [r4, #0]
 80008fe:	019b      	lsls	r3, r3, #6
 8000900:	f57f ae60 	bpl.w	80005c4 <HAL_RCC_OscConfig+0xb4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000904:	f7ff fc7c 	bl	8000200 <HAL_GetTick>
 8000908:	1b40      	subs	r0, r0, r5
 800090a:	2802      	cmp	r0, #2
 800090c:	d9f6      	bls.n	80008fc <HAL_RCC_OscConfig+0x3ec>
 800090e:	e67c      	b.n	800060a <HAL_RCC_OscConfig+0xfa>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000910:	2801      	cmp	r0, #1
 8000912:	f43f ae7b 	beq.w	800060c <HAL_RCC_OscConfig+0xfc>
        pll_config = RCC->CFGR;
 8000916:	4b0a      	ldr	r3, [pc, #40]	; (8000940 <HAL_RCC_OscConfig+0x430>)
 8000918:	6898      	ldr	r0, [r3, #8]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800091a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800091c:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 8000920:	429a      	cmp	r2, r3
 8000922:	f47f adf9 	bne.w	8000518 <HAL_RCC_OscConfig+0x8>
 8000926:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8000928:	f400 1370 	and.w	r3, r0, #3932160	; 0x3c0000
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800092c:	4293      	cmp	r3, r2
 800092e:	f47f adf3 	bne.w	8000518 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8000932:	6b23      	ldr	r3, [r4, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8000934:	f400 0040 	and.w	r0, r0, #12582912	; 0xc00000
    return HAL_ERROR;
 8000938:	1ac0      	subs	r0, r0, r3
 800093a:	bf18      	it	ne
 800093c:	2001      	movne	r0, #1
 800093e:	e665      	b.n	800060c <HAL_RCC_OscConfig+0xfc>
 8000940:	40023800 	.word	0x40023800
 8000944:	40007000 	.word	0x40007000
 8000948:	42470060 	.word	0x42470060

0800094c <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 800094c:	4a12      	ldr	r2, [pc, #72]	; (8000998 <HAL_RCC_GetSysClockFreq+0x4c>)
 800094e:	6893      	ldr	r3, [r2, #8]
  switch (tmpreg & RCC_CFGR_SWS)
 8000950:	f003 010c 	and.w	r1, r3, #12
 8000954:	2908      	cmp	r1, #8
 8000956:	d005      	beq.n	8000964 <HAL_RCC_GetSysClockFreq+0x18>
 8000958:	290c      	cmp	r1, #12
 800095a:	d005      	beq.n	8000968 <HAL_RCC_GetSysClockFreq+0x1c>
 800095c:	2904      	cmp	r1, #4
 800095e:	d113      	bne.n	8000988 <HAL_RCC_GetSysClockFreq+0x3c>
      sysclockfreq = HSI_VALUE;
 8000960:	480e      	ldr	r0, [pc, #56]	; (800099c <HAL_RCC_GetSysClockFreq+0x50>)
}
 8000962:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8000964:	480e      	ldr	r0, [pc, #56]	; (80009a0 <HAL_RCC_GetSysClockFreq+0x54>)
 8000966:	4770      	bx	lr
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8000968:	480e      	ldr	r0, [pc, #56]	; (80009a4 <HAL_RCC_GetSysClockFreq+0x58>)
 800096a:	f3c3 4183 	ubfx	r1, r3, #18, #4
 800096e:	5c41      	ldrb	r1, [r0, r1]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8000970:	f3c3 5081 	ubfx	r0, r3, #22, #2
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000974:	6893      	ldr	r3, [r2, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8000976:	3001      	adds	r0, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000978:	03db      	lsls	r3, r3, #15
        pllvco = (HSE_VALUE * pllm) / plld;
 800097a:	bf4c      	ite	mi
 800097c:	4b08      	ldrmi	r3, [pc, #32]	; (80009a0 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (HSI_VALUE * pllm) / plld;
 800097e:	4b07      	ldrpl	r3, [pc, #28]	; (800099c <HAL_RCC_GetSysClockFreq+0x50>)
 8000980:	434b      	muls	r3, r1
 8000982:	fbb3 f0f0 	udiv	r0, r3, r0
 8000986:	4770      	bx	lr
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8000988:	6850      	ldr	r0, [r2, #4]
 800098a:	f3c0 3042 	ubfx	r0, r0, #13, #3
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800098e:	1c43      	adds	r3, r0, #1
 8000990:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000994:	4098      	lsls	r0, r3
 8000996:	4770      	bx	lr
 8000998:	40023800 	.word	0x40023800
 800099c:	00f42400 	.word	0x00f42400
 80009a0:	016e3600 	.word	0x016e3600
 80009a4:	08001408 	.word	0x08001408

080009a8 <HAL_RCC_ClockConfig>:
{
 80009a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80009ac:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80009ae:	4604      	mov	r4, r0
 80009b0:	b910      	cbnz	r0, 80009b8 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80009b2:	2001      	movs	r0, #1
 80009b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80009b8:	4b57      	ldr	r3, [pc, #348]	; (8000b18 <HAL_RCC_ClockConfig+0x170>)
 80009ba:	681a      	ldr	r2, [r3, #0]
 80009bc:	f002 0201 	and.w	r2, r2, #1
 80009c0:	428a      	cmp	r2, r1
 80009c2:	d32a      	bcc.n	8000a1a <HAL_RCC_ClockConfig+0x72>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80009c4:	6822      	ldr	r2, [r4, #0]
 80009c6:	0796      	lsls	r6, r2, #30
 80009c8:	d438      	bmi.n	8000a3c <HAL_RCC_ClockConfig+0x94>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80009ca:	07d0      	lsls	r0, r2, #31
 80009cc:	d43e      	bmi.n	8000a4c <HAL_RCC_ClockConfig+0xa4>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80009ce:	4b52      	ldr	r3, [pc, #328]	; (8000b18 <HAL_RCC_ClockConfig+0x170>)
 80009d0:	681a      	ldr	r2, [r3, #0]
 80009d2:	f002 0201 	and.w	r2, r2, #1
 80009d6:	4295      	cmp	r5, r2
 80009d8:	f0c0 808d 	bcc.w	8000af6 <HAL_RCC_ClockConfig+0x14e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80009dc:	6822      	ldr	r2, [r4, #0]
 80009de:	0751      	lsls	r1, r2, #29
 80009e0:	f100 8092 	bmi.w	8000b08 <HAL_RCC_ClockConfig+0x160>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80009e4:	0713      	lsls	r3, r2, #28
 80009e6:	d507      	bpl.n	80009f8 <HAL_RCC_ClockConfig+0x50>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80009e8:	4a4c      	ldr	r2, [pc, #304]	; (8000b1c <HAL_RCC_ClockConfig+0x174>)
 80009ea:	6921      	ldr	r1, [r4, #16]
 80009ec:	6893      	ldr	r3, [r2, #8]
 80009ee:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80009f2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80009f6:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80009f8:	f7ff ffa8 	bl	800094c <HAL_RCC_GetSysClockFreq>
}
 80009fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000a00:	4b46      	ldr	r3, [pc, #280]	; (8000b1c <HAL_RCC_ClockConfig+0x174>)
 8000a02:	4a47      	ldr	r2, [pc, #284]	; (8000b20 <HAL_RCC_ClockConfig+0x178>)
 8000a04:	689b      	ldr	r3, [r3, #8]
 8000a06:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000a0a:	5cd3      	ldrb	r3, [r2, r3]
 8000a0c:	40d8      	lsrs	r0, r3
 8000a0e:	4b45      	ldr	r3, [pc, #276]	; (8000b24 <HAL_RCC_ClockConfig+0x17c>)
 8000a10:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8000a12:	4b45      	ldr	r3, [pc, #276]	; (8000b28 <HAL_RCC_ClockConfig+0x180>)
 8000a14:	6818      	ldr	r0, [r3, #0]
 8000a16:	f7ff bbb1 	b.w	800017c <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000a1a:	2901      	cmp	r1, #1
 8000a1c:	bf02      	ittt	eq
 8000a1e:	681a      	ldreq	r2, [r3, #0]
 8000a20:	f042 0204 	orreq.w	r2, r2, #4
 8000a24:	601a      	streq	r2, [r3, #0]
 8000a26:	681a      	ldr	r2, [r3, #0]
 8000a28:	f022 0201 	bic.w	r2, r2, #1
 8000a2c:	430a      	orrs	r2, r1
 8000a2e:	601a      	str	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	f003 0301 	and.w	r3, r3, #1
 8000a36:	4299      	cmp	r1, r3
 8000a38:	d1bb      	bne.n	80009b2 <HAL_RCC_ClockConfig+0xa>
 8000a3a:	e7c3      	b.n	80009c4 <HAL_RCC_ClockConfig+0x1c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000a3c:	4937      	ldr	r1, [pc, #220]	; (8000b1c <HAL_RCC_ClockConfig+0x174>)
 8000a3e:	68a0      	ldr	r0, [r4, #8]
 8000a40:	688b      	ldr	r3, [r1, #8]
 8000a42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000a46:	4303      	orrs	r3, r0
 8000a48:	608b      	str	r3, [r1, #8]
 8000a4a:	e7be      	b.n	80009ca <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000a4c:	6861      	ldr	r1, [r4, #4]
 8000a4e:	4b33      	ldr	r3, [pc, #204]	; (8000b1c <HAL_RCC_ClockConfig+0x174>)
 8000a50:	2902      	cmp	r1, #2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000a52:	681a      	ldr	r2, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000a54:	d11d      	bne.n	8000a92 <HAL_RCC_ClockConfig+0xea>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000a56:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000a5a:	d0aa      	beq.n	80009b2 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000a5c:	689a      	ldr	r2, [r3, #8]
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000a5e:	4f2f      	ldr	r7, [pc, #188]	; (8000b1c <HAL_RCC_ClockConfig+0x174>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000a60:	f022 0203 	bic.w	r2, r2, #3
 8000a64:	430a      	orrs	r2, r1
 8000a66:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8000a68:	f7ff fbca 	bl	8000200 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000a6c:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8000a6e:	4606      	mov	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000a70:	2b02      	cmp	r3, #2
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a72:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000a76:	d119      	bne.n	8000aac <HAL_RCC_ClockConfig+0x104>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000a78:	68bb      	ldr	r3, [r7, #8]
 8000a7a:	f003 030c 	and.w	r3, r3, #12
 8000a7e:	2b08      	cmp	r3, #8
 8000a80:	d0a5      	beq.n	80009ce <HAL_RCC_ClockConfig+0x26>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a82:	f7ff fbbd 	bl	8000200 <HAL_GetTick>
 8000a86:	1b80      	subs	r0, r0, r6
 8000a88:	4540      	cmp	r0, r8
 8000a8a:	d9f5      	bls.n	8000a78 <HAL_RCC_ClockConfig+0xd0>
          return HAL_TIMEOUT;
 8000a8c:	2003      	movs	r0, #3
 8000a8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000a92:	2903      	cmp	r1, #3
 8000a94:	d102      	bne.n	8000a9c <HAL_RCC_ClockConfig+0xf4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8000a96:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8000a9a:	e7de      	b.n	8000a5a <HAL_RCC_ClockConfig+0xb2>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8000a9c:	2901      	cmp	r1, #1
 8000a9e:	d102      	bne.n	8000aa6 <HAL_RCC_ClockConfig+0xfe>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000aa0:	f012 0f02 	tst.w	r2, #2
 8000aa4:	e7d9      	b.n	8000a5a <HAL_RCC_ClockConfig+0xb2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000aa6:	f412 7f00 	tst.w	r2, #512	; 0x200
 8000aaa:	e7d6      	b.n	8000a5a <HAL_RCC_ClockConfig+0xb2>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000aac:	2b03      	cmp	r3, #3
 8000aae:	d10a      	bne.n	8000ac6 <HAL_RCC_ClockConfig+0x11e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000ab0:	68bb      	ldr	r3, [r7, #8]
 8000ab2:	f003 030c 	and.w	r3, r3, #12
 8000ab6:	2b0c      	cmp	r3, #12
 8000ab8:	d089      	beq.n	80009ce <HAL_RCC_ClockConfig+0x26>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000aba:	f7ff fba1 	bl	8000200 <HAL_GetTick>
 8000abe:	1b80      	subs	r0, r0, r6
 8000ac0:	4540      	cmp	r0, r8
 8000ac2:	d9f5      	bls.n	8000ab0 <HAL_RCC_ClockConfig+0x108>
 8000ac4:	e7e2      	b.n	8000a8c <HAL_RCC_ClockConfig+0xe4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8000ac6:	2b01      	cmp	r3, #1
 8000ac8:	d110      	bne.n	8000aec <HAL_RCC_ClockConfig+0x144>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000aca:	68bb      	ldr	r3, [r7, #8]
 8000acc:	f003 030c 	and.w	r3, r3, #12
 8000ad0:	2b04      	cmp	r3, #4
 8000ad2:	f43f af7c 	beq.w	80009ce <HAL_RCC_ClockConfig+0x26>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ad6:	f7ff fb93 	bl	8000200 <HAL_GetTick>
 8000ada:	1b80      	subs	r0, r0, r6
 8000adc:	4540      	cmp	r0, r8
 8000ade:	d9f4      	bls.n	8000aca <HAL_RCC_ClockConfig+0x122>
 8000ae0:	e7d4      	b.n	8000a8c <HAL_RCC_ClockConfig+0xe4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ae2:	f7ff fb8d 	bl	8000200 <HAL_GetTick>
 8000ae6:	1b80      	subs	r0, r0, r6
 8000ae8:	4540      	cmp	r0, r8
 8000aea:	d8cf      	bhi.n	8000a8c <HAL_RCC_ClockConfig+0xe4>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	f013 0f0c 	tst.w	r3, #12
 8000af2:	d1f6      	bne.n	8000ae2 <HAL_RCC_ClockConfig+0x13a>
 8000af4:	e76b      	b.n	80009ce <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000af6:	681a      	ldr	r2, [r3, #0]
 8000af8:	f022 0201 	bic.w	r2, r2, #1
 8000afc:	601a      	str	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	07da      	lsls	r2, r3, #31
 8000b02:	f53f af56 	bmi.w	80009b2 <HAL_RCC_ClockConfig+0xa>
 8000b06:	e769      	b.n	80009dc <HAL_RCC_ClockConfig+0x34>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000b08:	4904      	ldr	r1, [pc, #16]	; (8000b1c <HAL_RCC_ClockConfig+0x174>)
 8000b0a:	68e0      	ldr	r0, [r4, #12]
 8000b0c:	688b      	ldr	r3, [r1, #8]
 8000b0e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000b12:	4303      	orrs	r3, r0
 8000b14:	608b      	str	r3, [r1, #8]
 8000b16:	e765      	b.n	80009e4 <HAL_RCC_ClockConfig+0x3c>
 8000b18:	40023c00 	.word	0x40023c00
 8000b1c:	40023800 	.word	0x40023800
 8000b20:	080013f8 	.word	0x080013f8
 8000b24:	20000008 	.word	0x20000008
 8000b28:	20000004 	.word	0x20000004

08000b2c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000b2c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  tmpcr1 = TIMx->CR1;
 8000b30:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000b32:	d006      	beq.n	8000b42 <TIM_Base_SetConfig+0x16>
 8000b34:	4a18      	ldr	r2, [pc, #96]	; (8000b98 <TIM_Base_SetConfig+0x6c>)
 8000b36:	4290      	cmp	r0, r2
 8000b38:	d003      	beq.n	8000b42 <TIM_Base_SetConfig+0x16>
 8000b3a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000b3e:	4290      	cmp	r0, r2
 8000b40:	d10e      	bne.n	8000b60 <TIM_Base_SetConfig+0x34>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8000b42:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000b44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000b48:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
    tmpcr1 |= Structure->CounterMode;
 8000b4c:	ea43 0302 	orr.w	r3, r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000b50:	d011      	beq.n	8000b76 <TIM_Base_SetConfig+0x4a>
 8000b52:	4a11      	ldr	r2, [pc, #68]	; (8000b98 <TIM_Base_SetConfig+0x6c>)
 8000b54:	4290      	cmp	r0, r2
 8000b56:	d00e      	beq.n	8000b76 <TIM_Base_SetConfig+0x4a>
 8000b58:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000b5c:	4290      	cmp	r0, r2
 8000b5e:	d00a      	beq.n	8000b76 <TIM_Base_SetConfig+0x4a>
 8000b60:	4a0e      	ldr	r2, [pc, #56]	; (8000b9c <TIM_Base_SetConfig+0x70>)
 8000b62:	4290      	cmp	r0, r2
 8000b64:	d007      	beq.n	8000b76 <TIM_Base_SetConfig+0x4a>
 8000b66:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000b6a:	4290      	cmp	r0, r2
 8000b6c:	d003      	beq.n	8000b76 <TIM_Base_SetConfig+0x4a>
 8000b6e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000b72:	4290      	cmp	r0, r2
 8000b74:	d103      	bne.n	8000b7e <TIM_Base_SetConfig+0x52>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000b76:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8000b78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000b7c:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8000b7e:	690a      	ldr	r2, [r1, #16]
 8000b80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000b84:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8000b86:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000b88:	688b      	ldr	r3, [r1, #8]
 8000b8a:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8000b8c:	680b      	ldr	r3, [r1, #0]
 8000b8e:	6283      	str	r3, [r0, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8000b90:	2301      	movs	r3, #1
 8000b92:	6143      	str	r3, [r0, #20]
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	40000400 	.word	0x40000400
 8000b9c:	40010800 	.word	0x40010800

08000ba0 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000ba0:	6a03      	ldr	r3, [r0, #32]
{
 8000ba2:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000ba4:	f023 0301 	bic.w	r3, r3, #1
 8000ba8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000baa:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000bac:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8000bae:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8000bb0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8000bb2:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8000bb6:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8000bb8:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8000bba:	f023 0302 	bic.w	r3, r3, #2

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000bbe:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8000bc0:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8000bc2:	684a      	ldr	r2, [r1, #4]
  tmpccer |= OC_Config->OCPolarity;
 8000bc4:	432b      	orrs	r3, r5
  TIMx->CCR1 = OC_Config->Pulse;
 8000bc6:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000bc8:	6203      	str	r3, [r0, #32]
 8000bca:	bd30      	pop	{r4, r5, pc}

08000bcc <TIM_OC2_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000bcc:	6a03      	ldr	r3, [r0, #32]
{
 8000bce:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000bd0:	f023 0310 	bic.w	r3, r3, #16
 8000bd4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000bd6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000bd8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8000bda:	6982      	ldr	r2, [r0, #24]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000bdc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8000bde:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000be2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8000be6:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8000be8:	f023 0320 	bic.w	r3, r3, #32

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000bec:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8000bee:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8000bf0:	684a      	ldr	r2, [r1, #4]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8000bf2:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCR2 = OC_Config->Pulse;
 8000bf6:	6382      	str	r2, [r0, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000bf8:	6203      	str	r3, [r0, #32]
 8000bfa:	bd30      	pop	{r4, r5, pc}

08000bfc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8000bfc:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8000bfe:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8000c00:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8000c02:	f001 011f 	and.w	r1, r1, #31
 8000c06:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8000c08:	ea23 0304 	bic.w	r3, r3, r4
 8000c0c:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8000c0e:	6a03      	ldr	r3, [r0, #32]
 8000c10:	408a      	lsls	r2, r1
 8000c12:	431a      	orrs	r2, r3
 8000c14:	6202      	str	r2, [r0, #32]
 8000c16:	bd10      	pop	{r4, pc}

08000c18 <HAL_TIM_Base_Init>:
{
 8000c18:	b510      	push	{r4, lr}
  if (htim == NULL)
 8000c1a:	4604      	mov	r4, r0
 8000c1c:	b1a0      	cbz	r0, 8000c48 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8000c1e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000c22:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000c26:	b91b      	cbnz	r3, 8000c30 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8000c28:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 8000c2c:	f000 faf0 	bl	8001210 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8000c30:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000c32:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8000c34:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000c38:	1d21      	adds	r1, r4, #4
 8000c3a:	f7ff ff77 	bl	8000b2c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8000c3e:	2301      	movs	r3, #1
  return HAL_OK;
 8000c40:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8000c42:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8000c46:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000c48:	2001      	movs	r0, #1
}
 8000c4a:	bd10      	pop	{r4, pc}

08000c4c <HAL_TIM_PWM_MspInit>:
 8000c4c:	4770      	bx	lr

08000c4e <HAL_TIM_PWM_Init>:
{
 8000c4e:	b510      	push	{r4, lr}
  if (htim == NULL)
 8000c50:	4604      	mov	r4, r0
 8000c52:	b1a0      	cbz	r0, 8000c7e <HAL_TIM_PWM_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8000c54:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000c58:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000c5c:	b91b      	cbnz	r3, 8000c66 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8000c5e:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_PWM_MspInit(htim);
 8000c62:	f7ff fff3 	bl	8000c4c <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8000c66:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000c68:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8000c6a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000c6e:	1d21      	adds	r1, r4, #4
 8000c70:	f7ff ff5c 	bl	8000b2c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8000c74:	2301      	movs	r3, #1
  return HAL_OK;
 8000c76:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8000c78:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8000c7c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000c7e:	2001      	movs	r0, #1
}
 8000c80:	bd10      	pop	{r4, pc}

08000c82 <HAL_TIM_IC_Start>:
{
 8000c82:	b510      	push	{r4, lr}
 8000c84:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8000c86:	2201      	movs	r2, #1
 8000c88:	6800      	ldr	r0, [r0, #0]
 8000c8a:	f7ff ffb7 	bl	8000bfc <TIM_CCxChannelCmd>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8000c8e:	6823      	ldr	r3, [r4, #0]
}
 8000c90:	2000      	movs	r0, #0
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8000c92:	689a      	ldr	r2, [r3, #8]
 8000c94:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8000c98:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 8000c9a:	bf1e      	ittt	ne
 8000c9c:	681a      	ldrne	r2, [r3, #0]
 8000c9e:	f042 0201 	orrne.w	r2, r2, #1
 8000ca2:	601a      	strne	r2, [r3, #0]
}
 8000ca4:	bd10      	pop	{r4, pc}

08000ca6 <HAL_TIM_PWM_Start>:
 8000ca6:	f7ff bfec 	b.w	8000c82 <HAL_TIM_IC_Start>

08000caa <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 8000caa:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
{
 8000cae:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8000cb0:	2b01      	cmp	r3, #1
{
 8000cb2:	4605      	mov	r5, r0
 8000cb4:	460c      	mov	r4, r1
 8000cb6:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8000cba:	d025      	beq.n	8000d08 <HAL_TIM_PWM_ConfigChannel+0x5e>
 8000cbc:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8000cbe:	f885 0039 	strb.w	r0, [r5, #57]	; 0x39
  __HAL_LOCK(htim);
 8000cc2:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
  switch (Channel)
 8000cc6:	2a0c      	cmp	r2, #12
 8000cc8:	d818      	bhi.n	8000cfc <HAL_TIM_PWM_ConfigChannel+0x52>
 8000cca:	e8df f002 	tbb	[pc, r2]
 8000cce:	1707      	.short	0x1707
 8000cd0:	171e1717 	.word	0x171e1717
 8000cd4:	172f1717 	.word	0x172f1717
 8000cd8:	1717      	.short	0x1717
 8000cda:	52          	.byte	0x52
 8000cdb:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8000cdc:	6828      	ldr	r0, [r5, #0]
 8000cde:	f7ff ff5f 	bl	8000ba0 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8000ce2:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8000ce4:	68c9      	ldr	r1, [r1, #12]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8000ce6:	699a      	ldr	r2, [r3, #24]
 8000ce8:	f042 0208 	orr.w	r2, r2, #8
 8000cec:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8000cee:	699a      	ldr	r2, [r3, #24]
 8000cf0:	f022 0204 	bic.w	r2, r2, #4
 8000cf4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8000cf6:	699a      	ldr	r2, [r3, #24]
 8000cf8:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8000cfa:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8000cfc:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8000cfe:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8000d00:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
  __HAL_UNLOCK(htim);
 8000d04:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
}
 8000d08:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8000d0a:	6828      	ldr	r0, [r5, #0]
 8000d0c:	f7ff ff5e 	bl	8000bcc <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8000d10:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8000d12:	68c9      	ldr	r1, [r1, #12]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8000d14:	699a      	ldr	r2, [r3, #24]
 8000d16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000d1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8000d1c:	699a      	ldr	r2, [r3, #24]
 8000d1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000d22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8000d24:	699a      	ldr	r2, [r3, #24]
 8000d26:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000d2a:	e7e6      	b.n	8000cfa <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8000d2c:	682b      	ldr	r3, [r5, #0]
  tmpccmrx |= OC_Config->OCMode;
 8000d2e:	6826      	ldr	r6, [r4, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8000d30:	6a1a      	ldr	r2, [r3, #32]
 8000d32:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000d36:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8000d38:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8000d3a:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8000d3c:	69d9      	ldr	r1, [r3, #28]
  tmpccer &= ~TIM_CCER_CC3P;
 8000d3e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8000d42:	f021 0173 	bic.w	r1, r1, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8000d46:	4331      	orrs	r1, r6
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8000d48:	68a6      	ldr	r6, [r4, #8]
  TIMx->CR2 = tmpcr2;
 8000d4a:	6058      	str	r0, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8000d4c:	61d9      	str	r1, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8000d4e:	6861      	ldr	r1, [r4, #4]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8000d50:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  TIMx->CCR3 = OC_Config->Pulse;
 8000d54:	63d9      	str	r1, [r3, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8000d56:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8000d58:	69da      	ldr	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8000d5a:	68e1      	ldr	r1, [r4, #12]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8000d5c:	f042 0208 	orr.w	r2, r2, #8
 8000d60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8000d62:	69da      	ldr	r2, [r3, #28]
 8000d64:	f022 0204 	bic.w	r2, r2, #4
 8000d68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8000d6a:	69da      	ldr	r2, [r3, #28]
 8000d6c:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8000d6e:	61da      	str	r2, [r3, #28]
      break;
 8000d70:	e7c4      	b.n	8000cfc <HAL_TIM_PWM_ConfigChannel+0x52>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8000d72:	682b      	ldr	r3, [r5, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000d74:	6826      	ldr	r6, [r4, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8000d76:	6a1a      	ldr	r2, [r3, #32]
 8000d78:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000d7c:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8000d7e:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8000d80:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8000d82:	69d9      	ldr	r1, [r3, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 8000d84:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8000d88:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000d8c:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8000d90:	68a6      	ldr	r6, [r4, #8]
  TIMx->CR2 = tmpcr2;
 8000d92:	6058      	str	r0, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8000d94:	61d9      	str	r1, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8000d96:	6861      	ldr	r1, [r4, #4]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8000d98:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCR4 = OC_Config->Pulse;
 8000d9c:	6419      	str	r1, [r3, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8000d9e:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8000da0:	69da      	ldr	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8000da2:	68e1      	ldr	r1, [r4, #12]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8000da4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000da8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8000daa:	69da      	ldr	r2, [r3, #28]
 8000dac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000db0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8000db2:	69da      	ldr	r2, [r3, #28]
 8000db4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000db8:	e7d9      	b.n	8000d6e <HAL_TIM_PWM_ConfigChannel+0xc4>

08000dba <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8000dba:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
{
 8000dbe:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8000dc0:	2b01      	cmp	r3, #1
 8000dc2:	f04f 0302 	mov.w	r3, #2
 8000dc6:	d019      	beq.n	8000dfc <HAL_TIM_ConfigClockSource+0x42>
 8000dc8:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8000dca:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  tmpsmcr = htim->Instance->SMCR;
 8000dce:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 8000dd0:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  tmpsmcr = htim->Instance->SMCR;
 8000dd4:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000dd6:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8000dda:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8000dde:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8000de0:	680a      	ldr	r2, [r1, #0]
 8000de2:	2a40      	cmp	r2, #64	; 0x40
 8000de4:	d06f      	beq.n	8000ec6 <HAL_TIM_ConfigClockSource+0x10c>
 8000de6:	d816      	bhi.n	8000e16 <HAL_TIM_ConfigClockSource+0x5c>
 8000de8:	2a10      	cmp	r2, #16
 8000dea:	d00d      	beq.n	8000e08 <HAL_TIM_ConfigClockSource+0x4e>
 8000dec:	d808      	bhi.n	8000e00 <HAL_TIM_ConfigClockSource+0x46>
 8000dee:	b15a      	cbz	r2, 8000e08 <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_READY;
 8000df0:	2301      	movs	r3, #1
 8000df2:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UNLOCK(htim);
 8000df6:	2300      	movs	r3, #0
 8000df8:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 8000dfc:	4618      	mov	r0, r3
}
 8000dfe:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8000e00:	2a20      	cmp	r2, #32
 8000e02:	d001      	beq.n	8000e08 <HAL_TIM_ConfigClockSource+0x4e>
 8000e04:	2a30      	cmp	r2, #48	; 0x30
 8000e06:	d1f3      	bne.n	8000df0 <HAL_TIM_ConfigClockSource+0x36>
  tmpsmcr = TIMx->SMCR;
 8000e08:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8000e0a:	f042 0207 	orr.w	r2, r2, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8000e0e:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8000e12:	430a      	orrs	r2, r1
 8000e14:	e03d      	b.n	8000e92 <HAL_TIM_ConfigClockSource+0xd8>
  switch (sClockSourceConfig->ClockSource)
 8000e16:	2a60      	cmp	r2, #96	; 0x60
 8000e18:	d03d      	beq.n	8000e96 <HAL_TIM_ConfigClockSource+0xdc>
 8000e1a:	d818      	bhi.n	8000e4e <HAL_TIM_ConfigClockSource+0x94>
 8000e1c:	2a50      	cmp	r2, #80	; 0x50
 8000e1e:	d1e7      	bne.n	8000df0 <HAL_TIM_ConfigClockSource+0x36>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8000e20:	684c      	ldr	r4, [r1, #4]
 8000e22:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8000e24:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000e26:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000e28:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000e2c:	f025 0501 	bic.w	r5, r5, #1
 8000e30:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000e32:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8000e34:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000e36:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8000e3a:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8000e3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8000e40:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8000e42:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8000e44:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8000e48:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 8000e4c:	e021      	b.n	8000e92 <HAL_TIM_ConfigClockSource+0xd8>
  switch (sClockSourceConfig->ClockSource)
 8000e4e:	2a70      	cmp	r2, #112	; 0x70
 8000e50:	d011      	beq.n	8000e76 <HAL_TIM_ConfigClockSource+0xbc>
 8000e52:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8000e56:	d1cb      	bne.n	8000df0 <HAL_TIM_ConfigClockSource+0x36>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000e58:	688a      	ldr	r2, [r1, #8]
 8000e5a:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8000e5c:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000e5e:	68c9      	ldr	r1, [r1, #12]
 8000e60:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000e62:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000e66:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000e6a:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8000e6c:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8000e6e:	689a      	ldr	r2, [r3, #8]
 8000e70:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000e74:	e00d      	b.n	8000e92 <HAL_TIM_ConfigClockSource+0xd8>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000e76:	688a      	ldr	r2, [r1, #8]
 8000e78:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8000e7a:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000e7c:	68c9      	ldr	r1, [r1, #12]
 8000e7e:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000e80:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000e84:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000e88:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8000e8a:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8000e8c:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8000e8e:	f042 0277 	orr.w	r2, r2, #119	; 0x77
  TIMx->SMCR = tmpsmcr;
 8000e92:	609a      	str	r2, [r3, #8]
 8000e94:	e7ac      	b.n	8000df0 <HAL_TIM_ConfigClockSource+0x36>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000e96:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8000e98:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000e9a:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8000e9e:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000ea0:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000ea2:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8000ea4:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8000ea6:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8000eaa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8000eae:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8000eb2:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8000eb6:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8000eb8:	621a      	str	r2, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8000eba:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8000ebc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8000ec0:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 8000ec4:	e7e5      	b.n	8000e92 <HAL_TIM_ConfigClockSource+0xd8>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8000ec6:	684c      	ldr	r4, [r1, #4]
 8000ec8:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8000eca:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000ecc:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000ece:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000ed2:	f025 0501 	bic.w	r5, r5, #1
 8000ed6:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000ed8:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8000eda:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000edc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8000ee0:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8000ee4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8000ee6:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8000ee8:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8000eea:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8000eee:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8000ef2:	e7ce      	b.n	8000e92 <HAL_TIM_ConfigClockSource+0xd8>

08000ef4 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8000ef4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
{
 8000ef8:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	f04f 0302 	mov.w	r3, #2
 8000f00:	d014      	beq.n	8000f2c <HAL_TIMEx_MasterConfigSynchronization+0x38>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8000f02:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8000f04:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  tmpcr2 = htim->Instance->CR2;
 8000f08:	6862      	ldr	r2, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8000f0a:	68a3      	ldr	r3, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8000f0c:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8000f0e:	6849      	ldr	r1, [r1, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 8000f10:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_MSM;
 8000f14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8000f18:	430b      	orrs	r3, r1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8000f1a:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8000f1c:	6062      	str	r2, [r4, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8000f1e:	60a3      	str	r3, [r4, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8000f20:	2301      	movs	r3, #1
 8000f22:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8000f26:	2300      	movs	r3, #0
 8000f28:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 8000f2c:	4618      	mov	r0, r3

  return HAL_OK;
}
 8000f2e:	bd30      	pop	{r4, r5, pc}

08000f30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f30:	b530      	push	{r4, r5, lr}
 8000f32:	b093      	sub	sp, #76	; 0x4c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f34:	2234      	movs	r2, #52	; 0x34
 8000f36:	2100      	movs	r1, #0
 8000f38:	a805      	add	r0, sp, #20
 8000f3a:	f000 fa49 	bl	80013d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f3e:	2100      	movs	r1, #0
 8000f40:	2214      	movs	r2, #20
 8000f42:	4668      	mov	r0, sp
 8000f44:	f000 fa44 	bl	80013d0 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f48:	4a0e      	ldr	r2, [pc, #56]	; (8000f84 <SystemClock_Config+0x54>)
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f4a:	2400      	movs	r4, #0
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f4c:	6813      	ldr	r3, [r2, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f4e:	2501      	movs	r5, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f50:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000f54:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f58:	6013      	str	r3, [r2, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f5e:	2310      	movs	r3, #16
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f60:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f62:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f64:	9508      	str	r5, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f66:	940e      	str	r4, [sp, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f68:	f7ff fad2 	bl	8000510 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f6c:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f6e:	4621      	mov	r1, r4
 8000f70:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f72:	e88d 0028 	stmia.w	sp, {r3, r5}
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f76:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f78:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f7a:	9404      	str	r4, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f7c:	f7ff fd14 	bl	80009a8 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8000f80:	b013      	add	sp, #76	; 0x4c
 8000f82:	bd30      	pop	{r4, r5, pc}
 8000f84:	40007000 	.word	0x40007000

08000f88 <user_pwm_setvalue>:

}

/* USER CODE BEGIN 4 */
void user_pwm_setvalue(uint16_t value)
{
 8000f88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    TIM_OC_InitTypeDef sConfigOC;

    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f8a:	2360      	movs	r3, #96	; 0x60
 8000f8c:	9300      	str	r3, [sp, #0]
    sConfigOC.Pulse = value;
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f8e:	2300      	movs	r3, #0
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
    HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2);
 8000f90:	4c07      	ldr	r4, [pc, #28]	; (8000fb0 <user_pwm_setvalue+0x28>)
    sConfigOC.Pulse = value;
 8000f92:	9001      	str	r0, [sp, #4]
    HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2);
 8000f94:	2204      	movs	r2, #4
 8000f96:	4669      	mov	r1, sp
 8000f98:	4620      	mov	r0, r4
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f9a:	9302      	str	r3, [sp, #8]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f9c:	9303      	str	r3, [sp, #12]
    HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2);
 8000f9e:	f7ff fe84 	bl	8000caa <HAL_TIM_PWM_ConfigChannel>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000fa2:	2104      	movs	r1, #4
 8000fa4:	4620      	mov	r0, r4
 8000fa6:	f7ff fe7e 	bl	8000ca6 <HAL_TIM_PWM_Start>
}
 8000faa:	b004      	add	sp, #16
 8000fac:	bd10      	pop	{r4, pc}
 8000fae:	bf00      	nop
 8000fb0:	2000002c 	.word	0x2000002c

08000fb4 <main>:
{
 8000fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fb6:	b08f      	sub	sp, #60	; 0x3c
  HAL_Init();
 8000fb8:	f7ff f906 	bl	80001c8 <HAL_Init>
  SystemClock_Config();
 8000fbc:	f7ff ffb8 	bl	8000f30 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc0:	2214      	movs	r2, #20
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	a809      	add	r0, sp, #36	; 0x24
 8000fc6:	f000 fa03 	bl	80013d0 <memset>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fca:	4b78      	ldr	r3, [pc, #480]	; (80011ac <main+0x1f8>)
  HAL_GPIO_WritePin(MOTOR_DIR_GPIO_Port, MOTOR_DIR_Pin, GPIO_PIN_RESET);
 8000fcc:	2102      	movs	r1, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fce:	69da      	ldr	r2, [r3, #28]
  HAL_GPIO_WritePin(MOTOR_DIR_GPIO_Port, MOTOR_DIR_Pin, GPIO_PIN_RESET);
 8000fd0:	4877      	ldr	r0, [pc, #476]	; (80011b0 <main+0x1fc>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd2:	f042 0201 	orr.w	r2, r2, #1
 8000fd6:	61da      	str	r2, [r3, #28]
 8000fd8:	69da      	ldr	r2, [r3, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fda:	2400      	movs	r4, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fdc:	f002 0201 	and.w	r2, r2, #1
 8000fe0:	9200      	str	r2, [sp, #0]
 8000fe2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe4:	69da      	ldr	r2, [r3, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe6:	2501      	movs	r5, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe8:	f042 0202 	orr.w	r2, r2, #2
 8000fec:	61da      	str	r2, [r3, #28]
 8000fee:	69da      	ldr	r2, [r3, #28]
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ff0:	f44f 5780 	mov.w	r7, #4096	; 0x1000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff4:	f002 0202 	and.w	r2, r2, #2
 8000ff8:	9201      	str	r2, [sp, #4]
 8000ffa:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ffc:	69da      	ldr	r2, [r3, #28]
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ffe:	2660      	movs	r6, #96	; 0x60
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001000:	f042 0204 	orr.w	r2, r2, #4
 8001004:	61da      	str	r2, [r3, #28]
 8001006:	69db      	ldr	r3, [r3, #28]
  HAL_GPIO_WritePin(MOTOR_DIR_GPIO_Port, MOTOR_DIR_Pin, GPIO_PIN_RESET);
 8001008:	2200      	movs	r2, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800100a:	f003 0304 	and.w	r3, r3, #4
 800100e:	9302      	str	r3, [sp, #8]
 8001010:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(MOTOR_DIR_GPIO_Port, MOTOR_DIR_Pin, GPIO_PIN_RESET);
 8001012:	f7ff fa37 	bl	8000484 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TOOL_CHANGE_READY_GPIO_Port, TOOL_CHANGE_READY_Pin, GPIO_PIN_RESET);
 8001016:	2200      	movs	r2, #0
 8001018:	f44f 7180 	mov.w	r1, #256	; 0x100
 800101c:	4865      	ldr	r0, [pc, #404]	; (80011b4 <main+0x200>)
 800101e:	f7ff fa31 	bl	8000484 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 8001022:	2200      	movs	r2, #0
 8001024:	2140      	movs	r1, #64	; 0x40
 8001026:	4864      	ldr	r0, [pc, #400]	; (80011b8 <main+0x204>)
 8001028:	f7ff fa2c 	bl	8000484 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = BUTTON_Pin|TOOL_SEL_1_Pin|TOOL_SEL_2_Pin|TOOL_SEL_3_Pin 
 800102c:	f64f 7301 	movw	r3, #65281	; 0xff01
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001030:	a909      	add	r1, sp, #36	; 0x24
 8001032:	485f      	ldr	r0, [pc, #380]	; (80011b0 <main+0x1fc>)
  GPIO_InitStruct.Pin = BUTTON_Pin|TOOL_SEL_1_Pin|TOOL_SEL_2_Pin|TOOL_SEL_3_Pin 
 8001034:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001036:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001038:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800103a:	f7ff f955 	bl	80002e8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = MOTOR_DIR_Pin;
 800103e:	2302      	movs	r3, #2
  HAL_GPIO_Init(MOTOR_DIR_GPIO_Port, &GPIO_InitStruct);
 8001040:	a909      	add	r1, sp, #36	; 0x24
 8001042:	485b      	ldr	r0, [pc, #364]	; (80011b0 <main+0x1fc>)
  GPIO_InitStruct.Pin = MOTOR_DIR_Pin;
 8001044:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001046:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001048:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104a:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(MOTOR_DIR_GPIO_Port, &GPIO_InitStruct);
 800104c:	f7ff f94c 	bl	80002e8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = MOTOR_CURENT_Pin;
 8001050:	2308      	movs	r3, #8
 8001052:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001054:	2303      	movs	r3, #3
  HAL_GPIO_Init(MOTOR_CURENT_GPIO_Port, &GPIO_InitStruct);
 8001056:	a909      	add	r1, sp, #36	; 0x24
 8001058:	4855      	ldr	r0, [pc, #340]	; (80011b0 <main+0x1fc>)
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800105a:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105c:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(MOTOR_CURENT_GPIO_Port, &GPIO_InitStruct);
 800105e:	f7ff f943 	bl	80002e8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = TURRET_P1_Pin|TURRET_P2_Pin|TURRET_P3_Pin|TURRET_P4_Pin;
 8001062:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001066:	a909      	add	r1, sp, #36	; 0x24
 8001068:	4853      	ldr	r0, [pc, #332]	; (80011b8 <main+0x204>)
  GPIO_InitStruct.Pin = TURRET_P1_Pin|TURRET_P2_Pin|TURRET_P3_Pin|TURRET_P4_Pin;
 800106a:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800106c:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106e:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001070:	f7ff f93a 	bl	80002e8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = TOOL_CHANGE_READY_Pin;
 8001074:	f44f 7380 	mov.w	r3, #256	; 0x100
  HAL_GPIO_Init(TOOL_CHANGE_READY_GPIO_Port, &GPIO_InitStruct);
 8001078:	a909      	add	r1, sp, #36	; 0x24
 800107a:	484e      	ldr	r0, [pc, #312]	; (80011b4 <main+0x200>)
  GPIO_InitStruct.Pin = TOOL_CHANGE_READY_Pin;
 800107c:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800107e:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001080:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001082:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(TOOL_CHANGE_READY_GPIO_Port, &GPIO_InitStruct);
 8001084:	f7ff f930 	bl	80002e8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = TOOL_CHANGE_Pin;
 8001088:	f44f 7300 	mov.w	r3, #512	; 0x200
  HAL_GPIO_Init(TOOL_CHANGE_GPIO_Port, &GPIO_InitStruct);
 800108c:	a909      	add	r1, sp, #36	; 0x24
 800108e:	4849      	ldr	r0, [pc, #292]	; (80011b4 <main+0x200>)
  GPIO_InitStruct.Pin = TOOL_CHANGE_Pin;
 8001090:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001092:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001094:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(TOOL_CHANGE_GPIO_Port, &GPIO_InitStruct);
 8001096:	f7ff f927 	bl	80002e8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED_BLUE_Pin;
 800109a:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 800109c:	a909      	add	r1, sp, #36	; 0x24
 800109e:	4846      	ldr	r0, [pc, #280]	; (80011b8 <main+0x204>)
  GPIO_InitStruct.Pin = LED_BLUE_Pin;
 80010a0:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a2:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a4:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a6:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 80010a8:	f7ff f91e 	bl	80002e8 <HAL_GPIO_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010ac:	2210      	movs	r2, #16
 80010ae:	4621      	mov	r1, r4
 80010b0:	a805      	add	r0, sp, #20
 80010b2:	f000 f98d 	bl	80013d0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010b6:	4621      	mov	r1, r4
 80010b8:	2210      	movs	r2, #16
 80010ba:	a809      	add	r0, sp, #36	; 0x24
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010bc:	9403      	str	r4, [sp, #12]
 80010be:	9404      	str	r4, [sp, #16]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010c0:	f000 f986 	bl	80013d0 <memset>
  htim9.Init.Prescaler = 40000;
 80010c4:	f649 4340 	movw	r3, #40000	; 0x9c40
  htim9.Instance = TIM9;
 80010c8:	4d3c      	ldr	r5, [pc, #240]	; (80011bc <main+0x208>)
  htim9.Init.Prescaler = 40000;
 80010ca:	4a3d      	ldr	r2, [pc, #244]	; (80011c0 <main+0x20c>)
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80010cc:	4628      	mov	r0, r5
  htim9.Init.Prescaler = 40000;
 80010ce:	e885 000c 	stmia.w	r5, {r2, r3}
  htim9.Init.Period = 500;
 80010d2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010d6:	60ac      	str	r4, [r5, #8]
  htim9.Init.Period = 500;
 80010d8:	60eb      	str	r3, [r5, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010da:	612c      	str	r4, [r5, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010dc:	616c      	str	r4, [r5, #20]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80010de:	f7ff fd9b 	bl	8000c18 <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80010e2:	a905      	add	r1, sp, #20
 80010e4:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010e6:	9705      	str	r7, [sp, #20]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80010e8:	f7ff fe67 	bl	8000dba <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 80010ec:	4628      	mov	r0, r5
 80010ee:	f7ff fdae 	bl	8000c4e <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim9, &sMasterConfig) != HAL_OK)
 80010f2:	a903      	add	r1, sp, #12
 80010f4:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010f6:	9403      	str	r4, [sp, #12]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010f8:	9404      	str	r4, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim9, &sMasterConfig) != HAL_OK)
 80010fa:	f7ff fefb 	bl	8000ef4 <HAL_TIMEx_MasterConfigSynchronization>
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010fe:	4622      	mov	r2, r4
 8001100:	a909      	add	r1, sp, #36	; 0x24
 8001102:	4628      	mov	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001104:	9609      	str	r6, [sp, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001106:	940a      	str	r4, [sp, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001108:	940b      	str	r4, [sp, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800110a:	940c      	str	r4, [sp, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800110c:	f7ff fdcd 	bl	8000caa <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim9);
 8001110:	4628      	mov	r0, r5
 8001112:	f000 f8bd 	bl	8001290 <HAL_TIM_MspPostInit>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001116:	2210      	movs	r2, #16
 8001118:	4621      	mov	r1, r4
 800111a:	a805      	add	r0, sp, #20
 800111c:	f000 f958 	bl	80013d0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001120:	2210      	movs	r2, #16
 8001122:	4621      	mov	r1, r4
 8001124:	a809      	add	r0, sp, #36	; 0x24
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001126:	9403      	str	r4, [sp, #12]
 8001128:	9404      	str	r4, [sp, #16]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800112a:	f000 f951 	bl	80013d0 <memset>
  htim4.Init.Prescaler = 160-1;
 800112e:	239f      	movs	r3, #159	; 0x9f
  htim4.Instance = TIM4;
 8001130:	4d24      	ldr	r5, [pc, #144]	; (80011c4 <main+0x210>)
  htim4.Init.Prescaler = 160-1;
 8001132:	4925      	ldr	r1, [pc, #148]	; (80011c8 <main+0x214>)
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001134:	4628      	mov	r0, r5
  htim4.Init.Prescaler = 160-1;
 8001136:	e885 000a 	stmia.w	r5, {r1, r3}
  htim4.Init.Period = 2000-1;
 800113a:	f240 73cf 	movw	r3, #1999	; 0x7cf
 800113e:	60eb      	str	r3, [r5, #12]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001140:	2380      	movs	r3, #128	; 0x80
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001142:	60ac      	str	r4, [r5, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001144:	616b      	str	r3, [r5, #20]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001146:	612c      	str	r4, [r5, #16]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001148:	f7ff fd66 	bl	8000c18 <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800114c:	a905      	add	r1, sp, #20
 800114e:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001150:	9705      	str	r7, [sp, #20]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001152:	f7ff fe32 	bl	8000dba <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001156:	4628      	mov	r0, r5
 8001158:	f7ff fd79 	bl	8000c4e <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800115c:	a903      	add	r1, sp, #12
 800115e:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001160:	9403      	str	r4, [sp, #12]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001162:	9404      	str	r4, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001164:	f7ff fec6 	bl	8000ef4 <HAL_TIMEx_MasterConfigSynchronization>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001168:	4628      	mov	r0, r5
 800116a:	2204      	movs	r2, #4
 800116c:	a909      	add	r1, sp, #36	; 0x24
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800116e:	9609      	str	r6, [sp, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001170:	940a      	str	r4, [sp, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001172:	940b      	str	r4, [sp, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001174:	940c      	str	r4, [sp, #48]	; 0x30
  uint16_t pwm_value = 0;
 8001176:	4625      	mov	r5, r4
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001178:	f7ff fd97 	bl	8000caa <HAL_TIM_PWM_ConfigChannel>
	  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_SET);
 800117c:	4e0e      	ldr	r6, [pc, #56]	; (80011b8 <main+0x204>)
 800117e:	4630      	mov	r0, r6
 8001180:	2201      	movs	r2, #1
 8001182:	2140      	movs	r1, #64	; 0x40
 8001184:	f7ff f97e 	bl	8000484 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8001188:	2064      	movs	r0, #100	; 0x64
 800118a:	f7ff f83f 	bl	800020c <HAL_Delay>
	  if(pwm_value == 0) step = 100;
 800118e:	b15d      	cbz	r5, 80011a8 <main+0x1f4>
	  if(pwm_value == 2000) step = -100;
 8001190:	f64f 739c 	movw	r3, #65436	; 0xff9c
 8001194:	f5b5 6ffa 	cmp.w	r5, #2000	; 0x7d0
 8001198:	bf08      	it	eq
 800119a:	461c      	moveq	r4, r3
	  pwm_value += step;
 800119c:	4425      	add	r5, r4
 800119e:	b2ad      	uxth	r5, r5
	  user_pwm_setvalue(pwm_value);
 80011a0:	4628      	mov	r0, r5
 80011a2:	f7ff fef1 	bl	8000f88 <user_pwm_setvalue>
  {
 80011a6:	e7ea      	b.n	800117e <main+0x1ca>
	  if(pwm_value == 0) step = 100;
 80011a8:	2464      	movs	r4, #100	; 0x64
 80011aa:	e7f7      	b.n	800119c <main+0x1e8>
 80011ac:	40023800 	.word	0x40023800
 80011b0:	40020000 	.word	0x40020000
 80011b4:	40020800 	.word	0x40020800
 80011b8:	40020400 	.word	0x40020400
 80011bc:	20000068 	.word	0x20000068
 80011c0:	40010800 	.word	0x40010800
 80011c4:	2000002c 	.word	0x2000002c
 80011c8:	40000800 	.word	0x40000800

080011cc <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80011cc:	4b0f      	ldr	r3, [pc, #60]	; (800120c <HAL_MspInit+0x40>)
{
 80011ce:	b084      	sub	sp, #16
  __HAL_RCC_COMP_CLK_ENABLE();
 80011d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011d2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80011d6:	625a      	str	r2, [r3, #36]	; 0x24
 80011d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011da:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80011de:	9201      	str	r2, [sp, #4]
 80011e0:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011e2:	6a1a      	ldr	r2, [r3, #32]
 80011e4:	f042 0201 	orr.w	r2, r2, #1
 80011e8:	621a      	str	r2, [r3, #32]
 80011ea:	6a1a      	ldr	r2, [r3, #32]
 80011ec:	f002 0201 	and.w	r2, r2, #1
 80011f0:	9202      	str	r2, [sp, #8]
 80011f2:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011f6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80011fa:	625a      	str	r2, [r3, #36]	; 0x24
 80011fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001202:	9303      	str	r3, [sp, #12]
 8001204:	9b03      	ldr	r3, [sp, #12]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001206:	b004      	add	sp, #16
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	40023800 	.word	0x40023800

08001210 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001210:	b510      	push	{r4, lr}
 8001212:	4604      	mov	r4, r0
 8001214:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001216:	2214      	movs	r2, #20
 8001218:	2100      	movs	r1, #0
 800121a:	a803      	add	r0, sp, #12
 800121c:	f000 f8d8 	bl	80013d0 <memset>
  if(htim_base->Instance==TIM4)
 8001220:	6823      	ldr	r3, [r4, #0]
 8001222:	4a17      	ldr	r2, [pc, #92]	; (8001280 <HAL_TIM_Base_MspInit+0x70>)
 8001224:	4293      	cmp	r3, r2
 8001226:	d11d      	bne.n	8001264 <HAL_TIM_Base_MspInit+0x54>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001228:	4b16      	ldr	r3, [pc, #88]	; (8001284 <HAL_TIM_Base_MspInit+0x74>)
    GPIO_InitStruct.Pin = GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800122a:	a903      	add	r1, sp, #12
    __HAL_RCC_TIM4_CLK_ENABLE();
 800122c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800122e:	4816      	ldr	r0, [pc, #88]	; (8001288 <HAL_TIM_Base_MspInit+0x78>)
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001230:	f042 0204 	orr.w	r2, r2, #4
 8001234:	625a      	str	r2, [r3, #36]	; 0x24
 8001236:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001238:	f002 0204 	and.w	r2, r2, #4
 800123c:	9200      	str	r2, [sp, #0]
 800123e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001240:	69da      	ldr	r2, [r3, #28]
 8001242:	f042 0202 	orr.w	r2, r2, #2
 8001246:	61da      	str	r2, [r3, #28]
 8001248:	69db      	ldr	r3, [r3, #28]
 800124a:	f003 0302 	and.w	r3, r3, #2
 800124e:	9301      	str	r3, [sp, #4]
 8001250:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001252:	2380      	movs	r3, #128	; 0x80
 8001254:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001256:	2302      	movs	r3, #2
 8001258:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800125a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800125c:	f7ff f844 	bl	80002e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8001260:	b008      	add	sp, #32
 8001262:	bd10      	pop	{r4, pc}
  else if(htim_base->Instance==TIM9)
 8001264:	4a09      	ldr	r2, [pc, #36]	; (800128c <HAL_TIM_Base_MspInit+0x7c>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d1fa      	bne.n	8001260 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800126a:	4b06      	ldr	r3, [pc, #24]	; (8001284 <HAL_TIM_Base_MspInit+0x74>)
 800126c:	6a1a      	ldr	r2, [r3, #32]
 800126e:	f042 0204 	orr.w	r2, r2, #4
 8001272:	621a      	str	r2, [r3, #32]
 8001274:	6a1b      	ldr	r3, [r3, #32]
 8001276:	f003 0304 	and.w	r3, r3, #4
 800127a:	9302      	str	r3, [sp, #8]
 800127c:	9b02      	ldr	r3, [sp, #8]
}
 800127e:	e7ef      	b.n	8001260 <HAL_TIM_Base_MspInit+0x50>
 8001280:	40000800 	.word	0x40000800
 8001284:	40023800 	.word	0x40023800
 8001288:	40020400 	.word	0x40020400
 800128c:	40010800 	.word	0x40010800

08001290 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001290:	b510      	push	{r4, lr}
 8001292:	4604      	mov	r4, r0
 8001294:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001296:	2214      	movs	r2, #20
 8001298:	2100      	movs	r1, #0
 800129a:	a801      	add	r0, sp, #4
 800129c:	f000 f898 	bl	80013d0 <memset>
  if(htim->Instance==TIM9)
 80012a0:	6822      	ldr	r2, [r4, #0]
 80012a2:	4b0d      	ldr	r3, [pc, #52]	; (80012d8 <HAL_TIM_MspPostInit+0x48>)
 80012a4:	429a      	cmp	r2, r3
 80012a6:	d114      	bne.n	80012d2 <HAL_TIM_MspPostInit+0x42>
  {
  /* USER CODE BEGIN TIM9_MspPostInit 0 */

  /* USER CODE END TIM9_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a8:	f503 3398 	add.w	r3, r3, #77824	; 0x13000
 80012ac:	69da      	ldr	r2, [r3, #28]
    GPIO_InitStruct.Pin = MOTOR_PWM_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
    HAL_GPIO_Init(MOTOR_PWM_GPIO_Port, &GPIO_InitStruct);
 80012ae:	a901      	add	r1, sp, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b0:	f042 0201 	orr.w	r2, r2, #1
 80012b4:	61da      	str	r2, [r3, #28]
 80012b6:	69db      	ldr	r3, [r3, #28]
    HAL_GPIO_Init(MOTOR_PWM_GPIO_Port, &GPIO_InitStruct);
 80012b8:	4808      	ldr	r0, [pc, #32]	; (80012dc <HAL_TIM_MspPostInit+0x4c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ba:	f003 0301 	and.w	r3, r3, #1
 80012be:	9300      	str	r3, [sp, #0]
 80012c0:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = MOTOR_PWM_Pin;
 80012c2:	2304      	movs	r3, #4
 80012c4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c6:	2302      	movs	r3, #2
 80012c8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80012ca:	2303      	movs	r3, #3
 80012cc:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(MOTOR_PWM_GPIO_Port, &GPIO_InitStruct);
 80012ce:	f7ff f80b 	bl	80002e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 80012d2:	b006      	add	sp, #24
 80012d4:	bd10      	pop	{r4, pc}
 80012d6:	bf00      	nop
 80012d8:	40010800 	.word	0x40010800
 80012dc:	40020000 	.word	0x40020000

080012e0 <NMI_Handler>:
 80012e0:	4770      	bx	lr

080012e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012e2:	e7fe      	b.n	80012e2 <HardFault_Handler>

080012e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012e4:	e7fe      	b.n	80012e4 <MemManage_Handler>

080012e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012e6:	e7fe      	b.n	80012e6 <BusFault_Handler>

080012e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012e8:	e7fe      	b.n	80012e8 <UsageFault_Handler>

080012ea <SVC_Handler>:
 80012ea:	4770      	bx	lr

080012ec <DebugMon_Handler>:
 80012ec:	4770      	bx	lr

080012ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012ee:	4770      	bx	lr

080012f0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012f0:	f7fe bf7a 	b.w	80001e8 <HAL_IncTick>

080012f4 <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 80012f4:	4b0e      	ldr	r3, [pc, #56]	; (8001330 <SystemInit+0x3c>)
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80012fc:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 80012fe:	6899      	ldr	r1, [r3, #8]
 8001300:	4a0c      	ldr	r2, [pc, #48]	; (8001334 <SystemInit+0x40>)
 8001302:	400a      	ands	r2, r1
 8001304:	609a      	str	r2, [r3, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	f022 5288 	bic.w	r2, r2, #285212672	; 0x11000000
 800130c:	f022 1201 	bic.w	r2, r2, #65537	; 0x10001
 8001310:	601a      	str	r2, [r3, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001318:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 800131a:	689a      	ldr	r2, [r3, #8]
 800131c:	f422 027d 	bic.w	r2, r2, #16580608	; 0xfd0000
 8001320:	609a      	str	r2, [r3, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001322:	2200      	movs	r2, #0
 8001324:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001326:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800132a:	4b03      	ldr	r3, [pc, #12]	; (8001338 <SystemInit+0x44>)
 800132c:	609a      	str	r2, [r3, #8]
 800132e:	4770      	bx	lr
 8001330:	40023800 	.word	0x40023800
 8001334:	88ffc00c 	.word	0x88ffc00c
 8001338:	e000ed00 	.word	0xe000ed00

0800133c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800133c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800133e:	e003      	b.n	8001348 <LoopCopyDataInit>

08001340 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001340:	4b0b      	ldr	r3, [pc, #44]	; (8001370 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001342:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001344:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001346:	3104      	adds	r1, #4

08001348 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001348:	480a      	ldr	r0, [pc, #40]	; (8001374 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800134a:	4b0b      	ldr	r3, [pc, #44]	; (8001378 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800134c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800134e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001350:	d3f6      	bcc.n	8001340 <CopyDataInit>
  ldr r2, =_sbss
 8001352:	4a0a      	ldr	r2, [pc, #40]	; (800137c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001354:	e002      	b.n	800135c <LoopFillZerobss>

08001356 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001356:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001358:	f842 3b04 	str.w	r3, [r2], #4

0800135c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800135c:	4b08      	ldr	r3, [pc, #32]	; (8001380 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800135e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001360:	d3f9      	bcc.n	8001356 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001362:	f7ff ffc7 	bl	80012f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001366:	f000 f80f 	bl	8001388 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800136a:	f7ff fe23 	bl	8000fb4 <main>
  bx lr
 800136e:	4770      	bx	lr
  ldr r3, =_sidata
 8001370:	0800141c 	.word	0x0800141c
  ldr r0, =_sdata
 8001374:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001378:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 800137c:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8001380:	200000a4 	.word	0x200000a4

08001384 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001384:	e7fe      	b.n	8001384 <ADC1_IRQHandler>
	...

08001388 <__libc_init_array>:
 8001388:	b570      	push	{r4, r5, r6, lr}
 800138a:	2500      	movs	r5, #0
 800138c:	4e0c      	ldr	r6, [pc, #48]	; (80013c0 <__libc_init_array+0x38>)
 800138e:	4c0d      	ldr	r4, [pc, #52]	; (80013c4 <__libc_init_array+0x3c>)
 8001390:	1ba4      	subs	r4, r4, r6
 8001392:	10a4      	asrs	r4, r4, #2
 8001394:	42a5      	cmp	r5, r4
 8001396:	d109      	bne.n	80013ac <__libc_init_array+0x24>
 8001398:	f000 f822 	bl	80013e0 <_init>
 800139c:	2500      	movs	r5, #0
 800139e:	4e0a      	ldr	r6, [pc, #40]	; (80013c8 <__libc_init_array+0x40>)
 80013a0:	4c0a      	ldr	r4, [pc, #40]	; (80013cc <__libc_init_array+0x44>)
 80013a2:	1ba4      	subs	r4, r4, r6
 80013a4:	10a4      	asrs	r4, r4, #2
 80013a6:	42a5      	cmp	r5, r4
 80013a8:	d105      	bne.n	80013b6 <__libc_init_array+0x2e>
 80013aa:	bd70      	pop	{r4, r5, r6, pc}
 80013ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80013b0:	4798      	blx	r3
 80013b2:	3501      	adds	r5, #1
 80013b4:	e7ee      	b.n	8001394 <__libc_init_array+0xc>
 80013b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80013ba:	4798      	blx	r3
 80013bc:	3501      	adds	r5, #1
 80013be:	e7f2      	b.n	80013a6 <__libc_init_array+0x1e>
 80013c0:	08001414 	.word	0x08001414
 80013c4:	08001414 	.word	0x08001414
 80013c8:	08001414 	.word	0x08001414
 80013cc:	08001418 	.word	0x08001418

080013d0 <memset>:
 80013d0:	4603      	mov	r3, r0
 80013d2:	4402      	add	r2, r0
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d100      	bne.n	80013da <memset+0xa>
 80013d8:	4770      	bx	lr
 80013da:	f803 1b01 	strb.w	r1, [r3], #1
 80013de:	e7f9      	b.n	80013d4 <memset+0x4>

080013e0 <_init>:
 80013e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013e2:	bf00      	nop
 80013e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013e6:	bc08      	pop	{r3}
 80013e8:	469e      	mov	lr, r3
 80013ea:	4770      	bx	lr

080013ec <_fini>:
 80013ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013ee:	bf00      	nop
 80013f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013f2:	bc08      	pop	{r3}
 80013f4:	469e      	mov	lr, r3
 80013f6:	4770      	bx	lr
