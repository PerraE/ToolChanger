
ToolChanger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000132c  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08001468  08001468  00011468  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001484  08001484  00011484  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001488  08001488  00011488  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  0800148c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000009c  2000000c  08001498  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200000a8  08001498  000200a8  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000918b  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001832  00000000  00000000  000291c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003f37  00000000  00000000  0002a9f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000608  00000000  00000000  0002e930  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000880  00000000  00000000  0002ef38  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000032f3  00000000  00000000  0002f7b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000265e  00000000  00000000  00032aab  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00035109  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000010c8  00000000  00000000  00035188  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000000c 	.word	0x2000000c
 8000158:	00000000 	.word	0x00000000
 800015c:	08001450 	.word	0x08001450

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000010 	.word	0x20000010
 8000178:	08001450 	.word	0x08001450

0800017c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800017c:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 800017e:	4b0f      	ldr	r3, [pc, #60]	; (80001bc <HAL_InitTick+0x40>)
{
 8000180:	4605      	mov	r5, r0
  if (uwTickFreq != 0U)
 8000182:	6818      	ldr	r0, [r3, #0]
 8000184:	b908      	cbnz	r0, 800018a <HAL_InitTick+0xe>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8000186:	2001      	movs	r0, #1
 8000188:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800018a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800018e:	fbb3 f3f0 	udiv	r3, r3, r0
 8000192:	4a0b      	ldr	r2, [pc, #44]	; (80001c0 <HAL_InitTick+0x44>)
 8000194:	6810      	ldr	r0, [r2, #0]
 8000196:	fbb0 f0f3 	udiv	r0, r0, r3
 800019a:	f000 f87d 	bl	8000298 <HAL_SYSTICK_Config>
 800019e:	4604      	mov	r4, r0
 80001a0:	2800      	cmp	r0, #0
 80001a2:	d1f0      	bne.n	8000186 <HAL_InitTick+0xa>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001a4:	2d0f      	cmp	r5, #15
 80001a6:	d8ee      	bhi.n	8000186 <HAL_InitTick+0xa>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001a8:	4602      	mov	r2, r0
 80001aa:	4629      	mov	r1, r5
 80001ac:	f04f 30ff 	mov.w	r0, #4294967295
 80001b0:	f000 f83e 	bl	8000230 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80001b4:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <HAL_InitTick+0x48>)
 80001b6:	4620      	mov	r0, r4
 80001b8:	601d      	str	r5, [r3, #0]
  }

  /* Return function status */
  return status;
}
 80001ba:	bd38      	pop	{r3, r4, r5, pc}
 80001bc:	20000000 	.word	0x20000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	20000004 	.word	0x20000004

080001c8 <HAL_Init>:
{
 80001c8:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001ca:	2003      	movs	r0, #3
 80001cc:	f000 f81e 	bl	800020c <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80001d0:	2000      	movs	r0, #0
 80001d2:	f7ff ffd3 	bl	800017c <HAL_InitTick>
 80001d6:	4604      	mov	r4, r0
 80001d8:	b918      	cbnz	r0, 80001e2 <HAL_Init+0x1a>
    HAL_MspInit();
 80001da:	f001 f82f 	bl	800123c <HAL_MspInit>
}
 80001de:	4620      	mov	r0, r4
 80001e0:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 80001e2:	2401      	movs	r4, #1
 80001e4:	e7fb      	b.n	80001de <HAL_Init+0x16>
	...

080001e8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001e8:	4a03      	ldr	r2, [pc, #12]	; (80001f8 <HAL_IncTick+0x10>)
 80001ea:	4904      	ldr	r1, [pc, #16]	; (80001fc <HAL_IncTick+0x14>)
 80001ec:	6813      	ldr	r3, [r2, #0]
 80001ee:	6809      	ldr	r1, [r1, #0]
 80001f0:	440b      	add	r3, r1
 80001f2:	6013      	str	r3, [r2, #0]
 80001f4:	4770      	bx	lr
 80001f6:	bf00      	nop
 80001f8:	20000028 	.word	0x20000028
 80001fc:	20000000 	.word	0x20000000

08000200 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000200:	4b01      	ldr	r3, [pc, #4]	; (8000208 <HAL_GetTick+0x8>)
 8000202:	6818      	ldr	r0, [r3, #0]
}
 8000204:	4770      	bx	lr
 8000206:	bf00      	nop
 8000208:	20000028 	.word	0x20000028

0800020c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800020c:	4a07      	ldr	r2, [pc, #28]	; (800022c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800020e:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000210:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000212:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000216:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800021a:	041b      	lsls	r3, r3, #16
 800021c:	0c1b      	lsrs	r3, r3, #16
 800021e:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000222:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000226:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000228:	60d3      	str	r3, [r2, #12]
 800022a:	4770      	bx	lr
 800022c:	e000ed00 	.word	0xe000ed00

08000230 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000230:	4b17      	ldr	r3, [pc, #92]	; (8000290 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000232:	b530      	push	{r4, r5, lr}
 8000234:	68dc      	ldr	r4, [r3, #12]
 8000236:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800023a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800023e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000240:	2b04      	cmp	r3, #4
 8000242:	bf28      	it	cs
 8000244:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000246:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000248:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800024c:	bf98      	it	ls
 800024e:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000250:	fa05 f303 	lsl.w	r3, r5, r3
 8000254:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000258:	bf88      	it	hi
 800025a:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800025c:	4019      	ands	r1, r3
 800025e:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000260:	fa05 f404 	lsl.w	r4, r5, r4
 8000264:	3c01      	subs	r4, #1
 8000266:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8000268:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800026a:	ea42 0201 	orr.w	r2, r2, r1
 800026e:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000272:	bfa9      	itett	ge
 8000274:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000278:	4b06      	ldrlt	r3, [pc, #24]	; (8000294 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800027a:	b2d2      	uxtbge	r2, r2
 800027c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000280:	bfbb      	ittet	lt
 8000282:	f000 000f 	andlt.w	r0, r0, #15
 8000286:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000288:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800028c:	541a      	strblt	r2, [r3, r0]
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	e000ed00 	.word	0xe000ed00
 8000294:	e000ed14 	.word	0xe000ed14

08000298 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000298:	3801      	subs	r0, #1
 800029a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800029e:	d20a      	bcs.n	80002b6 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002a0:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002a2:	4b06      	ldr	r3, [pc, #24]	; (80002bc <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002a4:	4a06      	ldr	r2, [pc, #24]	; (80002c0 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002a6:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002a8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002ac:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002ae:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002b0:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002b2:	601a      	str	r2, [r3, #0]
 80002b4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80002b6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80002b8:	4770      	bx	lr
 80002ba:	bf00      	nop
 80002bc:	e000e010 	.word	0xe000e010
 80002c0:	e000ed00 	.word	0xe000ed00

080002c4 <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
  uint32_t position = 0x00;
 80002c4:	2300      	movs	r3, #0
{ 
 80002c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80002ca:	4a62      	ldr	r2, [pc, #392]	; (8000454 <HAL_GPIO_Init+0x190>)
  while (((GPIO_Init->Pin) >> position) != 0)
 80002cc:	f8d1 8000 	ldr.w	r8, [r1]
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80002d0:	f8df 9188 	ldr.w	r9, [pc, #392]	; 800045c <HAL_GPIO_Init+0x198>
{ 
 80002d4:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0)
 80002d6:	fa38 f403 	lsrs.w	r4, r8, r3
 80002da:	d102      	bne.n	80002e2 <HAL_GPIO_Init+0x1e>
      }
    }
    
    position++;
  } 
}
 80002dc:	b005      	add	sp, #20
 80002de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80002e2:	2401      	movs	r4, #1
 80002e4:	409c      	lsls	r4, r3
    if(iocurrent)
 80002e6:	ea18 0604 	ands.w	r6, r8, r4
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80002ea:	9401      	str	r4, [sp, #4]
    if(iocurrent)
 80002ec:	f000 80a7 	beq.w	800043e <HAL_GPIO_Init+0x17a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80002f0:	684c      	ldr	r4, [r1, #4]
 80002f2:	f024 0a10 	bic.w	sl, r4, #16
 80002f6:	f1ba 0f02 	cmp.w	sl, #2
 80002fa:	d116      	bne.n	800032a <HAL_GPIO_Init+0x66>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 80002fc:	f04f 0e0f 	mov.w	lr, #15
        temp = GPIOx->AFR[position >> 3];
 8000300:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 8000304:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 8000308:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3];
 800030c:	f8dc 5020 	ldr.w	r5, [ip, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 8000310:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000314:	fa0e fe0b 	lsl.w	lr, lr, fp
 8000318:	ea25 0e0e 	bic.w	lr, r5, lr
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));       
 800031c:	690d      	ldr	r5, [r1, #16]
 800031e:	fa05 f50b 	lsl.w	r5, r5, fp
 8000322:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3] = temp;
 8000326:	f8cc 5020 	str.w	r5, [ip, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 800032a:	2503      	movs	r5, #3
 800032c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000330:	fa05 f50c 	lsl.w	r5, r5, ip
 8000334:	43ed      	mvns	r5, r5
      temp = GPIOx->MODER;
 8000336:	f8d0 b000 	ldr.w	fp, [r0]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800033a:	f004 0e03 	and.w	lr, r4, #3
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 800033e:	ea0b 0b05 	and.w	fp, fp, r5
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000342:	fa0e fe0c 	lsl.w	lr, lr, ip
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000346:	f10a 3aff 	add.w	sl, sl, #4294967295
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800034a:	ea4e 0e0b 	orr.w	lr, lr, fp
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800034e:	f1ba 0f01 	cmp.w	sl, #1
      GPIOx->MODER = temp;
 8000352:	f8c0 e000 	str.w	lr, [r0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000356:	d816      	bhi.n	8000386 <HAL_GPIO_Init+0xc2>
        temp = GPIOx->OSPEEDR; 
 8000358:	f8d0 e008 	ldr.w	lr, [r0, #8]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 800035c:	68cf      	ldr	r7, [r1, #12]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800035e:	ea05 0e0e 	and.w	lr, r5, lr
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8000362:	fa07 fa0c 	lsl.w	sl, r7, ip
 8000366:	ea4a 0e0e 	orr.w	lr, sl, lr
        GPIOx->OSPEEDR = temp;
 800036a:	f8c0 e008 	str.w	lr, [r0, #8]
        temp = GPIOx->OTYPER;
 800036e:	f8d0 e004 	ldr.w	lr, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000372:	9f01      	ldr	r7, [sp, #4]
 8000374:	ea2e 0707 	bic.w	r7, lr, r7
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000378:	f3c4 1e00 	ubfx	lr, r4, #4, #1
 800037c:	fa0e fe03 	lsl.w	lr, lr, r3
 8000380:	ea4e 0707 	orr.w	r7, lr, r7
        GPIOx->OTYPER = temp;
 8000384:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000386:	68c7      	ldr	r7, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8000388:	403d      	ands	r5, r7
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 800038a:	688f      	ldr	r7, [r1, #8]
 800038c:	fa07 f70c 	lsl.w	r7, r7, ip
 8000390:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000392:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000394:	00e5      	lsls	r5, r4, #3
 8000396:	d552      	bpl.n	800043e <HAL_GPIO_Init+0x17a>
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000398:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800039c:	f8d9 5020 	ldr.w	r5, [r9, #32]
 80003a0:	f023 0703 	bic.w	r7, r3, #3
 80003a4:	f045 0501 	orr.w	r5, r5, #1
 80003a8:	f8c9 5020 	str.w	r5, [r9, #32]
 80003ac:	f8d9 5020 	ldr.w	r5, [r9, #32]
 80003b0:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80003b4:	f005 0501 	and.w	r5, r5, #1
 80003b8:	9503      	str	r5, [sp, #12]
 80003ba:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80003be:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003c2:	9d03      	ldr	r5, [sp, #12]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80003c4:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        temp = SYSCFG->EXTICR[position >> 2];
 80003c8:	68bd      	ldr	r5, [r7, #8]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80003ca:	fa0e fe0c 	lsl.w	lr, lr, ip
 80003ce:	ea25 0e0e 	bic.w	lr, r5, lr
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80003d2:	4d21      	ldr	r5, [pc, #132]	; (8000458 <HAL_GPIO_Init+0x194>)
 80003d4:	42a8      	cmp	r0, r5
 80003d6:	d034      	beq.n	8000442 <HAL_GPIO_Init+0x17e>
 80003d8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003dc:	42a8      	cmp	r0, r5
 80003de:	d032      	beq.n	8000446 <HAL_GPIO_Init+0x182>
 80003e0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003e4:	42a8      	cmp	r0, r5
 80003e6:	d030      	beq.n	800044a <HAL_GPIO_Init+0x186>
 80003e8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003ec:	42a8      	cmp	r0, r5
 80003ee:	d02e      	beq.n	800044e <HAL_GPIO_Init+0x18a>
 80003f0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003f4:	42a8      	cmp	r0, r5
 80003f6:	bf14      	ite	ne
 80003f8:	2505      	movne	r5, #5
 80003fa:	2504      	moveq	r5, #4
 80003fc:	fa05 f50c 	lsl.w	r5, r5, ip
 8000400:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8000404:	60bd      	str	r5, [r7, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000406:	43f7      	mvns	r7, r6
        temp = EXTI->IMR;
 8000408:	6815      	ldr	r5, [r2, #0]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800040a:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800040e:	bf0c      	ite	eq
 8000410:	403d      	andeq	r5, r7
          SET_BIT(temp, iocurrent); 
 8000412:	4335      	orrne	r5, r6
        EXTI->IMR = temp;
 8000414:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8000416:	6855      	ldr	r5, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000418:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 800041c:	bf0c      	ite	eq
 800041e:	403d      	andeq	r5, r7
          SET_BIT(temp, iocurrent); 
 8000420:	4335      	orrne	r5, r6
        EXTI->EMR = temp;
 8000422:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8000424:	6895      	ldr	r5, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000426:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 800042a:	bf0c      	ite	eq
 800042c:	403d      	andeq	r5, r7
          SET_BIT(temp, iocurrent); 
 800042e:	4335      	orrne	r5, r6
        EXTI->RTSR = temp;
 8000430:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8000432:	68d5      	ldr	r5, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000434:	02a4      	lsls	r4, r4, #10
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000436:	bf54      	ite	pl
 8000438:	403d      	andpl	r5, r7
          SET_BIT(temp, iocurrent); 
 800043a:	4335      	orrmi	r5, r6
        EXTI->FTSR = temp;
 800043c:	60d5      	str	r5, [r2, #12]
    position++;
 800043e:	3301      	adds	r3, #1
 8000440:	e749      	b.n	80002d6 <HAL_GPIO_Init+0x12>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000442:	2500      	movs	r5, #0
 8000444:	e7da      	b.n	80003fc <HAL_GPIO_Init+0x138>
 8000446:	2501      	movs	r5, #1
 8000448:	e7d8      	b.n	80003fc <HAL_GPIO_Init+0x138>
 800044a:	2502      	movs	r5, #2
 800044c:	e7d6      	b.n	80003fc <HAL_GPIO_Init+0x138>
 800044e:	2503      	movs	r5, #3
 8000450:	e7d4      	b.n	80003fc <HAL_GPIO_Init+0x138>
 8000452:	bf00      	nop
 8000454:	40010400 	.word	0x40010400
 8000458:	40020000 	.word	0x40020000
 800045c:	40023800 	.word	0x40023800

08000460 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000460:	b10a      	cbz	r2, 8000466 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8000462:	6181      	str	r1, [r0, #24]
 8000464:	4770      	bx	lr
 8000466:	0409      	lsls	r1, r1, #16
 8000468:	e7fb      	b.n	8000462 <HAL_GPIO_WritePin+0x2>
	...

0800046c <RCC_SetFlashLatencyFromMSIRange>:
{
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800046c:	4b1c      	ldr	r3, [pc, #112]	; (80004e0 <RCC_SetFlashLatencyFromMSIRange+0x74>)
{
 800046e:	b082      	sub	sp, #8
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8000470:	689a      	ldr	r2, [r3, #8]
 8000472:	f012 0ff0 	tst.w	r2, #240	; 0xf0
 8000476:	d00c      	beq.n	8000492 <RCC_SetFlashLatencyFromMSIRange+0x26>
{
 8000478:	2200      	movs	r2, #0
    {
      latency = FLASH_LATENCY_1; /* 1WS */
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800047a:	491a      	ldr	r1, [pc, #104]	; (80004e4 <RCC_SetFlashLatencyFromMSIRange+0x78>)
 800047c:	680b      	ldr	r3, [r1, #0]
 800047e:	f023 0301 	bic.w	r3, r3, #1
 8000482:	4313      	orrs	r3, r2
 8000484:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8000486:	6808      	ldr	r0, [r1, #0]
 8000488:	f000 0001 	and.w	r0, r0, #1
 800048c:	4050      	eors	r0, r2
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 800048e:	b002      	add	sp, #8
 8000490:	4770      	bx	lr
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8000492:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000494:	4914      	ldr	r1, [pc, #80]	; (80004e8 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8000496:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 800049a:	d00f      	beq.n	80004bc <RCC_SetFlashLatencyFromMSIRange+0x50>
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800049c:	680a      	ldr	r2, [r1, #0]
 800049e:	f402 52c0 	and.w	r2, r2, #6144	; 0x1800
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80004a2:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
 80004a6:	d1e7      	bne.n	8000478 <RCC_SetFlashLatencyFromMSIRange+0xc>
 80004a8:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
 80004ac:	d1e4      	bne.n	8000478 <RCC_SetFlashLatencyFromMSIRange+0xc>
  __HAL_FLASH_SET_LATENCY(latency);
 80004ae:	4a0d      	ldr	r2, [pc, #52]	; (80004e4 <RCC_SetFlashLatencyFromMSIRange+0x78>)
 80004b0:	6813      	ldr	r3, [r2, #0]
 80004b2:	f043 0304 	orr.w	r3, r3, #4
 80004b6:	6013      	str	r3, [r2, #0]
      latency = FLASH_LATENCY_1; /* 1WS */
 80004b8:	2201      	movs	r2, #1
 80004ba:	e7de      	b.n	800047a <RCC_SetFlashLatencyFromMSIRange+0xe>
      __HAL_RCC_PWR_CLK_ENABLE();
 80004bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80004be:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80004c2:	625a      	str	r2, [r3, #36]	; 0x24
 80004c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80004c6:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80004ca:	9201      	str	r2, [sp, #4]
 80004cc:	9a01      	ldr	r2, [sp, #4]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80004ce:	680a      	ldr	r2, [r1, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
 80004d0:	6a59      	ldr	r1, [r3, #36]	; 0x24
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80004d2:	f402 52c0 	and.w	r2, r2, #6144	; 0x1800
      __HAL_RCC_PWR_CLK_DISABLE();
 80004d6:	f021 5180 	bic.w	r1, r1, #268435456	; 0x10000000
 80004da:	6259      	str	r1, [r3, #36]	; 0x24
 80004dc:	e7e1      	b.n	80004a2 <RCC_SetFlashLatencyFromMSIRange+0x36>
 80004de:	bf00      	nop
 80004e0:	40023800 	.word	0x40023800
 80004e4:	40023c00 	.word	0x40023c00
 80004e8:	40007000 	.word	0x40007000

080004ec <HAL_RCC_OscConfig>:
{
 80004ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 80004f0:	4604      	mov	r4, r0
 80004f2:	b908      	cbnz	r0, 80004f8 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80004f4:	2001      	movs	r0, #1
 80004f6:	e077      	b.n	80005e8 <HAL_RCC_OscConfig+0xfc>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80004f8:	4ba0      	ldr	r3, [pc, #640]	; (800077c <HAL_RCC_OscConfig+0x290>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004fa:	6802      	ldr	r2, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80004fc:	689e      	ldr	r6, [r3, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80004fe:	689f      	ldr	r7, [r3, #8]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000500:	07d0      	lsls	r0, r2, #31
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000502:	f006 060c 	and.w	r6, r6, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000506:	f407 3780 	and.w	r7, r7, #65536	; 0x10000
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800050a:	d44b      	bmi.n	80005a4 <HAL_RCC_OscConfig+0xb8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800050c:	6823      	ldr	r3, [r4, #0]
 800050e:	0799      	lsls	r1, r3, #30
 8000510:	f100 8092 	bmi.w	8000638 <HAL_RCC_OscConfig+0x14c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000514:	6823      	ldr	r3, [r4, #0]
 8000516:	06d8      	lsls	r0, r3, #27
 8000518:	d536      	bpl.n	8000588 <HAL_RCC_OscConfig+0x9c>
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 800051a:	2e00      	cmp	r6, #0
 800051c:	f040 80dc 	bne.w	80006d8 <HAL_RCC_OscConfig+0x1ec>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000520:	4d96      	ldr	r5, [pc, #600]	; (800077c <HAL_RCC_OscConfig+0x290>)
 8000522:	682b      	ldr	r3, [r5, #0]
 8000524:	0599      	lsls	r1, r3, #22
 8000526:	d502      	bpl.n	800052e <HAL_RCC_OscConfig+0x42>
 8000528:	69a3      	ldr	r3, [r4, #24]
 800052a:	2b00      	cmp	r3, #0
 800052c:	d0e2      	beq.n	80004f4 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800052e:	686b      	ldr	r3, [r5, #4]
 8000530:	6a20      	ldr	r0, [r4, #32]
 8000532:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000536:	4298      	cmp	r0, r3
 8000538:	f240 80bc 	bls.w	80006b4 <HAL_RCC_OscConfig+0x1c8>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800053c:	f7ff ff96 	bl	800046c <RCC_SetFlashLatencyFromMSIRange>
 8000540:	2800      	cmp	r0, #0
 8000542:	d1d7      	bne.n	80004f4 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000544:	686b      	ldr	r3, [r5, #4]
 8000546:	6a22      	ldr	r2, [r4, #32]
 8000548:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800054c:	4313      	orrs	r3, r2
 800054e:	606b      	str	r3, [r5, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000550:	686b      	ldr	r3, [r5, #4]
 8000552:	69e2      	ldr	r2, [r4, #28]
 8000554:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000558:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800055c:	606b      	str	r3, [r5, #4]
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800055e:	4b87      	ldr	r3, [pc, #540]	; (800077c <HAL_RCC_OscConfig+0x290>)
 8000560:	6899      	ldr	r1, [r3, #8]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000562:	6a23      	ldr	r3, [r4, #32]
 8000564:	0b5b      	lsrs	r3, r3, #13
 8000566:	1c5a      	adds	r2, r3, #1
 8000568:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800056c:	4093      	lsls	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800056e:	f3c1 1203 	ubfx	r2, r1, #4, #4
 8000572:	4983      	ldr	r1, [pc, #524]	; (8000780 <HAL_RCC_OscConfig+0x294>)
 8000574:	5c8a      	ldrb	r2, [r1, r2]
 8000576:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000578:	4a82      	ldr	r2, [pc, #520]	; (8000784 <HAL_RCC_OscConfig+0x298>)
 800057a:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick(uwTickPrio);
 800057c:	4b82      	ldr	r3, [pc, #520]	; (8000788 <HAL_RCC_OscConfig+0x29c>)
 800057e:	6818      	ldr	r0, [r3, #0]
 8000580:	f7ff fdfc 	bl	800017c <HAL_InitTick>
        if(status != HAL_OK)
 8000584:	2800      	cmp	r0, #0
 8000586:	d12f      	bne.n	80005e8 <HAL_RCC_OscConfig+0xfc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000588:	6823      	ldr	r3, [r4, #0]
 800058a:	0718      	lsls	r0, r3, #28
 800058c:	f100 80d3 	bmi.w	8000736 <HAL_RCC_OscConfig+0x24a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000590:	6823      	ldr	r3, [r4, #0]
 8000592:	0759      	lsls	r1, r3, #29
 8000594:	f100 8100 	bmi.w	8000798 <HAL_RCC_OscConfig+0x2ac>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000598:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800059a:	2800      	cmp	r0, #0
 800059c:	f040 816a 	bne.w	8000874 <HAL_RCC_OscConfig+0x388>
  return HAL_OK;
 80005a0:	2000      	movs	r0, #0
 80005a2:	e021      	b.n	80005e8 <HAL_RCC_OscConfig+0xfc>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80005a4:	2e08      	cmp	r6, #8
 80005a6:	d002      	beq.n	80005ae <HAL_RCC_OscConfig+0xc2>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80005a8:	2e0c      	cmp	r6, #12
 80005aa:	d107      	bne.n	80005bc <HAL_RCC_OscConfig+0xd0>
 80005ac:	b137      	cbz	r7, 80005bc <HAL_RCC_OscConfig+0xd0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	039a      	lsls	r2, r3, #14
 80005b2:	d5ab      	bpl.n	800050c <HAL_RCC_OscConfig+0x20>
 80005b4:	6863      	ldr	r3, [r4, #4]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d1a8      	bne.n	800050c <HAL_RCC_OscConfig+0x20>
 80005ba:	e79b      	b.n	80004f4 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005bc:	6863      	ldr	r3, [r4, #4]
 80005be:	4d6f      	ldr	r5, [pc, #444]	; (800077c <HAL_RCC_OscConfig+0x290>)
 80005c0:	2b01      	cmp	r3, #1
 80005c2:	d114      	bne.n	80005ee <HAL_RCC_OscConfig+0x102>
 80005c4:	682b      	ldr	r3, [r5, #0]
 80005c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005ca:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80005cc:	f7ff fe18 	bl	8000200 <HAL_GetTick>
 80005d0:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80005d2:	4d6a      	ldr	r5, [pc, #424]	; (800077c <HAL_RCC_OscConfig+0x290>)
 80005d4:	682b      	ldr	r3, [r5, #0]
 80005d6:	039b      	lsls	r3, r3, #14
 80005d8:	d498      	bmi.n	800050c <HAL_RCC_OscConfig+0x20>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80005da:	f7ff fe11 	bl	8000200 <HAL_GetTick>
 80005de:	eba0 0008 	sub.w	r0, r0, r8
 80005e2:	2864      	cmp	r0, #100	; 0x64
 80005e4:	d9f6      	bls.n	80005d4 <HAL_RCC_OscConfig+0xe8>
            return HAL_TIMEOUT;
 80005e6:	2003      	movs	r0, #3
}
 80005e8:	b003      	add	sp, #12
 80005ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005ee:	b9ab      	cbnz	r3, 800061c <HAL_RCC_OscConfig+0x130>
 80005f0:	682b      	ldr	r3, [r5, #0]
 80005f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80005f6:	602b      	str	r3, [r5, #0]
 80005f8:	682b      	ldr	r3, [r5, #0]
 80005fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80005fe:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000600:	f7ff fdfe 	bl	8000200 <HAL_GetTick>
 8000604:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000606:	682b      	ldr	r3, [r5, #0]
 8000608:	0398      	lsls	r0, r3, #14
 800060a:	f57f af7f 	bpl.w	800050c <HAL_RCC_OscConfig+0x20>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800060e:	f7ff fdf7 	bl	8000200 <HAL_GetTick>
 8000612:	eba0 0008 	sub.w	r0, r0, r8
 8000616:	2864      	cmp	r0, #100	; 0x64
 8000618:	d9f5      	bls.n	8000606 <HAL_RCC_OscConfig+0x11a>
 800061a:	e7e4      	b.n	80005e6 <HAL_RCC_OscConfig+0xfa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800061c:	2b05      	cmp	r3, #5
 800061e:	682b      	ldr	r3, [r5, #0]
 8000620:	d103      	bne.n	800062a <HAL_RCC_OscConfig+0x13e>
 8000622:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000626:	602b      	str	r3, [r5, #0]
 8000628:	e7cc      	b.n	80005c4 <HAL_RCC_OscConfig+0xd8>
 800062a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800062e:	602b      	str	r3, [r5, #0]
 8000630:	682b      	ldr	r3, [r5, #0]
 8000632:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000636:	e7c8      	b.n	80005ca <HAL_RCC_OscConfig+0xde>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000638:	2e04      	cmp	r6, #4
 800063a:	d002      	beq.n	8000642 <HAL_RCC_OscConfig+0x156>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800063c:	2e0c      	cmp	r6, #12
 800063e:	d110      	bne.n	8000662 <HAL_RCC_OscConfig+0x176>
 8000640:	b97f      	cbnz	r7, 8000662 <HAL_RCC_OscConfig+0x176>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000642:	4b4e      	ldr	r3, [pc, #312]	; (800077c <HAL_RCC_OscConfig+0x290>)
 8000644:	681a      	ldr	r2, [r3, #0]
 8000646:	0791      	lsls	r1, r2, #30
 8000648:	d503      	bpl.n	8000652 <HAL_RCC_OscConfig+0x166>
 800064a:	68e2      	ldr	r2, [r4, #12]
 800064c:	2a01      	cmp	r2, #1
 800064e:	f47f af51 	bne.w	80004f4 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000652:	685a      	ldr	r2, [r3, #4]
 8000654:	6921      	ldr	r1, [r4, #16]
 8000656:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 800065a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800065e:	605a      	str	r2, [r3, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000660:	e758      	b.n	8000514 <HAL_RCC_OscConfig+0x28>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000662:	68e2      	ldr	r2, [r4, #12]
 8000664:	4b49      	ldr	r3, [pc, #292]	; (800078c <HAL_RCC_OscConfig+0x2a0>)
 8000666:	b1b2      	cbz	r2, 8000696 <HAL_RCC_OscConfig+0x1aa>
        __HAL_RCC_HSI_ENABLE();
 8000668:	2201      	movs	r2, #1
 800066a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800066c:	f7ff fdc8 	bl	8000200 <HAL_GetTick>
 8000670:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000672:	4d42      	ldr	r5, [pc, #264]	; (800077c <HAL_RCC_OscConfig+0x290>)
 8000674:	682b      	ldr	r3, [r5, #0]
 8000676:	079a      	lsls	r2, r3, #30
 8000678:	d507      	bpl.n	800068a <HAL_RCC_OscConfig+0x19e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800067a:	686b      	ldr	r3, [r5, #4]
 800067c:	6922      	ldr	r2, [r4, #16]
 800067e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8000682:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000686:	606b      	str	r3, [r5, #4]
 8000688:	e744      	b.n	8000514 <HAL_RCC_OscConfig+0x28>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800068a:	f7ff fdb9 	bl	8000200 <HAL_GetTick>
 800068e:	1bc0      	subs	r0, r0, r7
 8000690:	2802      	cmp	r0, #2
 8000692:	d9ef      	bls.n	8000674 <HAL_RCC_OscConfig+0x188>
 8000694:	e7a7      	b.n	80005e6 <HAL_RCC_OscConfig+0xfa>
        __HAL_RCC_HSI_DISABLE();
 8000696:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000698:	f7ff fdb2 	bl	8000200 <HAL_GetTick>
 800069c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800069e:	4d37      	ldr	r5, [pc, #220]	; (800077c <HAL_RCC_OscConfig+0x290>)
 80006a0:	682b      	ldr	r3, [r5, #0]
 80006a2:	079b      	lsls	r3, r3, #30
 80006a4:	f57f af36 	bpl.w	8000514 <HAL_RCC_OscConfig+0x28>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80006a8:	f7ff fdaa 	bl	8000200 <HAL_GetTick>
 80006ac:	1bc0      	subs	r0, r0, r7
 80006ae:	2802      	cmp	r0, #2
 80006b0:	d9f6      	bls.n	80006a0 <HAL_RCC_OscConfig+0x1b4>
 80006b2:	e798      	b.n	80005e6 <HAL_RCC_OscConfig+0xfa>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80006b4:	686b      	ldr	r3, [r5, #4]
 80006b6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80006ba:	4303      	orrs	r3, r0
 80006bc:	606b      	str	r3, [r5, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80006be:	686b      	ldr	r3, [r5, #4]
 80006c0:	69e2      	ldr	r2, [r4, #28]
 80006c2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80006c6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80006ca:	606b      	str	r3, [r5, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80006cc:	f7ff fece 	bl	800046c <RCC_SetFlashLatencyFromMSIRange>
 80006d0:	2800      	cmp	r0, #0
 80006d2:	f43f af44 	beq.w	800055e <HAL_RCC_OscConfig+0x72>
 80006d6:	e70d      	b.n	80004f4 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80006d8:	69a2      	ldr	r2, [r4, #24]
 80006da:	4b2d      	ldr	r3, [pc, #180]	; (8000790 <HAL_RCC_OscConfig+0x2a4>)
 80006dc:	b1e2      	cbz	r2, 8000718 <HAL_RCC_OscConfig+0x22c>
        __HAL_RCC_MSI_ENABLE();
 80006de:	2201      	movs	r2, #1
 80006e0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80006e2:	f7ff fd8d 	bl	8000200 <HAL_GetTick>
 80006e6:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80006e8:	4d24      	ldr	r5, [pc, #144]	; (800077c <HAL_RCC_OscConfig+0x290>)
 80006ea:	682b      	ldr	r3, [r5, #0]
 80006ec:	059a      	lsls	r2, r3, #22
 80006ee:	d50d      	bpl.n	800070c <HAL_RCC_OscConfig+0x220>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80006f0:	686b      	ldr	r3, [r5, #4]
 80006f2:	6a22      	ldr	r2, [r4, #32]
 80006f4:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80006f8:	4313      	orrs	r3, r2
 80006fa:	606b      	str	r3, [r5, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80006fc:	686b      	ldr	r3, [r5, #4]
 80006fe:	69e2      	ldr	r2, [r4, #28]
 8000700:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000704:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000708:	606b      	str	r3, [r5, #4]
 800070a:	e73d      	b.n	8000588 <HAL_RCC_OscConfig+0x9c>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800070c:	f7ff fd78 	bl	8000200 <HAL_GetTick>
 8000710:	1bc0      	subs	r0, r0, r7
 8000712:	2802      	cmp	r0, #2
 8000714:	d9e9      	bls.n	80006ea <HAL_RCC_OscConfig+0x1fe>
 8000716:	e766      	b.n	80005e6 <HAL_RCC_OscConfig+0xfa>
        __HAL_RCC_MSI_DISABLE();
 8000718:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800071a:	f7ff fd71 	bl	8000200 <HAL_GetTick>
 800071e:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8000720:	4d16      	ldr	r5, [pc, #88]	; (800077c <HAL_RCC_OscConfig+0x290>)
 8000722:	682b      	ldr	r3, [r5, #0]
 8000724:	059b      	lsls	r3, r3, #22
 8000726:	f57f af2f 	bpl.w	8000588 <HAL_RCC_OscConfig+0x9c>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800072a:	f7ff fd69 	bl	8000200 <HAL_GetTick>
 800072e:	1bc0      	subs	r0, r0, r7
 8000730:	2802      	cmp	r0, #2
 8000732:	d9f6      	bls.n	8000722 <HAL_RCC_OscConfig+0x236>
 8000734:	e757      	b.n	80005e6 <HAL_RCC_OscConfig+0xfa>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000736:	6962      	ldr	r2, [r4, #20]
 8000738:	4b16      	ldr	r3, [pc, #88]	; (8000794 <HAL_RCC_OscConfig+0x2a8>)
 800073a:	b17a      	cbz	r2, 800075c <HAL_RCC_OscConfig+0x270>
      __HAL_RCC_LSI_ENABLE();
 800073c:	2201      	movs	r2, #1
 800073e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000740:	f7ff fd5e 	bl	8000200 <HAL_GetTick>
 8000744:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000746:	4d0d      	ldr	r5, [pc, #52]	; (800077c <HAL_RCC_OscConfig+0x290>)
 8000748:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800074a:	079a      	lsls	r2, r3, #30
 800074c:	f53f af20 	bmi.w	8000590 <HAL_RCC_OscConfig+0xa4>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000750:	f7ff fd56 	bl	8000200 <HAL_GetTick>
 8000754:	1bc0      	subs	r0, r0, r7
 8000756:	2802      	cmp	r0, #2
 8000758:	d9f6      	bls.n	8000748 <HAL_RCC_OscConfig+0x25c>
 800075a:	e744      	b.n	80005e6 <HAL_RCC_OscConfig+0xfa>
      __HAL_RCC_LSI_DISABLE();
 800075c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800075e:	f7ff fd4f 	bl	8000200 <HAL_GetTick>
 8000762:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8000764:	4d05      	ldr	r5, [pc, #20]	; (800077c <HAL_RCC_OscConfig+0x290>)
 8000766:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000768:	079b      	lsls	r3, r3, #30
 800076a:	f57f af11 	bpl.w	8000590 <HAL_RCC_OscConfig+0xa4>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800076e:	f7ff fd47 	bl	8000200 <HAL_GetTick>
 8000772:	1bc0      	subs	r0, r0, r7
 8000774:	2802      	cmp	r0, #2
 8000776:	d9f6      	bls.n	8000766 <HAL_RCC_OscConfig+0x27a>
 8000778:	e735      	b.n	80005e6 <HAL_RCC_OscConfig+0xfa>
 800077a:	bf00      	nop
 800077c:	40023800 	.word	0x40023800
 8000780:	08001468 	.word	0x08001468
 8000784:	20000008 	.word	0x20000008
 8000788:	20000004 	.word	0x20000004
 800078c:	42470000 	.word	0x42470000
 8000790:	42470020 	.word	0x42470020
 8000794:	42470680 	.word	0x42470680
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000798:	4b60      	ldr	r3, [pc, #384]	; (800091c <HAL_RCC_OscConfig+0x430>)
 800079a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800079c:	00d0      	lsls	r0, r2, #3
 800079e:	d429      	bmi.n	80007f4 <HAL_RCC_OscConfig+0x308>
      pwrclkchanged = SET;
 80007a0:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80007a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80007a4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80007a8:	625a      	str	r2, [r3, #36]	; 0x24
 80007aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007b0:	9301      	str	r3, [sp, #4]
 80007b2:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80007b4:	4d5a      	ldr	r5, [pc, #360]	; (8000920 <HAL_RCC_OscConfig+0x434>)
 80007b6:	682b      	ldr	r3, [r5, #0]
 80007b8:	05d9      	lsls	r1, r3, #23
 80007ba:	d51d      	bpl.n	80007f8 <HAL_RCC_OscConfig+0x30c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80007bc:	68a3      	ldr	r3, [r4, #8]
 80007be:	4d57      	ldr	r5, [pc, #348]	; (800091c <HAL_RCC_OscConfig+0x430>)
 80007c0:	2b01      	cmp	r3, #1
 80007c2:	d12a      	bne.n	800081a <HAL_RCC_OscConfig+0x32e>
 80007c4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80007c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007ca:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 80007cc:	f7ff fd18 	bl	8000200 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80007d0:	f241 3588 	movw	r5, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80007d4:	4681      	mov	r9, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80007d6:	f8df 8144 	ldr.w	r8, [pc, #324]	; 800091c <HAL_RCC_OscConfig+0x430>
 80007da:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
 80007de:	059b      	lsls	r3, r3, #22
 80007e0:	d541      	bpl.n	8000866 <HAL_RCC_OscConfig+0x37a>
    if(pwrclkchanged == SET)
 80007e2:	2f00      	cmp	r7, #0
 80007e4:	f43f aed8 	beq.w	8000598 <HAL_RCC_OscConfig+0xac>
      __HAL_RCC_PWR_CLK_DISABLE();
 80007e8:	4a4c      	ldr	r2, [pc, #304]	; (800091c <HAL_RCC_OscConfig+0x430>)
 80007ea:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80007ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80007f0:	6253      	str	r3, [r2, #36]	; 0x24
 80007f2:	e6d1      	b.n	8000598 <HAL_RCC_OscConfig+0xac>
    FlagStatus       pwrclkchanged = RESET;
 80007f4:	2700      	movs	r7, #0
 80007f6:	e7dd      	b.n	80007b4 <HAL_RCC_OscConfig+0x2c8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80007f8:	682b      	ldr	r3, [r5, #0]
 80007fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007fe:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000800:	f7ff fcfe 	bl	8000200 <HAL_GetTick>
 8000804:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000806:	682b      	ldr	r3, [r5, #0]
 8000808:	05da      	lsls	r2, r3, #23
 800080a:	d4d7      	bmi.n	80007bc <HAL_RCC_OscConfig+0x2d0>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800080c:	f7ff fcf8 	bl	8000200 <HAL_GetTick>
 8000810:	eba0 0008 	sub.w	r0, r0, r8
 8000814:	2864      	cmp	r0, #100	; 0x64
 8000816:	d9f6      	bls.n	8000806 <HAL_RCC_OscConfig+0x31a>
 8000818:	e6e5      	b.n	80005e6 <HAL_RCC_OscConfig+0xfa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800081a:	b9b3      	cbnz	r3, 800084a <HAL_RCC_OscConfig+0x35e>
 800081c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800081e:	f241 3988 	movw	r9, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000822:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000826:	636b      	str	r3, [r5, #52]	; 0x34
 8000828:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800082a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800082e:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000830:	f7ff fce6 	bl	8000200 <HAL_GetTick>
 8000834:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8000836:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000838:	0598      	lsls	r0, r3, #22
 800083a:	d5d2      	bpl.n	80007e2 <HAL_RCC_OscConfig+0x2f6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800083c:	f7ff fce0 	bl	8000200 <HAL_GetTick>
 8000840:	eba0 0008 	sub.w	r0, r0, r8
 8000844:	4548      	cmp	r0, r9
 8000846:	d9f6      	bls.n	8000836 <HAL_RCC_OscConfig+0x34a>
 8000848:	e6cd      	b.n	80005e6 <HAL_RCC_OscConfig+0xfa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800084a:	2b05      	cmp	r3, #5
 800084c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800084e:	d103      	bne.n	8000858 <HAL_RCC_OscConfig+0x36c>
 8000850:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000854:	636b      	str	r3, [r5, #52]	; 0x34
 8000856:	e7b5      	b.n	80007c4 <HAL_RCC_OscConfig+0x2d8>
 8000858:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800085c:	636b      	str	r3, [r5, #52]	; 0x34
 800085e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000860:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000864:	e7b1      	b.n	80007ca <HAL_RCC_OscConfig+0x2de>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000866:	f7ff fccb 	bl	8000200 <HAL_GetTick>
 800086a:	eba0 0009 	sub.w	r0, r0, r9
 800086e:	42a8      	cmp	r0, r5
 8000870:	d9b3      	bls.n	80007da <HAL_RCC_OscConfig+0x2ee>
 8000872:	e6b8      	b.n	80005e6 <HAL_RCC_OscConfig+0xfa>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000874:	2e0c      	cmp	r6, #12
 8000876:	d039      	beq.n	80008ec <HAL_RCC_OscConfig+0x400>
 8000878:	2300      	movs	r3, #0
 800087a:	4d2a      	ldr	r5, [pc, #168]	; (8000924 <HAL_RCC_OscConfig+0x438>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800087c:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800087e:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000880:	d126      	bne.n	80008d0 <HAL_RCC_OscConfig+0x3e4>
        tickstart = HAL_GetTick();
 8000882:	f7ff fcbd 	bl	8000200 <HAL_GetTick>
 8000886:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8000888:	4e24      	ldr	r6, [pc, #144]	; (800091c <HAL_RCC_OscConfig+0x430>)
 800088a:	6833      	ldr	r3, [r6, #0]
 800088c:	0199      	lsls	r1, r3, #6
 800088e:	d419      	bmi.n	80008c4 <HAL_RCC_OscConfig+0x3d8>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000890:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000892:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000894:	68b2      	ldr	r2, [r6, #8]
 8000896:	430b      	orrs	r3, r1
 8000898:	f422 027d 	bic.w	r2, r2, #16580608	; 0xfd0000
 800089c:	4313      	orrs	r3, r2
 800089e:	6b22      	ldr	r2, [r4, #48]	; 0x30
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80008a0:	4c1e      	ldr	r4, [pc, #120]	; (800091c <HAL_RCC_OscConfig+0x430>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80008a2:	4313      	orrs	r3, r2
 80008a4:	60b3      	str	r3, [r6, #8]
        __HAL_RCC_PLL_ENABLE();
 80008a6:	2301      	movs	r3, #1
 80008a8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80008aa:	f7ff fca9 	bl	8000200 <HAL_GetTick>
 80008ae:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80008b0:	6823      	ldr	r3, [r4, #0]
 80008b2:	019a      	lsls	r2, r3, #6
 80008b4:	f53f ae74 	bmi.w	80005a0 <HAL_RCC_OscConfig+0xb4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80008b8:	f7ff fca2 	bl	8000200 <HAL_GetTick>
 80008bc:	1b40      	subs	r0, r0, r5
 80008be:	2802      	cmp	r0, #2
 80008c0:	d9f6      	bls.n	80008b0 <HAL_RCC_OscConfig+0x3c4>
 80008c2:	e690      	b.n	80005e6 <HAL_RCC_OscConfig+0xfa>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80008c4:	f7ff fc9c 	bl	8000200 <HAL_GetTick>
 80008c8:	1bc0      	subs	r0, r0, r7
 80008ca:	2802      	cmp	r0, #2
 80008cc:	d9dd      	bls.n	800088a <HAL_RCC_OscConfig+0x39e>
 80008ce:	e68a      	b.n	80005e6 <HAL_RCC_OscConfig+0xfa>
        tickstart = HAL_GetTick();
 80008d0:	f7ff fc96 	bl	8000200 <HAL_GetTick>
 80008d4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80008d6:	4c11      	ldr	r4, [pc, #68]	; (800091c <HAL_RCC_OscConfig+0x430>)
 80008d8:	6823      	ldr	r3, [r4, #0]
 80008da:	019b      	lsls	r3, r3, #6
 80008dc:	f57f ae60 	bpl.w	80005a0 <HAL_RCC_OscConfig+0xb4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80008e0:	f7ff fc8e 	bl	8000200 <HAL_GetTick>
 80008e4:	1b40      	subs	r0, r0, r5
 80008e6:	2802      	cmp	r0, #2
 80008e8:	d9f6      	bls.n	80008d8 <HAL_RCC_OscConfig+0x3ec>
 80008ea:	e67c      	b.n	80005e6 <HAL_RCC_OscConfig+0xfa>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80008ec:	2801      	cmp	r0, #1
 80008ee:	f43f ae7b 	beq.w	80005e8 <HAL_RCC_OscConfig+0xfc>
        pll_config = RCC->CFGR;
 80008f2:	4b0a      	ldr	r3, [pc, #40]	; (800091c <HAL_RCC_OscConfig+0x430>)
 80008f4:	6898      	ldr	r0, [r3, #8]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80008f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80008f8:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 80008fc:	429a      	cmp	r2, r3
 80008fe:	f47f adf9 	bne.w	80004f4 <HAL_RCC_OscConfig+0x8>
 8000902:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8000904:	f400 1370 	and.w	r3, r0, #3932160	; 0x3c0000
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000908:	4293      	cmp	r3, r2
 800090a:	f47f adf3 	bne.w	80004f4 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800090e:	6b23      	ldr	r3, [r4, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8000910:	f400 0040 	and.w	r0, r0, #12582912	; 0xc00000
    return HAL_ERROR;
 8000914:	1ac0      	subs	r0, r0, r3
 8000916:	bf18      	it	ne
 8000918:	2001      	movne	r0, #1
 800091a:	e665      	b.n	80005e8 <HAL_RCC_OscConfig+0xfc>
 800091c:	40023800 	.word	0x40023800
 8000920:	40007000 	.word	0x40007000
 8000924:	42470060 	.word	0x42470060

08000928 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8000928:	4a12      	ldr	r2, [pc, #72]	; (8000974 <HAL_RCC_GetSysClockFreq+0x4c>)
 800092a:	6893      	ldr	r3, [r2, #8]
  switch (tmpreg & RCC_CFGR_SWS)
 800092c:	f003 010c 	and.w	r1, r3, #12
 8000930:	2908      	cmp	r1, #8
 8000932:	d005      	beq.n	8000940 <HAL_RCC_GetSysClockFreq+0x18>
 8000934:	290c      	cmp	r1, #12
 8000936:	d005      	beq.n	8000944 <HAL_RCC_GetSysClockFreq+0x1c>
 8000938:	2904      	cmp	r1, #4
 800093a:	d113      	bne.n	8000964 <HAL_RCC_GetSysClockFreq+0x3c>
      sysclockfreq = HSI_VALUE;
 800093c:	480e      	ldr	r0, [pc, #56]	; (8000978 <HAL_RCC_GetSysClockFreq+0x50>)
}
 800093e:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8000940:	480e      	ldr	r0, [pc, #56]	; (800097c <HAL_RCC_GetSysClockFreq+0x54>)
 8000942:	4770      	bx	lr
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8000944:	480e      	ldr	r0, [pc, #56]	; (8000980 <HAL_RCC_GetSysClockFreq+0x58>)
 8000946:	f3c3 4183 	ubfx	r1, r3, #18, #4
 800094a:	5c41      	ldrb	r1, [r0, r1]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800094c:	f3c3 5081 	ubfx	r0, r3, #22, #2
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000950:	6893      	ldr	r3, [r2, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8000952:	3001      	adds	r0, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000954:	03db      	lsls	r3, r3, #15
        pllvco = (HSE_VALUE * pllm) / plld;
 8000956:	bf4c      	ite	mi
 8000958:	4b08      	ldrmi	r3, [pc, #32]	; (800097c <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (HSI_VALUE * pllm) / plld;
 800095a:	4b07      	ldrpl	r3, [pc, #28]	; (8000978 <HAL_RCC_GetSysClockFreq+0x50>)
 800095c:	434b      	muls	r3, r1
 800095e:	fbb3 f0f0 	udiv	r0, r3, r0
 8000962:	4770      	bx	lr
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8000964:	6850      	ldr	r0, [r2, #4]
 8000966:	f3c0 3042 	ubfx	r0, r0, #13, #3
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800096a:	1c43      	adds	r3, r0, #1
 800096c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000970:	4098      	lsls	r0, r3
 8000972:	4770      	bx	lr
 8000974:	40023800 	.word	0x40023800
 8000978:	00f42400 	.word	0x00f42400
 800097c:	016e3600 	.word	0x016e3600
 8000980:	08001478 	.word	0x08001478

08000984 <HAL_RCC_ClockConfig>:
{
 8000984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000988:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800098a:	4604      	mov	r4, r0
 800098c:	b910      	cbnz	r0, 8000994 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800098e:	2001      	movs	r0, #1
 8000990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000994:	4b57      	ldr	r3, [pc, #348]	; (8000af4 <HAL_RCC_ClockConfig+0x170>)
 8000996:	681a      	ldr	r2, [r3, #0]
 8000998:	f002 0201 	and.w	r2, r2, #1
 800099c:	428a      	cmp	r2, r1
 800099e:	d32a      	bcc.n	80009f6 <HAL_RCC_ClockConfig+0x72>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80009a0:	6822      	ldr	r2, [r4, #0]
 80009a2:	0796      	lsls	r6, r2, #30
 80009a4:	d438      	bmi.n	8000a18 <HAL_RCC_ClockConfig+0x94>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80009a6:	07d0      	lsls	r0, r2, #31
 80009a8:	d43e      	bmi.n	8000a28 <HAL_RCC_ClockConfig+0xa4>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80009aa:	4b52      	ldr	r3, [pc, #328]	; (8000af4 <HAL_RCC_ClockConfig+0x170>)
 80009ac:	681a      	ldr	r2, [r3, #0]
 80009ae:	f002 0201 	and.w	r2, r2, #1
 80009b2:	4295      	cmp	r5, r2
 80009b4:	f0c0 808d 	bcc.w	8000ad2 <HAL_RCC_ClockConfig+0x14e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80009b8:	6822      	ldr	r2, [r4, #0]
 80009ba:	0751      	lsls	r1, r2, #29
 80009bc:	f100 8092 	bmi.w	8000ae4 <HAL_RCC_ClockConfig+0x160>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80009c0:	0713      	lsls	r3, r2, #28
 80009c2:	d507      	bpl.n	80009d4 <HAL_RCC_ClockConfig+0x50>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80009c4:	4a4c      	ldr	r2, [pc, #304]	; (8000af8 <HAL_RCC_ClockConfig+0x174>)
 80009c6:	6921      	ldr	r1, [r4, #16]
 80009c8:	6893      	ldr	r3, [r2, #8]
 80009ca:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80009ce:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80009d2:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80009d4:	f7ff ffa8 	bl	8000928 <HAL_RCC_GetSysClockFreq>
}
 80009d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80009dc:	4b46      	ldr	r3, [pc, #280]	; (8000af8 <HAL_RCC_ClockConfig+0x174>)
 80009de:	4a47      	ldr	r2, [pc, #284]	; (8000afc <HAL_RCC_ClockConfig+0x178>)
 80009e0:	689b      	ldr	r3, [r3, #8]
 80009e2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80009e6:	5cd3      	ldrb	r3, [r2, r3]
 80009e8:	40d8      	lsrs	r0, r3
 80009ea:	4b45      	ldr	r3, [pc, #276]	; (8000b00 <HAL_RCC_ClockConfig+0x17c>)
 80009ec:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 80009ee:	4b45      	ldr	r3, [pc, #276]	; (8000b04 <HAL_RCC_ClockConfig+0x180>)
 80009f0:	6818      	ldr	r0, [r3, #0]
 80009f2:	f7ff bbc3 	b.w	800017c <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80009f6:	2901      	cmp	r1, #1
 80009f8:	bf02      	ittt	eq
 80009fa:	681a      	ldreq	r2, [r3, #0]
 80009fc:	f042 0204 	orreq.w	r2, r2, #4
 8000a00:	601a      	streq	r2, [r3, #0]
 8000a02:	681a      	ldr	r2, [r3, #0]
 8000a04:	f022 0201 	bic.w	r2, r2, #1
 8000a08:	430a      	orrs	r2, r1
 8000a0a:	601a      	str	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	f003 0301 	and.w	r3, r3, #1
 8000a12:	4299      	cmp	r1, r3
 8000a14:	d1bb      	bne.n	800098e <HAL_RCC_ClockConfig+0xa>
 8000a16:	e7c3      	b.n	80009a0 <HAL_RCC_ClockConfig+0x1c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000a18:	4937      	ldr	r1, [pc, #220]	; (8000af8 <HAL_RCC_ClockConfig+0x174>)
 8000a1a:	68a0      	ldr	r0, [r4, #8]
 8000a1c:	688b      	ldr	r3, [r1, #8]
 8000a1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000a22:	4303      	orrs	r3, r0
 8000a24:	608b      	str	r3, [r1, #8]
 8000a26:	e7be      	b.n	80009a6 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000a28:	6861      	ldr	r1, [r4, #4]
 8000a2a:	4b33      	ldr	r3, [pc, #204]	; (8000af8 <HAL_RCC_ClockConfig+0x174>)
 8000a2c:	2902      	cmp	r1, #2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000a2e:	681a      	ldr	r2, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000a30:	d11d      	bne.n	8000a6e <HAL_RCC_ClockConfig+0xea>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000a32:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000a36:	d0aa      	beq.n	800098e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000a38:	689a      	ldr	r2, [r3, #8]
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000a3a:	4f2f      	ldr	r7, [pc, #188]	; (8000af8 <HAL_RCC_ClockConfig+0x174>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000a3c:	f022 0203 	bic.w	r2, r2, #3
 8000a40:	430a      	orrs	r2, r1
 8000a42:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8000a44:	f7ff fbdc 	bl	8000200 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000a48:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8000a4a:	4606      	mov	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000a4c:	2b02      	cmp	r3, #2
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a4e:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000a52:	d119      	bne.n	8000a88 <HAL_RCC_ClockConfig+0x104>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000a54:	68bb      	ldr	r3, [r7, #8]
 8000a56:	f003 030c 	and.w	r3, r3, #12
 8000a5a:	2b08      	cmp	r3, #8
 8000a5c:	d0a5      	beq.n	80009aa <HAL_RCC_ClockConfig+0x26>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a5e:	f7ff fbcf 	bl	8000200 <HAL_GetTick>
 8000a62:	1b80      	subs	r0, r0, r6
 8000a64:	4540      	cmp	r0, r8
 8000a66:	d9f5      	bls.n	8000a54 <HAL_RCC_ClockConfig+0xd0>
          return HAL_TIMEOUT;
 8000a68:	2003      	movs	r0, #3
 8000a6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000a6e:	2903      	cmp	r1, #3
 8000a70:	d102      	bne.n	8000a78 <HAL_RCC_ClockConfig+0xf4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8000a72:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8000a76:	e7de      	b.n	8000a36 <HAL_RCC_ClockConfig+0xb2>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8000a78:	2901      	cmp	r1, #1
 8000a7a:	d102      	bne.n	8000a82 <HAL_RCC_ClockConfig+0xfe>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000a7c:	f012 0f02 	tst.w	r2, #2
 8000a80:	e7d9      	b.n	8000a36 <HAL_RCC_ClockConfig+0xb2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000a82:	f412 7f00 	tst.w	r2, #512	; 0x200
 8000a86:	e7d6      	b.n	8000a36 <HAL_RCC_ClockConfig+0xb2>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000a88:	2b03      	cmp	r3, #3
 8000a8a:	d10a      	bne.n	8000aa2 <HAL_RCC_ClockConfig+0x11e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000a8c:	68bb      	ldr	r3, [r7, #8]
 8000a8e:	f003 030c 	and.w	r3, r3, #12
 8000a92:	2b0c      	cmp	r3, #12
 8000a94:	d089      	beq.n	80009aa <HAL_RCC_ClockConfig+0x26>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a96:	f7ff fbb3 	bl	8000200 <HAL_GetTick>
 8000a9a:	1b80      	subs	r0, r0, r6
 8000a9c:	4540      	cmp	r0, r8
 8000a9e:	d9f5      	bls.n	8000a8c <HAL_RCC_ClockConfig+0x108>
 8000aa0:	e7e2      	b.n	8000a68 <HAL_RCC_ClockConfig+0xe4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8000aa2:	2b01      	cmp	r3, #1
 8000aa4:	d110      	bne.n	8000ac8 <HAL_RCC_ClockConfig+0x144>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000aa6:	68bb      	ldr	r3, [r7, #8]
 8000aa8:	f003 030c 	and.w	r3, r3, #12
 8000aac:	2b04      	cmp	r3, #4
 8000aae:	f43f af7c 	beq.w	80009aa <HAL_RCC_ClockConfig+0x26>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ab2:	f7ff fba5 	bl	8000200 <HAL_GetTick>
 8000ab6:	1b80      	subs	r0, r0, r6
 8000ab8:	4540      	cmp	r0, r8
 8000aba:	d9f4      	bls.n	8000aa6 <HAL_RCC_ClockConfig+0x122>
 8000abc:	e7d4      	b.n	8000a68 <HAL_RCC_ClockConfig+0xe4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000abe:	f7ff fb9f 	bl	8000200 <HAL_GetTick>
 8000ac2:	1b80      	subs	r0, r0, r6
 8000ac4:	4540      	cmp	r0, r8
 8000ac6:	d8cf      	bhi.n	8000a68 <HAL_RCC_ClockConfig+0xe4>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	f013 0f0c 	tst.w	r3, #12
 8000ace:	d1f6      	bne.n	8000abe <HAL_RCC_ClockConfig+0x13a>
 8000ad0:	e76b      	b.n	80009aa <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ad2:	681a      	ldr	r2, [r3, #0]
 8000ad4:	f022 0201 	bic.w	r2, r2, #1
 8000ad8:	601a      	str	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	07da      	lsls	r2, r3, #31
 8000ade:	f53f af56 	bmi.w	800098e <HAL_RCC_ClockConfig+0xa>
 8000ae2:	e769      	b.n	80009b8 <HAL_RCC_ClockConfig+0x34>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000ae4:	4904      	ldr	r1, [pc, #16]	; (8000af8 <HAL_RCC_ClockConfig+0x174>)
 8000ae6:	68e0      	ldr	r0, [r4, #12]
 8000ae8:	688b      	ldr	r3, [r1, #8]
 8000aea:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000aee:	4303      	orrs	r3, r0
 8000af0:	608b      	str	r3, [r1, #8]
 8000af2:	e765      	b.n	80009c0 <HAL_RCC_ClockConfig+0x3c>
 8000af4:	40023c00 	.word	0x40023c00
 8000af8:	40023800 	.word	0x40023800
 8000afc:	08001468 	.word	0x08001468
 8000b00:	20000008 	.word	0x20000008
 8000b04:	20000004 	.word	0x20000004

08000b08 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000b08:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  tmpcr1 = TIMx->CR1;
 8000b0c:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000b0e:	d006      	beq.n	8000b1e <TIM_Base_SetConfig+0x16>
 8000b10:	4a18      	ldr	r2, [pc, #96]	; (8000b74 <TIM_Base_SetConfig+0x6c>)
 8000b12:	4290      	cmp	r0, r2
 8000b14:	d003      	beq.n	8000b1e <TIM_Base_SetConfig+0x16>
 8000b16:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000b1a:	4290      	cmp	r0, r2
 8000b1c:	d10e      	bne.n	8000b3c <TIM_Base_SetConfig+0x34>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8000b1e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000b20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000b24:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
    tmpcr1 |= Structure->CounterMode;
 8000b28:	ea43 0302 	orr.w	r3, r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000b2c:	d011      	beq.n	8000b52 <TIM_Base_SetConfig+0x4a>
 8000b2e:	4a11      	ldr	r2, [pc, #68]	; (8000b74 <TIM_Base_SetConfig+0x6c>)
 8000b30:	4290      	cmp	r0, r2
 8000b32:	d00e      	beq.n	8000b52 <TIM_Base_SetConfig+0x4a>
 8000b34:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000b38:	4290      	cmp	r0, r2
 8000b3a:	d00a      	beq.n	8000b52 <TIM_Base_SetConfig+0x4a>
 8000b3c:	4a0e      	ldr	r2, [pc, #56]	; (8000b78 <TIM_Base_SetConfig+0x70>)
 8000b3e:	4290      	cmp	r0, r2
 8000b40:	d007      	beq.n	8000b52 <TIM_Base_SetConfig+0x4a>
 8000b42:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000b46:	4290      	cmp	r0, r2
 8000b48:	d003      	beq.n	8000b52 <TIM_Base_SetConfig+0x4a>
 8000b4a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000b4e:	4290      	cmp	r0, r2
 8000b50:	d103      	bne.n	8000b5a <TIM_Base_SetConfig+0x52>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000b52:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8000b54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000b58:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8000b5a:	690a      	ldr	r2, [r1, #16]
 8000b5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000b60:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8000b62:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000b64:	688b      	ldr	r3, [r1, #8]
 8000b66:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8000b68:	680b      	ldr	r3, [r1, #0]
 8000b6a:	6283      	str	r3, [r0, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	6143      	str	r3, [r0, #20]
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	40000400 	.word	0x40000400
 8000b78:	40010800 	.word	0x40010800

08000b7c <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000b7c:	6a03      	ldr	r3, [r0, #32]
{
 8000b7e:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000b80:	f023 0301 	bic.w	r3, r3, #1
 8000b84:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000b86:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000b88:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8000b8a:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8000b8c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8000b8e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8000b92:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8000b94:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8000b96:	f023 0302 	bic.w	r3, r3, #2

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000b9a:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8000b9c:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8000b9e:	684a      	ldr	r2, [r1, #4]
  tmpccer |= OC_Config->OCPolarity;
 8000ba0:	432b      	orrs	r3, r5
  TIMx->CCR1 = OC_Config->Pulse;
 8000ba2:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000ba4:	6203      	str	r3, [r0, #32]
 8000ba6:	bd30      	pop	{r4, r5, pc}

08000ba8 <TIM_OC2_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000ba8:	6a03      	ldr	r3, [r0, #32]
{
 8000baa:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000bac:	f023 0310 	bic.w	r3, r3, #16
 8000bb0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000bb2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000bb4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8000bb6:	6982      	ldr	r2, [r0, #24]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000bb8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8000bba:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000bbe:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8000bc2:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8000bc4:	f023 0320 	bic.w	r3, r3, #32

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000bc8:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8000bca:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8000bcc:	684a      	ldr	r2, [r1, #4]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8000bce:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCR2 = OC_Config->Pulse;
 8000bd2:	6382      	str	r2, [r0, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000bd4:	6203      	str	r3, [r0, #32]
 8000bd6:	bd30      	pop	{r4, r5, pc}

08000bd8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8000bd8:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8000bda:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8000bdc:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8000bde:	f001 011f 	and.w	r1, r1, #31
 8000be2:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8000be4:	ea23 0304 	bic.w	r3, r3, r4
 8000be8:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8000bea:	6a03      	ldr	r3, [r0, #32]
 8000bec:	408a      	lsls	r2, r1
 8000bee:	431a      	orrs	r2, r3
 8000bf0:	6202      	str	r2, [r0, #32]
 8000bf2:	bd10      	pop	{r4, pc}

08000bf4 <HAL_TIM_Base_Init>:
{
 8000bf4:	b510      	push	{r4, lr}
  if (htim == NULL)
 8000bf6:	4604      	mov	r4, r0
 8000bf8:	b1a0      	cbz	r0, 8000c24 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8000bfa:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000bfe:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000c02:	b91b      	cbnz	r3, 8000c0c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8000c04:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 8000c08:	f000 fb3a 	bl	8001280 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8000c0c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000c0e:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8000c10:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000c14:	1d21      	adds	r1, r4, #4
 8000c16:	f7ff ff77 	bl	8000b08 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8000c1a:	2301      	movs	r3, #1
  return HAL_OK;
 8000c1c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8000c1e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8000c22:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000c24:	2001      	movs	r0, #1
}
 8000c26:	bd10      	pop	{r4, pc}

08000c28 <HAL_TIM_PWM_MspInit>:
 8000c28:	4770      	bx	lr

08000c2a <HAL_TIM_PWM_Init>:
{
 8000c2a:	b510      	push	{r4, lr}
  if (htim == NULL)
 8000c2c:	4604      	mov	r4, r0
 8000c2e:	b1a0      	cbz	r0, 8000c5a <HAL_TIM_PWM_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8000c30:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000c34:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000c38:	b91b      	cbnz	r3, 8000c42 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8000c3a:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_PWM_MspInit(htim);
 8000c3e:	f7ff fff3 	bl	8000c28 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8000c42:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000c44:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8000c46:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000c4a:	1d21      	adds	r1, r4, #4
 8000c4c:	f7ff ff5c 	bl	8000b08 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8000c50:	2301      	movs	r3, #1
  return HAL_OK;
 8000c52:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8000c54:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8000c58:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000c5a:	2001      	movs	r0, #1
}
 8000c5c:	bd10      	pop	{r4, pc}

08000c5e <HAL_TIM_IC_Start>:
{
 8000c5e:	b510      	push	{r4, lr}
 8000c60:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8000c62:	2201      	movs	r2, #1
 8000c64:	6800      	ldr	r0, [r0, #0]
 8000c66:	f7ff ffb7 	bl	8000bd8 <TIM_CCxChannelCmd>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8000c6a:	6823      	ldr	r3, [r4, #0]
}
 8000c6c:	2000      	movs	r0, #0
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8000c6e:	689a      	ldr	r2, [r3, #8]
 8000c70:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8000c74:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 8000c76:	bf1e      	ittt	ne
 8000c78:	681a      	ldrne	r2, [r3, #0]
 8000c7a:	f042 0201 	orrne.w	r2, r2, #1
 8000c7e:	601a      	strne	r2, [r3, #0]
}
 8000c80:	bd10      	pop	{r4, pc}

08000c82 <HAL_TIM_PWM_Start>:
 8000c82:	f7ff bfec 	b.w	8000c5e <HAL_TIM_IC_Start>

08000c86 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 8000c86:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
{
 8000c8a:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8000c8c:	2b01      	cmp	r3, #1
{
 8000c8e:	4605      	mov	r5, r0
 8000c90:	460c      	mov	r4, r1
 8000c92:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8000c96:	d025      	beq.n	8000ce4 <HAL_TIM_PWM_ConfigChannel+0x5e>
 8000c98:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8000c9a:	f885 0039 	strb.w	r0, [r5, #57]	; 0x39
  __HAL_LOCK(htim);
 8000c9e:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
  switch (Channel)
 8000ca2:	2a0c      	cmp	r2, #12
 8000ca4:	d818      	bhi.n	8000cd8 <HAL_TIM_PWM_ConfigChannel+0x52>
 8000ca6:	e8df f002 	tbb	[pc, r2]
 8000caa:	1707      	.short	0x1707
 8000cac:	171e1717 	.word	0x171e1717
 8000cb0:	172f1717 	.word	0x172f1717
 8000cb4:	1717      	.short	0x1717
 8000cb6:	52          	.byte	0x52
 8000cb7:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8000cb8:	6828      	ldr	r0, [r5, #0]
 8000cba:	f7ff ff5f 	bl	8000b7c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8000cbe:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8000cc0:	68c9      	ldr	r1, [r1, #12]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8000cc2:	699a      	ldr	r2, [r3, #24]
 8000cc4:	f042 0208 	orr.w	r2, r2, #8
 8000cc8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8000cca:	699a      	ldr	r2, [r3, #24]
 8000ccc:	f022 0204 	bic.w	r2, r2, #4
 8000cd0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8000cd2:	699a      	ldr	r2, [r3, #24]
 8000cd4:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8000cd6:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8000cd8:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8000cda:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8000cdc:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
  __HAL_UNLOCK(htim);
 8000ce0:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
}
 8000ce4:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8000ce6:	6828      	ldr	r0, [r5, #0]
 8000ce8:	f7ff ff5e 	bl	8000ba8 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8000cec:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8000cee:	68c9      	ldr	r1, [r1, #12]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8000cf0:	699a      	ldr	r2, [r3, #24]
 8000cf2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000cf6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8000cf8:	699a      	ldr	r2, [r3, #24]
 8000cfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000cfe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8000d00:	699a      	ldr	r2, [r3, #24]
 8000d02:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000d06:	e7e6      	b.n	8000cd6 <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8000d08:	682b      	ldr	r3, [r5, #0]
  tmpccmrx |= OC_Config->OCMode;
 8000d0a:	6826      	ldr	r6, [r4, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8000d0c:	6a1a      	ldr	r2, [r3, #32]
 8000d0e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000d12:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8000d14:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8000d16:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8000d18:	69d9      	ldr	r1, [r3, #28]
  tmpccer &= ~TIM_CCER_CC3P;
 8000d1a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8000d1e:	f021 0173 	bic.w	r1, r1, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8000d22:	4331      	orrs	r1, r6
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8000d24:	68a6      	ldr	r6, [r4, #8]
  TIMx->CR2 = tmpcr2;
 8000d26:	6058      	str	r0, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8000d28:	61d9      	str	r1, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8000d2a:	6861      	ldr	r1, [r4, #4]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8000d2c:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  TIMx->CCR3 = OC_Config->Pulse;
 8000d30:	63d9      	str	r1, [r3, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8000d32:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8000d34:	69da      	ldr	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8000d36:	68e1      	ldr	r1, [r4, #12]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8000d38:	f042 0208 	orr.w	r2, r2, #8
 8000d3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8000d3e:	69da      	ldr	r2, [r3, #28]
 8000d40:	f022 0204 	bic.w	r2, r2, #4
 8000d44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8000d46:	69da      	ldr	r2, [r3, #28]
 8000d48:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8000d4a:	61da      	str	r2, [r3, #28]
      break;
 8000d4c:	e7c4      	b.n	8000cd8 <HAL_TIM_PWM_ConfigChannel+0x52>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8000d4e:	682b      	ldr	r3, [r5, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000d50:	6826      	ldr	r6, [r4, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8000d52:	6a1a      	ldr	r2, [r3, #32]
 8000d54:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000d58:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8000d5a:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8000d5c:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8000d5e:	69d9      	ldr	r1, [r3, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 8000d60:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8000d64:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000d68:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8000d6c:	68a6      	ldr	r6, [r4, #8]
  TIMx->CR2 = tmpcr2;
 8000d6e:	6058      	str	r0, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8000d70:	61d9      	str	r1, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8000d72:	6861      	ldr	r1, [r4, #4]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8000d74:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCR4 = OC_Config->Pulse;
 8000d78:	6419      	str	r1, [r3, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8000d7a:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8000d7c:	69da      	ldr	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8000d7e:	68e1      	ldr	r1, [r4, #12]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8000d80:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000d84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8000d86:	69da      	ldr	r2, [r3, #28]
 8000d88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000d8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8000d8e:	69da      	ldr	r2, [r3, #28]
 8000d90:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000d94:	e7d9      	b.n	8000d4a <HAL_TIM_PWM_ConfigChannel+0xc4>

08000d96 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8000d96:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
{
 8000d9a:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8000d9c:	2b01      	cmp	r3, #1
 8000d9e:	f04f 0302 	mov.w	r3, #2
 8000da2:	d019      	beq.n	8000dd8 <HAL_TIM_ConfigClockSource+0x42>
 8000da4:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8000da6:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  tmpsmcr = htim->Instance->SMCR;
 8000daa:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 8000dac:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  tmpsmcr = htim->Instance->SMCR;
 8000db0:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000db2:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8000db6:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8000dba:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8000dbc:	680a      	ldr	r2, [r1, #0]
 8000dbe:	2a40      	cmp	r2, #64	; 0x40
 8000dc0:	d06f      	beq.n	8000ea2 <HAL_TIM_ConfigClockSource+0x10c>
 8000dc2:	d816      	bhi.n	8000df2 <HAL_TIM_ConfigClockSource+0x5c>
 8000dc4:	2a10      	cmp	r2, #16
 8000dc6:	d00d      	beq.n	8000de4 <HAL_TIM_ConfigClockSource+0x4e>
 8000dc8:	d808      	bhi.n	8000ddc <HAL_TIM_ConfigClockSource+0x46>
 8000dca:	b15a      	cbz	r2, 8000de4 <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_READY;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UNLOCK(htim);
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 8000dd8:	4618      	mov	r0, r3
}
 8000dda:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8000ddc:	2a20      	cmp	r2, #32
 8000dde:	d001      	beq.n	8000de4 <HAL_TIM_ConfigClockSource+0x4e>
 8000de0:	2a30      	cmp	r2, #48	; 0x30
 8000de2:	d1f3      	bne.n	8000dcc <HAL_TIM_ConfigClockSource+0x36>
  tmpsmcr = TIMx->SMCR;
 8000de4:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8000de6:	f042 0207 	orr.w	r2, r2, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8000dea:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8000dee:	430a      	orrs	r2, r1
 8000df0:	e03d      	b.n	8000e6e <HAL_TIM_ConfigClockSource+0xd8>
  switch (sClockSourceConfig->ClockSource)
 8000df2:	2a60      	cmp	r2, #96	; 0x60
 8000df4:	d03d      	beq.n	8000e72 <HAL_TIM_ConfigClockSource+0xdc>
 8000df6:	d818      	bhi.n	8000e2a <HAL_TIM_ConfigClockSource+0x94>
 8000df8:	2a50      	cmp	r2, #80	; 0x50
 8000dfa:	d1e7      	bne.n	8000dcc <HAL_TIM_ConfigClockSource+0x36>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8000dfc:	684c      	ldr	r4, [r1, #4]
 8000dfe:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8000e00:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000e02:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000e04:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000e08:	f025 0501 	bic.w	r5, r5, #1
 8000e0c:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000e0e:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8000e10:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000e12:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8000e16:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8000e1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8000e1c:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8000e1e:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8000e20:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8000e24:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 8000e28:	e021      	b.n	8000e6e <HAL_TIM_ConfigClockSource+0xd8>
  switch (sClockSourceConfig->ClockSource)
 8000e2a:	2a70      	cmp	r2, #112	; 0x70
 8000e2c:	d011      	beq.n	8000e52 <HAL_TIM_ConfigClockSource+0xbc>
 8000e2e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8000e32:	d1cb      	bne.n	8000dcc <HAL_TIM_ConfigClockSource+0x36>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000e34:	688a      	ldr	r2, [r1, #8]
 8000e36:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8000e38:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000e3a:	68c9      	ldr	r1, [r1, #12]
 8000e3c:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000e3e:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000e42:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000e46:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8000e48:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8000e4a:	689a      	ldr	r2, [r3, #8]
 8000e4c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000e50:	e00d      	b.n	8000e6e <HAL_TIM_ConfigClockSource+0xd8>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000e52:	688a      	ldr	r2, [r1, #8]
 8000e54:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8000e56:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000e58:	68c9      	ldr	r1, [r1, #12]
 8000e5a:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000e5c:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000e60:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000e64:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8000e66:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8000e68:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8000e6a:	f042 0277 	orr.w	r2, r2, #119	; 0x77
  TIMx->SMCR = tmpsmcr;
 8000e6e:	609a      	str	r2, [r3, #8]
 8000e70:	e7ac      	b.n	8000dcc <HAL_TIM_ConfigClockSource+0x36>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000e72:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8000e74:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000e76:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8000e7a:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000e7c:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000e7e:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8000e80:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8000e82:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8000e86:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8000e8a:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8000e8e:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8000e92:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8000e94:	621a      	str	r2, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8000e96:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8000e98:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8000e9c:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 8000ea0:	e7e5      	b.n	8000e6e <HAL_TIM_ConfigClockSource+0xd8>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8000ea2:	684c      	ldr	r4, [r1, #4]
 8000ea4:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8000ea6:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000ea8:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000eaa:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000eae:	f025 0501 	bic.w	r5, r5, #1
 8000eb2:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000eb4:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8000eb6:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000eb8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8000ebc:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8000ec0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8000ec2:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8000ec4:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8000ec6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8000eca:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8000ece:	e7ce      	b.n	8000e6e <HAL_TIM_ConfigClockSource+0xd8>

08000ed0 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8000ed0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
{
 8000ed4:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8000ed6:	2b01      	cmp	r3, #1
 8000ed8:	f04f 0302 	mov.w	r3, #2
 8000edc:	d014      	beq.n	8000f08 <HAL_TIMEx_MasterConfigSynchronization+0x38>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8000ede:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8000ee0:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  tmpcr2 = htim->Instance->CR2;
 8000ee4:	6862      	ldr	r2, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8000ee6:	68a3      	ldr	r3, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8000ee8:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8000eea:	6849      	ldr	r1, [r1, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 8000eec:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_MSM;
 8000ef0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8000ef4:	430b      	orrs	r3, r1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8000ef6:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8000ef8:	6062      	str	r2, [r4, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8000efa:	60a3      	str	r3, [r4, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8000efc:	2301      	movs	r3, #1
 8000efe:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8000f02:	2300      	movs	r3, #0
 8000f04:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 8000f08:	4618      	mov	r0, r3

  return HAL_OK;
}
 8000f0a:	bd30      	pop	{r4, r5, pc}

08000f0c <user_pwm_setvalue>:
	user_pwm_setvalue(0);
}


void user_pwm_setvalue(uint16_t value)
{
 8000f0c:	b530      	push	{r4, r5, lr}
    TIM_OC_InitTypeDef sConfigOC;

    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f0e:	2360      	movs	r3, #96	; 0x60
    sConfigOC.Pulse = value;
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f10:	2400      	movs	r4, #0
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;

    HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2);
 8000f12:	4d0d      	ldr	r5, [pc, #52]	; (8000f48 <user_pwm_setvalue+0x3c>)
{
 8000f14:	b085      	sub	sp, #20
    sConfigOC.Pulse = value;
 8000f16:	9001      	str	r0, [sp, #4]
    HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2);
 8000f18:	2204      	movs	r2, #4
 8000f1a:	4669      	mov	r1, sp
 8000f1c:	4628      	mov	r0, r5
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f1e:	9300      	str	r3, [sp, #0]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f20:	9402      	str	r4, [sp, #8]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f22:	9403      	str	r4, [sp, #12]
    HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2);
 8000f24:	f7ff feaf 	bl	8000c86 <HAL_TIM_PWM_ConfigChannel>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000f28:	4628      	mov	r0, r5

    HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1);
 8000f2a:	4d08      	ldr	r5, [pc, #32]	; (8000f4c <user_pwm_setvalue+0x40>)
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000f2c:	2104      	movs	r1, #4
 8000f2e:	f7ff fea8 	bl	8000c82 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1);
 8000f32:	4622      	mov	r2, r4
 8000f34:	4669      	mov	r1, sp
 8000f36:	4628      	mov	r0, r5
 8000f38:	f7ff fea5 	bl	8000c86 <HAL_TIM_PWM_ConfigChannel>
    HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
 8000f3c:	4621      	mov	r1, r4
 8000f3e:	4628      	mov	r0, r5
 8000f40:	f7ff fe9f 	bl	8000c82 <HAL_TIM_PWM_Start>

}
 8000f44:	b005      	add	sp, #20
 8000f46:	bd30      	pop	{r4, r5, pc}
 8000f48:	2000002c 	.word	0x2000002c
 8000f4c:	2000006c 	.word	0x2000006c

08000f50 <LockTurret>:
{
 8000f50:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(MOTOR_DIR_GPIO_Port, MOTOR_DIR_Pin, TURRET_LOCK_DIR);
 8000f52:	2201      	movs	r2, #1
 8000f54:	2102      	movs	r1, #2
 8000f56:	4806      	ldr	r0, [pc, #24]	; (8000f70 <LockTurret+0x20>)
 8000f58:	f7ff fa82 	bl	8000460 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_LOCK_GPIO_Port, LED_LOCK_Pin, GPIO_PIN_SET);
 8000f5c:	4805      	ldr	r0, [pc, #20]	; (8000f74 <LockTurret+0x24>)
 8000f5e:	2201      	movs	r2, #1
 8000f60:	2140      	movs	r1, #64	; 0x40
 8000f62:	f7ff fa7d 	bl	8000460 <HAL_GPIO_WritePin>
}
 8000f66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	user_pwm_setvalue(TURRET_LOCK_POWER);
 8000f6a:	20c8      	movs	r0, #200	; 0xc8
 8000f6c:	f7ff bfce 	b.w	8000f0c <user_pwm_setvalue>
 8000f70:	40020000 	.word	0x40020000
 8000f74:	40020400 	.word	0x40020400

08000f78 <UnlockTurret>:
{
 8000f78:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(MOTOR_DIR_GPIO_Port, MOTOR_DIR_Pin, TURRET_LOCK_DIR);
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	2102      	movs	r1, #2
 8000f7e:	4806      	ldr	r0, [pc, #24]	; (8000f98 <UnlockTurret+0x20>)
 8000f80:	f7ff fa6e 	bl	8000460 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_LOCK_GPIO_Port, LED_LOCK_Pin, GPIO_PIN_RESET);
 8000f84:	4805      	ldr	r0, [pc, #20]	; (8000f9c <UnlockTurret+0x24>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	2140      	movs	r1, #64	; 0x40
 8000f8a:	f7ff fa69 	bl	8000460 <HAL_GPIO_WritePin>
}
 8000f8e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	user_pwm_setvalue(0);
 8000f92:	2000      	movs	r0, #0
 8000f94:	f7ff bfba 	b.w	8000f0c <user_pwm_setvalue>
 8000f98:	40020000 	.word	0x40020000
 8000f9c:	40020400 	.word	0x40020400

08000fa0 <InitApp>:
	TurretState = IDLE;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	4a03      	ldr	r2, [pc, #12]	; (8000fb0 <InitApp+0x10>)
 8000fa4:	7013      	strb	r3, [r2, #0]
	NewTurretState = IDLE;
 8000fa6:	4a03      	ldr	r2, [pc, #12]	; (8000fb4 <InitApp+0x14>)
 8000fa8:	7013      	strb	r3, [r2, #0]
	UnlockTurret();
 8000faa:	f7ff bfe5 	b.w	8000f78 <UnlockTurret>
 8000fae:	bf00      	nop
 8000fb0:	20000068 	.word	0x20000068
 8000fb4:	20000069 	.word	0x20000069

08000fb8 <MainLoop>:
	if(TurretState != NewTurretState)
 8000fb8:	4b07      	ldr	r3, [pc, #28]	; (8000fd8 <MainLoop+0x20>)
 8000fba:	4a08      	ldr	r2, [pc, #32]	; (8000fdc <MainLoop+0x24>)
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	7812      	ldrb	r2, [r2, #0]
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	d007      	beq.n	8000fd4 <MainLoop+0x1c>
	  switch (TurretState) {
 8000fc4:	b113      	cbz	r3, 8000fcc <MainLoop+0x14>
 8000fc6:	2b03      	cmp	r3, #3
 8000fc8:	d002      	beq.n	8000fd0 <MainLoop+0x18>
 8000fca:	4770      	bx	lr
			UnlockTurret();
 8000fcc:	f7ff bfd4 	b.w	8000f78 <UnlockTurret>
			LockTurret();
 8000fd0:	f7ff bfbe 	b.w	8000f50 <LockTurret>
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	20000068 	.word	0x20000068
 8000fdc:	20000069 	.word	0x20000069

08000fe0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fe0:	b530      	push	{r4, r5, lr}
 8000fe2:	b093      	sub	sp, #76	; 0x4c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fe4:	2234      	movs	r2, #52	; 0x34
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	a805      	add	r0, sp, #20
 8000fea:	f000 fa29 	bl	8001440 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fee:	2100      	movs	r1, #0
 8000ff0:	2214      	movs	r2, #20
 8000ff2:	4668      	mov	r0, sp
 8000ff4:	f000 fa24 	bl	8001440 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ff8:	4a0e      	ldr	r2, [pc, #56]	; (8001034 <SystemClock_Config+0x54>)
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ffa:	2400      	movs	r4, #0
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ffc:	6813      	ldr	r3, [r2, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ffe:	2501      	movs	r5, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001000:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8001004:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001008:	6013      	str	r3, [r2, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800100a:	2302      	movs	r3, #2
 800100c:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800100e:	2310      	movs	r3, #16
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001010:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001012:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001014:	9508      	str	r5, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001016:	940e      	str	r4, [sp, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001018:	f7ff fa68 	bl	80004ec <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800101c:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800101e:	4621      	mov	r1, r4
 8001020:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001022:	e88d 0028 	stmia.w	sp, {r3, r5}
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001026:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001028:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800102a:	9404      	str	r4, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800102c:	f7ff fcaa 	bl	8000984 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8001030:	b013      	add	sp, #76	; 0x4c
 8001032:	bd30      	pop	{r4, r5, pc}
 8001034:	40007000 	.word	0x40007000

08001038 <main>:
{
 8001038:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 800103c:	b08f      	sub	sp, #60	; 0x3c
  HAL_Init();
 800103e:	f7ff f8c3 	bl	80001c8 <HAL_Init>
  SystemClock_Config();
 8001042:	f7ff ffcd 	bl	8000fe0 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001046:	2214      	movs	r2, #20
 8001048:	2100      	movs	r1, #0
 800104a:	a809      	add	r0, sp, #36	; 0x24
 800104c:	f000 f9f8 	bl	8001440 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001050:	4b72      	ldr	r3, [pc, #456]	; (800121c <main+0x1e4>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_DIR_GPIO_Port, MOTOR_DIR_Pin, GPIO_PIN_RESET);
 8001052:	2102      	movs	r1, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001054:	69da      	ldr	r2, [r3, #28]
  HAL_GPIO_WritePin(MOTOR_DIR_GPIO_Port, MOTOR_DIR_Pin, GPIO_PIN_RESET);
 8001056:	4872      	ldr	r0, [pc, #456]	; (8001220 <main+0x1e8>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001058:	f042 0201 	orr.w	r2, r2, #1
 800105c:	61da      	str	r2, [r3, #28]
 800105e:	69da      	ldr	r2, [r3, #28]
                           TOOL_SEL_4_Pin TOOL_SEL_5_Pin TOOL_SEL_6_Pin TOOL_SEL_7_Pin 
                           TOOL_SEL_8_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin|TOOL_SEL_1_Pin|TOOL_SEL_2_Pin|TOOL_SEL_3_Pin 
                          |TOOL_SEL_4_Pin|TOOL_SEL_5_Pin|TOOL_SEL_6_Pin|TOOL_SEL_7_Pin 
                          |TOOL_SEL_8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001060:	2400      	movs	r4, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001062:	f002 0201 	and.w	r2, r2, #1
 8001066:	9200      	str	r2, [sp, #0]
 8001068:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800106a:	69da      	ldr	r2, [r3, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : MOTOR_DIR_Pin */
  GPIO_InitStruct.Pin = MOTOR_DIR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800106c:	2501      	movs	r5, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800106e:	f042 0202 	orr.w	r2, r2, #2
 8001072:	61da      	str	r2, [r3, #28]
 8001074:	69da      	ldr	r2, [r3, #28]
  htim9.Init.Prescaler = 160-1;
 8001076:	f04f 0b9f 	mov.w	fp, #159	; 0x9f
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800107a:	f002 0202 	and.w	r2, r2, #2
 800107e:	9201      	str	r2, [sp, #4]
 8001080:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001082:	69da      	ldr	r2, [r3, #28]
  htim9.Init.Period = 2000-1;
 8001084:	f240 7acf 	movw	sl, #1999	; 0x7cf
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001088:	f042 0204 	orr.w	r2, r2, #4
 800108c:	61da      	str	r2, [r3, #28]
 800108e:	69db      	ldr	r3, [r3, #28]
  HAL_GPIO_WritePin(MOTOR_DIR_GPIO_Port, MOTOR_DIR_Pin, GPIO_PIN_RESET);
 8001090:	2200      	movs	r2, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001092:	f003 0304 	and.w	r3, r3, #4
 8001096:	9302      	str	r3, [sp, #8]
 8001098:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(MOTOR_DIR_GPIO_Port, MOTOR_DIR_Pin, GPIO_PIN_RESET);
 800109a:	f7ff f9e1 	bl	8000460 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TOOL_CHANGE_READY_GPIO_Port, TOOL_CHANGE_READY_Pin, GPIO_PIN_RESET);
 800109e:	2200      	movs	r2, #0
 80010a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010a4:	485f      	ldr	r0, [pc, #380]	; (8001224 <main+0x1ec>)
 80010a6:	f7ff f9db 	bl	8000460 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_LOCK_GPIO_Port, LED_LOCK_Pin, GPIO_PIN_RESET);
 80010aa:	2200      	movs	r2, #0
 80010ac:	2140      	movs	r1, #64	; 0x40
 80010ae:	485e      	ldr	r0, [pc, #376]	; (8001228 <main+0x1f0>)
 80010b0:	f7ff f9d6 	bl	8000460 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = BUTTON_Pin|TOOL_SEL_1_Pin|TOOL_SEL_2_Pin|TOOL_SEL_3_Pin 
 80010b4:	f64f 7301 	movw	r3, #65281	; 0xff01
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b8:	a909      	add	r1, sp, #36	; 0x24
 80010ba:	4859      	ldr	r0, [pc, #356]	; (8001220 <main+0x1e8>)
  GPIO_InitStruct.Pin = BUTTON_Pin|TOOL_SEL_1_Pin|TOOL_SEL_2_Pin|TOOL_SEL_3_Pin 
 80010bc:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010be:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c0:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c2:	f7ff f8ff 	bl	80002c4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = MOTOR_DIR_Pin;
 80010c6:	2302      	movs	r3, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(MOTOR_DIR_GPIO_Port, &GPIO_InitStruct);
 80010c8:	a909      	add	r1, sp, #36	; 0x24
 80010ca:	4855      	ldr	r0, [pc, #340]	; (8001220 <main+0x1e8>)
  GPIO_InitStruct.Pin = MOTOR_DIR_Pin;
 80010cc:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ce:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d0:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d2:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(MOTOR_DIR_GPIO_Port, &GPIO_InitStruct);
 80010d4:	f7ff f8f6 	bl	80002c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MOTOR_CURENT_Pin */
  GPIO_InitStruct.Pin = MOTOR_CURENT_Pin;
 80010d8:	2308      	movs	r3, #8
 80010da:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010dc:	2303      	movs	r3, #3
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(MOTOR_CURENT_GPIO_Port, &GPIO_InitStruct);
 80010de:	a909      	add	r1, sp, #36	; 0x24
 80010e0:	484f      	ldr	r0, [pc, #316]	; (8001220 <main+0x1e8>)
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010e2:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e4:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(MOTOR_CURENT_GPIO_Port, &GPIO_InitStruct);
 80010e6:	f7ff f8ed 	bl	80002c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : TURRET_P1_Pin TURRET_P2_Pin TURRET_P3_Pin TURRET_P4_Pin */
  GPIO_InitStruct.Pin = TURRET_P1_Pin|TURRET_P2_Pin|TURRET_P3_Pin|TURRET_P4_Pin;
 80010ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ee:	a909      	add	r1, sp, #36	; 0x24
 80010f0:	484d      	ldr	r0, [pc, #308]	; (8001228 <main+0x1f0>)
  GPIO_InitStruct.Pin = TURRET_P1_Pin|TURRET_P2_Pin|TURRET_P3_Pin|TURRET_P4_Pin;
 80010f2:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010f4:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f6:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010f8:	f7ff f8e4 	bl	80002c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOOL_CHANGE_READY_Pin */
  GPIO_InitStruct.Pin = TOOL_CHANGE_READY_Pin;
 80010fc:	f44f 7380 	mov.w	r3, #256	; 0x100
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(TOOL_CHANGE_READY_GPIO_Port, &GPIO_InitStruct);
 8001100:	a909      	add	r1, sp, #36	; 0x24
 8001102:	4848      	ldr	r0, [pc, #288]	; (8001224 <main+0x1ec>)
  GPIO_InitStruct.Pin = TOOL_CHANGE_READY_Pin;
 8001104:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001106:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001108:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110a:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(TOOL_CHANGE_READY_GPIO_Port, &GPIO_InitStruct);
 800110c:	f7ff f8da 	bl	80002c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOOL_CHANGE_Pin */
  GPIO_InitStruct.Pin = TOOL_CHANGE_Pin;
 8001110:	f44f 7300 	mov.w	r3, #512	; 0x200
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(TOOL_CHANGE_GPIO_Port, &GPIO_InitStruct);
 8001114:	a909      	add	r1, sp, #36	; 0x24
 8001116:	4843      	ldr	r0, [pc, #268]	; (8001224 <main+0x1ec>)
  GPIO_InitStruct.Pin = TOOL_CHANGE_Pin;
 8001118:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800111a:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111c:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(TOOL_CHANGE_GPIO_Port, &GPIO_InitStruct);
 800111e:	f7ff f8d1 	bl	80002c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_LOCK_Pin */
  GPIO_InitStruct.Pin = LED_LOCK_Pin;
 8001122:	2340      	movs	r3, #64	; 0x40
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001124:	f04f 0980 	mov.w	r9, #128	; 0x80
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001128:	f44f 5880 	mov.w	r8, #4096	; 0x1000
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800112c:	2604      	movs	r6, #4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800112e:	2760      	movs	r7, #96	; 0x60
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LED_LOCK_GPIO_Port, &GPIO_InitStruct);
 8001130:	a909      	add	r1, sp, #36	; 0x24
 8001132:	483d      	ldr	r0, [pc, #244]	; (8001228 <main+0x1f0>)
  GPIO_InitStruct.Pin = LED_LOCK_Pin;
 8001134:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001136:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113a:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(LED_LOCK_GPIO_Port, &GPIO_InitStruct);
 800113c:	f7ff f8c2 	bl	80002c4 <HAL_GPIO_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001140:	2210      	movs	r2, #16
 8001142:	4621      	mov	r1, r4
 8001144:	a805      	add	r0, sp, #20
  htim9.Instance = TIM9;
 8001146:	4d39      	ldr	r5, [pc, #228]	; (800122c <main+0x1f4>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001148:	f000 f97a 	bl	8001440 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800114c:	2210      	movs	r2, #16
 800114e:	4621      	mov	r1, r4
 8001150:	a809      	add	r0, sp, #36	; 0x24
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001152:	9403      	str	r4, [sp, #12]
 8001154:	9404      	str	r4, [sp, #16]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001156:	f000 f973 	bl	8001440 <memset>
  htim9.Init.Prescaler = 160-1;
 800115a:	4b35      	ldr	r3, [pc, #212]	; (8001230 <main+0x1f8>)
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 800115c:	4628      	mov	r0, r5
  htim9.Init.Prescaler = 160-1;
 800115e:	e885 0808 	stmia.w	r5, {r3, fp}
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001162:	60ac      	str	r4, [r5, #8]
  htim9.Init.Period = 2000-1;
 8001164:	f8c5 a00c 	str.w	sl, [r5, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001168:	612c      	str	r4, [r5, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800116a:	f8c5 9014 	str.w	r9, [r5, #20]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 800116e:	f7ff fd41 	bl	8000bf4 <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001172:	a905      	add	r1, sp, #20
 8001174:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001176:	f8cd 8014 	str.w	r8, [sp, #20]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 800117a:	f7ff fe0c 	bl	8000d96 <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 800117e:	4628      	mov	r0, r5
 8001180:	f7ff fd53 	bl	8000c2a <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim9, &sMasterConfig) != HAL_OK)
 8001184:	a903      	add	r1, sp, #12
 8001186:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001188:	9403      	str	r4, [sp, #12]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800118a:	9404      	str	r4, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim9, &sMasterConfig) != HAL_OK)
 800118c:	f7ff fea0 	bl	8000ed0 <HAL_TIMEx_MasterConfigSynchronization>
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001190:	4622      	mov	r2, r4
 8001192:	a909      	add	r1, sp, #36	; 0x24
 8001194:	4628      	mov	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001196:	9709      	str	r7, [sp, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001198:	940a      	str	r4, [sp, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800119a:	940b      	str	r4, [sp, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800119c:	960c      	str	r6, [sp, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800119e:	f7ff fd72 	bl	8000c86 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim9);
 80011a2:	4628      	mov	r0, r5
 80011a4:	f000 f892 	bl	80012cc <HAL_TIM_MspPostInit>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011a8:	2210      	movs	r2, #16
 80011aa:	4621      	mov	r1, r4
 80011ac:	a805      	add	r0, sp, #20
  htim4.Instance = TIM4;
 80011ae:	4d21      	ldr	r5, [pc, #132]	; (8001234 <main+0x1fc>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011b0:	f000 f946 	bl	8001440 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011b4:	2210      	movs	r2, #16
 80011b6:	4621      	mov	r1, r4
 80011b8:	a809      	add	r0, sp, #36	; 0x24
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011ba:	9403      	str	r4, [sp, #12]
 80011bc:	9404      	str	r4, [sp, #16]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011be:	f000 f93f 	bl	8001440 <memset>
  htim4.Instance = TIM4;
 80011c2:	4b1d      	ldr	r3, [pc, #116]	; (8001238 <main+0x200>)
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80011c4:	4628      	mov	r0, r5
  htim4.Init.Prescaler = 160-1;
 80011c6:	e885 0808 	stmia.w	r5, {r3, fp}
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ca:	60ac      	str	r4, [r5, #8]
  htim4.Init.Period = 2000-1;
 80011cc:	f8c5 a00c 	str.w	sl, [r5, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011d0:	612c      	str	r4, [r5, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011d2:	f8c5 9014 	str.w	r9, [r5, #20]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80011d6:	f7ff fd0d 	bl	8000bf4 <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80011da:	a905      	add	r1, sp, #20
 80011dc:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011de:	f8cd 8014 	str.w	r8, [sp, #20]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80011e2:	f7ff fdd8 	bl	8000d96 <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80011e6:	4628      	mov	r0, r5
 80011e8:	f7ff fd1f 	bl	8000c2a <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80011ec:	a903      	add	r1, sp, #12
 80011ee:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011f0:	9403      	str	r4, [sp, #12]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011f2:	9404      	str	r4, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80011f4:	f7ff fe6c 	bl	8000ed0 <HAL_TIMEx_MasterConfigSynchronization>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80011f8:	4632      	mov	r2, r6
 80011fa:	a909      	add	r1, sp, #36	; 0x24
 80011fc:	4628      	mov	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011fe:	9709      	str	r7, [sp, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001200:	940a      	str	r4, [sp, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001202:	940b      	str	r4, [sp, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001204:	960c      	str	r6, [sp, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001206:	f7ff fd3e 	bl	8000c86 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim4);
 800120a:	4628      	mov	r0, r5
 800120c:	f000 f85e 	bl	80012cc <HAL_TIM_MspPostInit>
  InitApp();
 8001210:	f7ff fec6 	bl	8000fa0 <InitApp>
	  MainLoop();
 8001214:	f7ff fed0 	bl	8000fb8 <MainLoop>
 8001218:	e7fc      	b.n	8001214 <main+0x1dc>
 800121a:	bf00      	nop
 800121c:	40023800 	.word	0x40023800
 8001220:	40020000 	.word	0x40020000
 8001224:	40020800 	.word	0x40020800
 8001228:	40020400 	.word	0x40020400
 800122c:	2000006c 	.word	0x2000006c
 8001230:	40010800 	.word	0x40010800
 8001234:	2000002c 	.word	0x2000002c
 8001238:	40000800 	.word	0x40000800

0800123c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 800123c:	4b0f      	ldr	r3, [pc, #60]	; (800127c <HAL_MspInit+0x40>)
{
 800123e:	b084      	sub	sp, #16
  __HAL_RCC_COMP_CLK_ENABLE();
 8001240:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001242:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001246:	625a      	str	r2, [r3, #36]	; 0x24
 8001248:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800124a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800124e:	9201      	str	r2, [sp, #4]
 8001250:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001252:	6a1a      	ldr	r2, [r3, #32]
 8001254:	f042 0201 	orr.w	r2, r2, #1
 8001258:	621a      	str	r2, [r3, #32]
 800125a:	6a1a      	ldr	r2, [r3, #32]
 800125c:	f002 0201 	and.w	r2, r2, #1
 8001260:	9202      	str	r2, [sp, #8]
 8001262:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001264:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001266:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800126a:	625a      	str	r2, [r3, #36]	; 0x24
 800126c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800126e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001272:	9303      	str	r3, [sp, #12]
 8001274:	9b03      	ldr	r3, [sp, #12]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001276:	b004      	add	sp, #16
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	40023800 	.word	0x40023800

08001280 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM4)
 8001280:	6803      	ldr	r3, [r0, #0]
 8001282:	4a0f      	ldr	r2, [pc, #60]	; (80012c0 <HAL_TIM_Base_MspInit+0x40>)
{
 8001284:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM4)
 8001286:	4293      	cmp	r3, r2
 8001288:	d10b      	bne.n	80012a2 <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800128a:	4b0e      	ldr	r3, [pc, #56]	; (80012c4 <HAL_TIM_Base_MspInit+0x44>)
 800128c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800128e:	f042 0204 	orr.w	r2, r2, #4
 8001292:	625a      	str	r2, [r3, #36]	; 0x24
 8001294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001296:	f003 0304 	and.w	r3, r3, #4
 800129a:	9300      	str	r3, [sp, #0]
 800129c:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 800129e:	b002      	add	sp, #8
 80012a0:	4770      	bx	lr
  else if(htim_base->Instance==TIM9)
 80012a2:	4a09      	ldr	r2, [pc, #36]	; (80012c8 <HAL_TIM_Base_MspInit+0x48>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d1fa      	bne.n	800129e <HAL_TIM_Base_MspInit+0x1e>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80012a8:	4b06      	ldr	r3, [pc, #24]	; (80012c4 <HAL_TIM_Base_MspInit+0x44>)
 80012aa:	6a1a      	ldr	r2, [r3, #32]
 80012ac:	f042 0204 	orr.w	r2, r2, #4
 80012b0:	621a      	str	r2, [r3, #32]
 80012b2:	6a1b      	ldr	r3, [r3, #32]
 80012b4:	f003 0304 	and.w	r3, r3, #4
 80012b8:	9301      	str	r3, [sp, #4]
 80012ba:	9b01      	ldr	r3, [sp, #4]
}
 80012bc:	e7ef      	b.n	800129e <HAL_TIM_Base_MspInit+0x1e>
 80012be:	bf00      	nop
 80012c0:	40000800 	.word	0x40000800
 80012c4:	40023800 	.word	0x40023800
 80012c8:	40010800 	.word	0x40010800

080012cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80012cc:	b510      	push	{r4, lr}
 80012ce:	4604      	mov	r4, r0
 80012d0:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d2:	2214      	movs	r2, #20
 80012d4:	2100      	movs	r1, #0
 80012d6:	a803      	add	r0, sp, #12
 80012d8:	f000 f8b2 	bl	8001440 <memset>
  if(htim->Instance==TIM4)
 80012dc:	6823      	ldr	r3, [r4, #0]
 80012de:	4a17      	ldr	r2, [pc, #92]	; (800133c <HAL_TIM_MspPostInit+0x70>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d114      	bne.n	800130e <HAL_TIM_MspPostInit+0x42>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012e4:	4b16      	ldr	r3, [pc, #88]	; (8001340 <HAL_TIM_MspPostInit+0x74>)
    GPIO_InitStruct.Pin = LED_PWM_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
    HAL_GPIO_Init(LED_PWM_GPIO_Port, &GPIO_InitStruct);
 80012e6:	4817      	ldr	r0, [pc, #92]	; (8001344 <HAL_TIM_MspPostInit+0x78>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012e8:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(LED_PWM_GPIO_Port, &GPIO_InitStruct);
 80012ea:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ec:	f042 0202 	orr.w	r2, r2, #2
 80012f0:	61da      	str	r2, [r3, #28]
 80012f2:	69db      	ldr	r3, [r3, #28]
 80012f4:	f003 0302 	and.w	r3, r3, #2
 80012f8:	9301      	str	r3, [sp, #4]
 80012fa:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = LED_PWM_Pin;
 80012fc:	2380      	movs	r3, #128	; 0x80
 80012fe:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001300:	2302      	movs	r3, #2
 8001302:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001304:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pin = MOTOR_PWM_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
    HAL_GPIO_Init(MOTOR_PWM_GPIO_Port, &GPIO_InitStruct);
 8001306:	f7fe ffdd 	bl	80002c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 800130a:	b008      	add	sp, #32
 800130c:	bd10      	pop	{r4, pc}
  else if(htim->Instance==TIM9)
 800130e:	4a0e      	ldr	r2, [pc, #56]	; (8001348 <HAL_TIM_MspPostInit+0x7c>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d1fa      	bne.n	800130a <HAL_TIM_MspPostInit+0x3e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001314:	4b0a      	ldr	r3, [pc, #40]	; (8001340 <HAL_TIM_MspPostInit+0x74>)
    HAL_GPIO_Init(MOTOR_PWM_GPIO_Port, &GPIO_InitStruct);
 8001316:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001318:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(MOTOR_PWM_GPIO_Port, &GPIO_InitStruct);
 800131a:	480c      	ldr	r0, [pc, #48]	; (800134c <HAL_TIM_MspPostInit+0x80>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800131c:	f042 0201 	orr.w	r2, r2, #1
 8001320:	61da      	str	r2, [r3, #28]
 8001322:	69db      	ldr	r3, [r3, #28]
 8001324:	f003 0301 	and.w	r3, r3, #1
 8001328:	9302      	str	r3, [sp, #8]
 800132a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = MOTOR_PWM_Pin;
 800132c:	2304      	movs	r3, #4
 800132e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001330:	2302      	movs	r3, #2
 8001332:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8001334:	2303      	movs	r3, #3
 8001336:	9307      	str	r3, [sp, #28]
 8001338:	e7e5      	b.n	8001306 <HAL_TIM_MspPostInit+0x3a>
 800133a:	bf00      	nop
 800133c:	40000800 	.word	0x40000800
 8001340:	40023800 	.word	0x40023800
 8001344:	40020400 	.word	0x40020400
 8001348:	40010800 	.word	0x40010800
 800134c:	40020000 	.word	0x40020000

08001350 <NMI_Handler>:
 8001350:	4770      	bx	lr

08001352 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001352:	e7fe      	b.n	8001352 <HardFault_Handler>

08001354 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001354:	e7fe      	b.n	8001354 <MemManage_Handler>

08001356 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001356:	e7fe      	b.n	8001356 <BusFault_Handler>

08001358 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001358:	e7fe      	b.n	8001358 <UsageFault_Handler>

0800135a <SVC_Handler>:
 800135a:	4770      	bx	lr

0800135c <DebugMon_Handler>:
 800135c:	4770      	bx	lr

0800135e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800135e:	4770      	bx	lr

08001360 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001360:	f7fe bf42 	b.w	80001e8 <HAL_IncTick>

08001364 <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8001364:	4b0e      	ldr	r3, [pc, #56]	; (80013a0 <SystemInit+0x3c>)
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800136c:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 800136e:	6899      	ldr	r1, [r3, #8]
 8001370:	4a0c      	ldr	r2, [pc, #48]	; (80013a4 <SystemInit+0x40>)
 8001372:	400a      	ands	r2, r1
 8001374:	609a      	str	r2, [r3, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	f022 5288 	bic.w	r2, r2, #285212672	; 0x11000000
 800137c:	f022 1201 	bic.w	r2, r2, #65537	; 0x10001
 8001380:	601a      	str	r2, [r3, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001388:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 800138a:	689a      	ldr	r2, [r3, #8]
 800138c:	f422 027d 	bic.w	r2, r2, #16580608	; 0xfd0000
 8001390:	609a      	str	r2, [r3, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001392:	2200      	movs	r2, #0
 8001394:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001396:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800139a:	4b03      	ldr	r3, [pc, #12]	; (80013a8 <SystemInit+0x44>)
 800139c:	609a      	str	r2, [r3, #8]
 800139e:	4770      	bx	lr
 80013a0:	40023800 	.word	0x40023800
 80013a4:	88ffc00c 	.word	0x88ffc00c
 80013a8:	e000ed00 	.word	0xe000ed00

080013ac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80013ac:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80013ae:	e003      	b.n	80013b8 <LoopCopyDataInit>

080013b0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80013b0:	4b0b      	ldr	r3, [pc, #44]	; (80013e0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80013b2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80013b4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80013b6:	3104      	adds	r1, #4

080013b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80013b8:	480a      	ldr	r0, [pc, #40]	; (80013e4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80013ba:	4b0b      	ldr	r3, [pc, #44]	; (80013e8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80013bc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80013be:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80013c0:	d3f6      	bcc.n	80013b0 <CopyDataInit>
  ldr r2, =_sbss
 80013c2:	4a0a      	ldr	r2, [pc, #40]	; (80013ec <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80013c4:	e002      	b.n	80013cc <LoopFillZerobss>

080013c6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80013c6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80013c8:	f842 3b04 	str.w	r3, [r2], #4

080013cc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80013cc:	4b08      	ldr	r3, [pc, #32]	; (80013f0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80013ce:	429a      	cmp	r2, r3
  bcc FillZerobss
 80013d0:	d3f9      	bcc.n	80013c6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80013d2:	f7ff ffc7 	bl	8001364 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013d6:	f000 f80f 	bl	80013f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013da:	f7ff fe2d 	bl	8001038 <main>
  bx lr
 80013de:	4770      	bx	lr
  ldr r3, =_sidata
 80013e0:	0800148c 	.word	0x0800148c
  ldr r0, =_sdata
 80013e4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80013e8:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 80013ec:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 80013f0:	200000a8 	.word	0x200000a8

080013f4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013f4:	e7fe      	b.n	80013f4 <ADC1_IRQHandler>
	...

080013f8 <__libc_init_array>:
 80013f8:	b570      	push	{r4, r5, r6, lr}
 80013fa:	2500      	movs	r5, #0
 80013fc:	4e0c      	ldr	r6, [pc, #48]	; (8001430 <__libc_init_array+0x38>)
 80013fe:	4c0d      	ldr	r4, [pc, #52]	; (8001434 <__libc_init_array+0x3c>)
 8001400:	1ba4      	subs	r4, r4, r6
 8001402:	10a4      	asrs	r4, r4, #2
 8001404:	42a5      	cmp	r5, r4
 8001406:	d109      	bne.n	800141c <__libc_init_array+0x24>
 8001408:	f000 f822 	bl	8001450 <_init>
 800140c:	2500      	movs	r5, #0
 800140e:	4e0a      	ldr	r6, [pc, #40]	; (8001438 <__libc_init_array+0x40>)
 8001410:	4c0a      	ldr	r4, [pc, #40]	; (800143c <__libc_init_array+0x44>)
 8001412:	1ba4      	subs	r4, r4, r6
 8001414:	10a4      	asrs	r4, r4, #2
 8001416:	42a5      	cmp	r5, r4
 8001418:	d105      	bne.n	8001426 <__libc_init_array+0x2e>
 800141a:	bd70      	pop	{r4, r5, r6, pc}
 800141c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001420:	4798      	blx	r3
 8001422:	3501      	adds	r5, #1
 8001424:	e7ee      	b.n	8001404 <__libc_init_array+0xc>
 8001426:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800142a:	4798      	blx	r3
 800142c:	3501      	adds	r5, #1
 800142e:	e7f2      	b.n	8001416 <__libc_init_array+0x1e>
 8001430:	08001484 	.word	0x08001484
 8001434:	08001484 	.word	0x08001484
 8001438:	08001484 	.word	0x08001484
 800143c:	08001488 	.word	0x08001488

08001440 <memset>:
 8001440:	4603      	mov	r3, r0
 8001442:	4402      	add	r2, r0
 8001444:	4293      	cmp	r3, r2
 8001446:	d100      	bne.n	800144a <memset+0xa>
 8001448:	4770      	bx	lr
 800144a:	f803 1b01 	strb.w	r1, [r3], #1
 800144e:	e7f9      	b.n	8001444 <memset+0x4>

08001450 <_init>:
 8001450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001452:	bf00      	nop
 8001454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001456:	bc08      	pop	{r3}
 8001458:	469e      	mov	lr, r3
 800145a:	4770      	bx	lr

0800145c <_fini>:
 800145c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800145e:	bf00      	nop
 8001460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001462:	bc08      	pop	{r3}
 8001464:	469e      	mov	lr, r3
 8001466:	4770      	bx	lr
